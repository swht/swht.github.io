<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南非波波博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.songqingbo.cn/"/>
  <updated>2016-10-27T01:29:32.316Z</updated>
  <id>http://blog.songqingbo.cn/</id>
  
  <author>
    <name>南非波波</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2016-10-11-mysql-mysql查询命令</title>
    <link href="http://blog.songqingbo.cn/2016/10/11/2016-10-11-mysql-mysql%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.songqingbo.cn/2016/10/11/2016-10-11-mysql-mysql查询命令/</id>
    <published>2016-10-11T03:18:50.000Z</published>
    <updated>2016-10-27T01:29:32.316Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;编者按:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这篇文章会陆续记录在工作中使用mysql进行数据查询的一些命令，以及将一些需求和命令的实现进行结合讲解。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一、获取在(北京、广州、深圳)近三个月内有登录行为的用户信息，字段：用户名，邮箱，手机号，创建应用数量，注册时间，最后一次登录时间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    num,
    province,
    FROM_UNIXTIME(
        ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    FROM_UNIXTIME(
        loginTime / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS loginTime
FROM
    TB_Enterprise_User
INNER JOIN (
    SELECT
        userId,
        COUNT(*) AS num
    FROM
        cad_app_user
    WHERE
        type = 0
    GROUP BY
        userId
    ORDER BY
        num
) tb1 ON TB_Enterprise_User.enterUserId = tb1.userId
WHERE
    LENGTH(phone) = 11
AND phone IS NOT NULL
AND loginTime &amp;gt;= UNIX_TIMESTAMP(&amp;apos;2016-07-11 00:00:00&amp;apos;) * 1000

AND (
    province = &amp;apos;北京&amp;apos;
    OR province = &amp;apos;广州&amp;apos;
    OR province = &amp;apos;深圳&amp;apos;
)
ORDER BY
    loginTime ASC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需求分析：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用户名，邮箱，手机号，注册时间，最后一次登录时间这几个字段都存放在一张表中(TB_Enterprise_User),只需要写好相应的条件就行。
创建应用数需要从另一张表中(cad_app_user)进行统计查询形成新表与TB_Enterprise_User进行表关联。
这里需要注意loginTime、ct记录的是毫秒值，而UNIX_TIMESTAMP(&amp;apos;2016-07-11 00:00:00&amp;apos;)转换的记录值是秒
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二、获取过去一周新增loader用户的信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;查询指定时间增加loader用户的信息：
    1.统计服务器每天新增文件total_day/new.txt获取appId
        awk -F &amp;quot;|&amp;quot; &amp;apos;{print $1}&amp;apos; 20161023 |sort -k 1 -n -r|uniq -c|awk -F &amp;quot; &amp;quot; &amp;apos;{print $2}&amp;apos; &amp;gt;&amp;gt; test.txt （多天就执行多条，把文件名换一下，然后执行下面一句）
        awk -F &amp;quot;|&amp;quot; &amp;apos;{print $1}&amp;apos; test.txt |sort -k 1 -n -r|uniq -c|awk -F &amp;quot; &amp;quot; &amp;apos;{print $2}&amp;apos; &amp;gt;&amp;gt; test_2.txt(获取到全部的新增loader的应用ID)
    2.根据应用ID获取对应的userId
    3.查询对应userId创建应用的数量
    4.进行表关联，查询用户表，获取用户的信息


SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        TB_Enterprise_User.ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    province,
    num
FROM 
    TB_Enterprise_User
INNER JOIN (
    SELECT
        userId,COUNT(*) AS num
    FROM
        cad_app_user
    WHERE
        userId IN (
            SELECT
                userId
            FROM
                cad_app_user
            WHERE
                type = 0
            AND appId IN(&amp;apos;A6999979578606&amp;apos;,&amp;apos;A6999956860949&amp;apos;,&amp;apos;A6999909977189&amp;apos;)
            GROUP BY
                userId
        )
    GROUP BY
        userId
) tb1 ON TB_Enterprise_User.enterUserId = tb1.userId
ORDER BY
    TB_Enterprise_User.enterUserId ASC;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;三、指定时间的自定义loader的使用用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        TB_Enterprise_User.ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    province
FROM
    TB_Enterprise_User
INNER JOIN loader_pack ON TB_Enterprise_User.enterUserId = loader_pack.userId
WHERE
    loader_pack.ct &amp;gt;= UNIX_TIMESTAMP(&amp;apos;2016-10-17 00:00:00&amp;apos;) * 1000
AND loader_pack.ct &amp;lt; UNIX_TIMESTAMP(&amp;apos;2016-10-24 00:00:00&amp;apos;) * 1000
GROUP BY enterUserId
ORDER BY
    TB_Enterprise_User.enterUserId ASC;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;编者按:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这篇文章会陆续记录在工作中使用mysql进行数据查询的一些命令，以及将一些需求和命令的实现进行结合讲解。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一、获取在(北京、广州、深圳)近三个月内有登录行为的用户
    
    </summary>
    
    
      <category term="mysql" scheme="http://blog.songqingbo.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-Python教程_20141026</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Python%E6%95%99%E7%A8%8B-20141026/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-Python教程-20141026/</id>
    <published>2016-08-31T08:55:18.000Z</published>
    <updated>2016-09-26T08:58:28.608Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python教程_20141026.pdf&quot; title=&quot;Python教程_20141026.pdf&quot;&gt;Python教程_20141026&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python教程_20141026.pdf&quot; title=&quot;Python教程_20141026.pdf&quot;&gt;Python教程_20141026&lt;
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-Python核心编程 第三版 英文版</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B-%E7%AC%AC%E4%B8%89%E7%89%88-%E8%8B%B1%E6%96%87%E7%89%88/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-Python核心编程-第三版-英文版/</id>
    <published>2016-08-31T08:53:13.000Z</published>
    <updated>2016-09-26T08:58:19.525Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/《Python标准库》中文版.pdf&quot; title=&quot;《Python标准库》中文版.pdf&quot;&gt;《Python标准库》中文版&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/《Python标准库》中文版.pdf&quot; title=&quot;《Python标准库》中文版.pdf&quot;&gt;《Python标准库》中文版&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-PythonCookbook第三版中文</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-PythonCookbook%E7%AC%AC%E4%B8%89%E7%89%88%E4%B8%AD%E6%96%87/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-PythonCookbook第三版中文/</id>
    <published>2016-08-31T08:51:58.000Z</published>
    <updated>2016-09-26T08:58:36.005Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/PythonCookbook第三版中文.pdf&quot; title=&quot;PythonCookbook第三版中文.pdf&quot;&gt;PythonCookbook第三版中文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/PythonCookbook第三版中文.pdf&quot; title=&quot;PythonCookbook第三版中文.pdf&quot;&gt;PythonCookbook
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-Python 入门指南3.5.1 中文</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Python-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%973-5-1-%E4%B8%AD%E6%96%87/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-Python-入门指南3-5-1-中文/</id>
    <published>2016-08-31T08:50:06.000Z</published>
    <updated>2016-09-26T08:58:44.345Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python入门指南3.5.1中文.chm&quot; title=&quot;Python入门指南3.5.1中文.chm&quot;&gt;Python 入门指南3.5.1 中文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python入门指南3.5.1中文.chm&quot; title=&quot;Python入门指南3.5.1中文.chm&quot;&gt;Python 入门指南3.5.1 中
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-DjangoBook2.0中文版</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-DjangoBook2-0%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-DjangoBook2-0中文版/</id>
    <published>2016-08-31T08:48:46.000Z</published>
    <updated>2016-10-13T08:51:42.586Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/DjangoBook2.0中文版.pdf&quot; title=&quot;DjangoBook2.0中文版.pdf&quot;&gt;DjangoBook2.0中文版.pdf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/DjangoBook2.0中文版.pdf&quot; title=&quot;DjangoBook2.0中文版.pdf&quot;&gt;DjangoBook2.0中文版.pdf
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-Django Web开发指南</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Django-Web%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-Django-Web开发指南/</id>
    <published>2016-08-31T08:46:17.000Z</published>
    <updated>2016-09-26T08:58:58.625Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/DjangoWeb开发指南.pdf&quot; title=&quot;Django Web开发指南.pdf&quot;&gt;Django Web开发指南.pdf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/DjangoWeb开发指南.pdf&quot; title=&quot;Django Web开发指南.pdf&quot;&gt;Django Web开发指南.pdf&lt;/a&gt;&lt;/p
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-《Python标准库源代码》</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-%E3%80%8APython%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-《Python标准库源代码》/</id>
    <published>2016-08-31T08:43:40.000Z</published>
    <updated>2016-09-26T08:57:59.404Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/《Python标准库源代码》.CHM&quot; title=&quot;《Python标准库源代码》.CHM&quot;&gt;《Python标准库源代码》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/《Python标准库源代码》.CHM&quot; title=&quot;《Python标准库源代码》.CHM&quot;&gt;《Python标准库源代码》&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-《Python标准库》中文版</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-%E3%80%8APython%E6%A0%87%E5%87%86%E5%BA%93%E3%80%8B%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-《Python标准库》中文版/</id>
    <published>2016-08-31T08:41:21.000Z</published>
    <updated>2016-09-26T08:58:12.738Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python核心编程[第三版]英文版.pdf&quot; title=&quot;Python核心编程[第三版]英文版.pdf&quot;&gt;Python核心编程[第三版]英文版&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python核心编程[第三版]英文版.pdf&quot; title=&quot;Python核心编程[第三版]英文版.pdf&quot;&gt;Python核心编程[第三版]英
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-26-nodejs开发书籍-Node入门</title>
    <link href="http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Node%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs开发书籍-Node入门/</id>
    <published>2016-08-26T02:31:54.000Z</published>
    <updated>2016-08-26T02:32:44.187Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node入门.pdf&quot; title=&quot;Node入门.pdf&quot;&gt;Node入门&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node入门.pdf&quot; title=&quot;Node入门.pdf&quot;&gt;Node入门&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-26-nodejs开发书籍-Node+Web开发</title>
    <link href="http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Node-Web%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs开发书籍-Node-Web开发/</id>
    <published>2016-08-26T02:29:04.000Z</published>
    <updated>2016-08-26T02:31:29.564Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node+Web开发.pdf&quot; title=&quot;Node+Web开发.pdf&quot;&gt;Node+Web开发&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node+Web开发.pdf&quot; title=&quot;Node+Web开发.pdf&quot;&gt;Node+Web开发&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-26-nodejs开发书籍-Node.js+开js+开发指南</title>
    <link href="http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Nodejs-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs开发书籍-Nodejs-开发指南/</id>
    <published>2016-08-26T02:15:31.000Z</published>
    <updated>2016-08-26T02:28:17.405Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node.js+开发指南.pdf&quot; title=&quot;Node.js+开发指南.pdf&quot;&gt;Node.js+开发指南&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node.js+开发指南.pdf&quot; title=&quot;Node.js+开发指南.pdf&quot;&gt;Node.js+开发指南&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016/08/22 [nodejs开发书籍]深入浅出Node.js.pdf</title>
    <link href="http://blog.songqingbo.cn/2016/08/22/2016-08-22-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode-js-pdf/"/>
    <id>http://blog.songqingbo.cn/2016/08/22/2016-08-22-nodejs开发书籍-深入浅出Node-js-pdf/</id>
    <published>2016-08-22T01:47:18.000Z</published>
    <updated>2016-08-24T03:48:56.108Z</updated>
    
    <content type="html">&lt;p&gt;Author: @南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/深入浅出Node.js.pdf&quot; title=&quot;深入浅出Node.js.pdf&quot;&gt;深入浅出Node.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明：本电子书为为本人从图灵社区所购，涉及版权，请读者不要私自传播。本平台仅提供在线阅读功能。如果您觉得此书帮助了您，同时也想帮作者分摊一部分电子书版权费。欢迎通过微信二维码进行资助，非常感谢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.songqingbo.cn/img/微信收款.png&quot; width=&quot;30%&quot; height=&quot;30%&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author: @南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/深入浅出Node.js.pdf&quot; title=&quot;深入浅出Node.js.pdf&quot;&gt;深入浅出Node.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明：本电子
    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016/08/20 [nodejs开发书籍]MEAN Web开发</title>
    <link href="http://blog.songqingbo.cn/2016/08/20/2016-08-20-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-MEAN-Web%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.songqingbo.cn/2016/08/20/2016-08-20-nodejs开发书籍-MEAN-Web开发/</id>
    <published>2016-08-20T10:42:34.000Z</published>
    <updated>2016-08-26T02:36:40.635Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/MEANWeb开发.pdf&quot; title=&quot;MEAN Web开发.pdf&quot;&gt;MEAN WEB开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/MEANWeb开发代码.zip&quot; title=&quot;MEAN Web开发代码.zip&quot;&gt;MEAN Web开发代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明：本电子书为为本人从图灵社区所购，涉及版权，请读者不要私自传播。本平台仅提供在线阅读功能。如果您觉得此书帮助了您，同时也想帮作者分摊一部分电子书版权费。欢迎通过微信二维码进行资助，非常感谢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.songqingbo.cn/img/微信收款.png&quot; width=&quot;30%&quot; height=&quot;30%&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/MEANWeb开发.pdf&quot; title=&quot;MEAN Web开发.pdf&quot;&gt;MEAN WEB开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;ht
    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day17</title>
    <link href="http://blog.songqingbo.cn/2016/05/14/s12-20160514-day17/"/>
    <id>http://blog.songqingbo.cn/2016/05/14/s12-20160514-day17/</id>
    <published>2016-05-14T07:30:00.000Z</published>
    <updated>2016-07-05T10:37:26.015Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5474411.html&quot; title=&quot;常用算法设计&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5474411.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、冒泡排序算法&quot;&gt;&lt;a href=&quot;#一、冒泡排序算法&quot; class=&quot;headerlink&quot; title=&quot;一、冒泡排序算法&quot;&gt;&lt;/a&gt;一、冒泡排序算法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import random,time
#m冒泡排序

def bubble_up1(array):
    &amp;apos;&amp;apos;&amp;apos;
    m冒泡排序算法
    :param array:
    :return: count: 6190862 time: 6.706383466720581
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for i in range(len(array)):
        for j in range(len(array) - 1 - i):
            if array[j] &amp;gt; array[j + 1]:
                temp = array[j + 1]
                array[j + 1] = array[j]
                array[j] = temp
                count += 1
    print(&amp;quot;count:&amp;quot;, count)
    print(&amp;quot;array:&amp;quot;, array)

def bubble_up2(array):
    &amp;apos;&amp;apos;&amp;apos;
    m冒泡排序算法
    :param array:
    :return:count: 5000 time: 3.825218915939331
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for i in range(len(array)):
        for j in range(len(array) - 1 - i):
            big_temp = j
            if array[big_temp] &amp;gt; array[j + 1]:
                big_temp = j + 1
        temp = array[big_temp]
        array[i] = array[big_temp]
        array[big_temp] = temp
        count += 1
    print(&amp;quot;count:&amp;quot;, count)
    print(&amp;quot;array:&amp;quot;, array)


if __name__ == &amp;apos;__main__&amp;apos;:
    array = []
    for i in range(5000):
        array.append(random.randrange(1000))

    time_start = time.time()
    bubble_up2(array)
    time_end = time.time()
    #
    print(array[0:100])
    print(&amp;quot;time:&amp;quot;,time_end - time_start)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、-选择排序&quot;&gt;&lt;a href=&quot;#二、-选择排序&quot; class=&quot;headerlink&quot; title=&quot;二、 选择排序&quot;&gt;&lt;/a&gt;二、 选择排序&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;def select1(array):
    &amp;apos;&amp;apos;&amp;apos;
    选择排序算法v1
    :param array:
    :return:count: 1996750 time: 3.2961885929107666
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for i in range(len(array)):
        for j in range(i,len(array)):
            if array[i] &amp;gt; array[j]:
                temp = array[j]
                array[j] = array[i]
                array[i] = temp
                count += 1
    print(&amp;quot;count:&amp;quot;,count)
    print(&amp;quot;array:&amp;quot;,array)

def select2(array):
    &amp;apos;&amp;apos;&amp;apos;
    选择排序算法v2
    :param array:
    :return:count: 5000 time: 2.4801418781280518
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for i in range(len(array)):
        smallest_index = i
        for j in range(i,len(array)):
            if array[smallest_index] &amp;gt; array[j]:
                smallest_index = j
        temp = array[smallest_index]
        array[smallest_index] = array[i]
        array[i] = temp
        count += 1
    print(&amp;quot;count:&amp;quot;,count)
    print(&amp;quot;array:&amp;quot;,array)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、直接插入排序算法&quot;&gt;&lt;a href=&quot;#三、直接插入排序算法&quot; class=&quot;headerlink&quot; title=&quot;三、直接插入排序算法&quot;&gt;&lt;/a&gt;三、直接插入排序算法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;def insert1(array):
    &amp;apos;&amp;apos;&amp;apos;
    插入排序算法
    :param array:
    :return: count: 4999 time: 3.685210704803467
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for index in range(1, len(array)):
        current_val = array[index]  # 先记下来每次大循环走到的第几个元素的值
        position = index

        while position &amp;gt; 0 and array[
                    position - 1] &amp;gt; current_val:  # 当前元素的左边的紧靠的元素比它大,要把左边的元素一个一个的往右移一位,给当前这个值插入到左边挪一个位置出来
            array[position] = array[position - 1]  # 把左边的一个元素往右移一位
            position -= 1  # 只一次左移只能把当前元素一个位置 ,还得继续左移只到此元素放到排序好的列表的适当位置 为止

        array[position] = current_val  # 已经找到了左边排序好的列表里不小于current_val的元素的位置,把current_val放在这里
        count += 1
    print(&amp;quot;count:&amp;quot;, count)
    print(array)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、快速排序&quot;&gt;&lt;a href=&quot;#四、快速排序&quot; class=&quot;headerlink&quot; title=&quot;四、快速排序&quot;&gt;&lt;/a&gt;四、快速排序&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;def quick_sort(array,start,end):
    &amp;apos;&amp;apos;&amp;apos;
    快速排序算法
    :param array:
    :param start:
    :param end:
    :return:time: 0.03600192070007324
    &amp;apos;&amp;apos;&amp;apos;
    if start &amp;gt;= end:
        return
    k = array[start]
    left_flag = start
    right_flag = end
    while left_flag &amp;lt; right_flag:
        while array[right_flag] &amp;gt; k:
            right_flag -= 1
        temp = array[right_flag]
        array[left_flag] = array[right_flag]
        array[right_flag] = temp

        while array[left_flag] &amp;lt;= k:
            left_flag += 1
        temp = array[left_flag]
        array[left_flag] = array[right_flag]
        array[right_flag] = temp

    quick_sort(array,start,left_flag - 1)
    quick_sort(array,left_flag + 1,end)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5474411.html&quot; title=&quot;常用算法设计&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day16</title>
    <link href="http://blog.songqingbo.cn/2016/05/07/s12-20160507-day16/"/>
    <id>http://blog.songqingbo.cn/2016/05/07/s12-20160507-day16/</id>
    <published>2016-05-07T07:30:00.000Z</published>
    <updated>2016-07-07T01:55:09.382Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5457672.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5457672.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Django起步&quot;&gt;&lt;a href=&quot;#一、Django起步&quot; class=&quot;headerlink&quot; title=&quot;一、Django起步&quot;&gt;&lt;/a&gt;一、Django起步&lt;/h2&gt;&lt;h3 id=&quot;1-创建Django项目&quot;&gt;&lt;a href=&quot;#1-创建Django项目&quot; class=&quot;headerlink&quot; title=&quot;1.创建Django项目&quot;&gt;&lt;/a&gt;1.创建Django项目&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;两种方式：使用pycharm工具进行创建
         使用manage命令进行创建
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/UKdz7aG.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-url设计&quot;&gt;&lt;a href=&quot;#2-url设计&quot; class=&quot;headerlink&quot; title=&quot;2.url设计&quot;&gt;&lt;/a&gt;2.url设计&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2y2zgI4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-views视图设计&quot;&gt;&lt;a href=&quot;#3-views视图设计&quot; class=&quot;headerlink&quot; title=&quot;3.views视图设计&quot;&gt;&lt;/a&gt;3.views视图设计&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/M1xkgkw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/UsZ5fay.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-Template版本设计&quot;&gt;&lt;a href=&quot;#4-Template版本设计&quot; class=&quot;headerlink&quot; title=&quot;4.Template版本设计&quot;&gt;&lt;/a&gt;4.Template版本设计&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LLavnYW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、Template模板渲染&quot;&gt;&lt;a href=&quot;#二、Template模板渲染&quot; class=&quot;headerlink&quot; title=&quot;二、Template模板渲染&quot;&gt;&lt;/a&gt;二、Template模板渲染&lt;/h2&gt;&lt;h3 id=&quot;1-调用后端传递的数据&quot;&gt;&lt;a href=&quot;#1-调用后端传递的数据&quot; class=&quot;headerlink&quot; title=&quot;1.调用后端传递的数据&quot;&gt;&lt;/a&gt;1.调用后端传递的数据&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;h3&amp;gt;username:&amp;#123;&amp;#123;user_obj.username&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;h3&amp;gt;E-mail:&amp;#123;&amp;#123;user_obj.email&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-使用for循环进行遍历数据&quot;&gt;&lt;a href=&quot;#2-使用for循环进行遍历数据&quot; class=&quot;headerlink&quot; title=&quot;2.使用for循环进行遍历数据&quot;&gt;&lt;/a&gt;2.使用for循环进行遍历数据&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;url&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% for user_info in user_obj %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% endfor %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/url&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-使用if进行相关条件判断&quot;&gt;&lt;a href=&quot;#3-使用if进行相关条件判断&quot; class=&quot;headerlink&quot; title=&quot;3.使用if进行相关条件判断&quot;&gt;&lt;/a&gt;3.使用if进行相关条件判断&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;url&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;% for user_info in user_obj %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;#  &amp;#123;% if user_info.username == &amp;quot;swht&amp;quot; %&amp;#125;#&amp;#125; &amp;lt;!--可以直接判断某个字符串，然后进行处理--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&amp;#123;% if forloop.counter0|divisibleby:&amp;quot;2&amp;quot; %&amp;#125; &amp;lt;!--使用forloop。counter参数获取遍历的当前数字。counter0是从0开始的索引值，divisibleby:&amp;quot;2&amp;quot;是指能够被2整除--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        	&amp;lt;li style=&amp;quot;background-color: aqua&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;% else %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;% endif %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   	&amp;#123;% endfor %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/url&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-模板的继承与复用&quot;&gt;&lt;a href=&quot;#4-模板的继承与复用&quot; class=&quot;headerlink&quot; title=&quot;4.模板的继承与复用&quot;&gt;&lt;/a&gt;4.模板的继承与复用&lt;/h3&gt;&lt;p&gt;使用主页的头部进行继承，然后将主体进行重写&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;index.html
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% block header-menu %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;ul &amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li style=&amp;quot;display: inline-block&amp;quot;&amp;gt;Home&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li style=&amp;quot;display: inline-block&amp;quot;&amp;gt;page1&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li style=&amp;quot;display: inline-block&amp;quot;&amp;gt;page2&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li style=&amp;quot;display: inline-block&amp;quot;&amp;gt;page3&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% endblock %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% block content-container %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;h2&amp;gt;这是文章的首页&amp;lt;/h2&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!--&amp;lt;h3&amp;gt;username:&amp;#123;&amp;#123;user_obj.username&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!--&amp;lt;h3&amp;gt;E-mail:&amp;#123;&amp;#123;user_obj.email&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;url&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;% for user_info in user_obj %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;#            &amp;#123;% if user_info.username == &amp;quot;swht&amp;quot; %&amp;#125;#&amp;#125; &amp;lt;!--可以直接判断某个字符串，然后进行处理--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;% if forloop.counter0|divisibleby:&amp;quot;2&amp;quot; %&amp;#125; &amp;lt;!--使用forloop。counter参数获取遍历的当前数字。counter0是从0开始的索引值，divisibleby:&amp;quot;2&amp;quot;是指能够被2整除--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;li style=&amp;quot;background-color: aqua&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;% else %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;% endif %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;% endfor %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/url&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% endblock %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;year.html
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% extends &amp;apos;article/index.html&amp;apos; %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% block content-container %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;h1&amp;gt;这是&amp;#123;&amp;#123; year_obj.year &amp;#125;&amp;#125;年的文章&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblock %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% extends &amp;apos;article/index.html&amp;apos; %&amp;#125; 语法是继承主页的所有属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% block content-container %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblock%&amp;#125;  语法说明该语块是可以被重写的&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;模板的继承和重写支持：子继承父、孙继承子&lt;/p&gt;
&lt;h2 id=&quot;三、配置文件&quot;&gt;&lt;a href=&quot;#三、配置文件&quot; class=&quot;headerlink&quot; title=&quot;三、配置文件&quot;&gt;&lt;/a&gt;三、配置文件&lt;/h2&gt;&lt;h3 id=&quot;1-setting文件说明&quot;&gt;&lt;a href=&quot;#1-setting文件说明&quot; class=&quot;headerlink&quot; title=&quot;1.setting文件说明&quot;&gt;&lt;/a&gt;1.setting文件说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  指定了当前项目文件的基础路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SECRET_KEY = &amp;apos;-i6p7t+w6@&amp;amp;duki)8s88tf=_ms%@z8fz4_5g@vhvzp@tij36w$&amp;apos; django通信KEY，我们一般不需要进行修改&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DEBUG = True  #选项为True时，属于开发环境，当遇到错误时会弹出默认的提示大黄页，当选项为False时，属于生产环境，需要下面的关键字进行配合设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ALLOWED_HOSTS = [] #当DEBUG = False时，ALLOWED_HOSTS = [*]，即允许所有主机访问，当访问的资源不存在时，默认会返回默认的404页面提示&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;INSTALLED_APPS=[] #这里需要配置我们安装的应用的名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TEMPLATES = [] #这里指定项目模板的路径，一般不需要修改，但也可以自定义路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DATABASES = &amp;#123;&amp;#125; #这里默认使用sqlite3数据库进行存储，我们可以修改成支持的其他数据库类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TIME_ZONE = &amp;apos;Asia/Shanghai&amp;apos; #这里的时区参数需要选择上海时区&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-设置mysql数据库配置&quot;&gt;&lt;a href=&quot;#2-设置mysql数据库配置&quot; class=&quot;headerlink&quot; title=&quot;2.设置mysql数据库配置&quot;&gt;&lt;/a&gt;2.设置mysql数据库配置&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DATABASES = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;default&amp;apos;:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;ENGINE&amp;apos;:&amp;apos;django.db.backends.mysql&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;NAME&amp;apos;:&amp;apos;blog&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;HOST&amp;apos;:&amp;apos;127.0.0.1&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;PORT&amp;apos;:&amp;apos;3306&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;USER&amp;apos;:&amp;apos;root&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;PASSWORD&amp;apos;:&amp;apos;&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Windows下面安装mysql环境：http://www.cnblogs.com/songqingbo/p/5080847.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;创建所需的数据库：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	create database blog charset utf8;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-mysql数据库初始化&quot;&gt;&lt;a href=&quot;#3-mysql数据库初始化&quot; class=&quot;headerlink&quot; title=&quot;3.mysql数据库初始化&quot;&gt;&lt;/a&gt;3.mysql数据库初始化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;models
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class Author(models.Model):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    first_name = models.CharField(max_length=32)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    last_name = models.CharField(max_length=32)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    email = models.EmailField()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def __unicode__(self):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return &amp;quot;&amp;lt;%s %s&amp;gt;&amp;quot; %(self.first_name,self.last_name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    class Meta:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        verbose_name_plural = u&amp;quot;作者&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    #def __str__()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Publisher(models.Model):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = models.CharField(max_length=64,unique=True)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    address = models.CharField(max_length=128,null=True,blank=True)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    city = models.CharField(max_length=64)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    state_province = models.CharField(max_length=30,help_text=&amp;quot;put your country code here..&amp;quot;,verbose_name=u&amp;quot;所属省&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    country = models.CharField(max_length=50,editable=False)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    website = models.URLField()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def __unicode__(self):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return &amp;quot;&amp;lt;%s&amp;gt;&amp;quot; %(self.name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Book(models.Model):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = models.CharField(max_length=128)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    authors = models.ManyToManyField(Author)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publisher = models.ForeignKey(Publisher)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    #publish_date = models.DateTimeField&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publish_date = models.DateField()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def __unicode__(self):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return &amp;quot;&amp;lt;%s&amp;gt;&amp;quot; %(self.name)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于django需要MySQLdb进行连接mysql数据库，需要安装MySQLdb模块和vc++ for python2.7环境包。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;python2 manage.py makemigrations  #生成数据库创建表文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Migrations for &amp;apos;article&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  0001_initial.py:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    - Create model Author&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    - Create model Book&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    - Create model Publisher&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    - Add field publisher to book&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;python2 manage.py migrate #将表结构写入数据库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Operations to perform:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Apply all migrations: admin, article, contenttypes, auth, sessions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Running migrations:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Rendering model states... DONE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying contenttypes.0001_initial... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0001_initial... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying admin.0001_initial... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying admin.0002_logentry_remove_auto_add... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying article.0001_initial... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying contenttypes.0002_remove_content_type_name... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0002_alter_permission_name_max_length... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0003_alter_user_email_max_length... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0004_alter_user_username_opts... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0005_alter_user_last_login_null... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0006_require_contenttypes_0002... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0007_alter_validators_add_error_messages... OK&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-创建后台用户&quot;&gt;&lt;a href=&quot;#4-创建后台用户&quot; class=&quot;headerlink&quot; title=&quot;4.创建后台用户&quot;&gt;&lt;/a&gt;4.创建后台用户&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;admin.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	#增加下面的语句作用是使用admin后台进行数据库的管理操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	import models&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	admin.site.register(models.Author)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	admin.site.register(models.Book)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	admin.site.register(models.Publisher)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;python2 manage.py createsuperuser #创建一个超级用户&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Foh6exY.png&quot; alt=&quot;Django后台增加数据&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、使用django命令对数据库进行基础操作&quot;&gt;&lt;a href=&quot;#四、使用django命令对数据库进行基础操作&quot; class=&quot;headerlink&quot; title=&quot;四、使用django命令对数据库进行基础操作&quot;&gt;&lt;/a&gt;四、使用django命令对数据库进行基础操作&lt;/h2&gt;&lt;h3 id=&quot;1-进入python-django-shell&quot;&gt;&lt;a href=&quot;#1-进入python-django-shell&quot; class=&quot;headerlink&quot; title=&quot;1. 进入python django shell&quot;&gt;&lt;/a&gt;1. 进入python django shell&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;shell&amp;gt;&amp;gt;python2 manage.py shell
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-查询数据&quot;&gt;&lt;a href=&quot;#2-查询数据&quot; class=&quot;headerlink&quot; title=&quot;2. 查询数据&quot;&gt;&lt;/a&gt;2. 查询数据&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt;from article.models import Publisher

\&amp;gt;&amp;gt;&amp;gt;publisher_list = Publisher.objects.all() #查询所有的出版社列表

\&amp;gt;&amp;gt;&amp;gt;publisher_list[1].name  #查询第2个出版社的名称

\&amp;gt;&amp;gt;&amp;gt;publisher_list[1].id  #查询第2个出版社的id
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-增加一条数据&quot;&gt;&lt;a href=&quot;#3-增加一条数据&quot; class=&quot;headerlink&quot; title=&quot;3. 增加一条数据&quot;&gt;&lt;/a&gt;3. 增加一条数据&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; p1 = Publisher.objects.create(name=&amp;apos;SWht&amp;apos;,address=&amp;apos;haidian&amp;apos;,city=&amp;apos;beijing&amp;apos;,state_province=&amp;apos;CA&amp;apos;,country=&amp;apos;CN&amp;apos;,website=&amp;apos;http://www.songqingbo.cn&amp;apos;)

\&amp;gt;&amp;gt;&amp;gt;p2 = Publisher(name=&amp;apos;SWht2&amp;apos;,address=&amp;apos;haidian1&amp;apos;,city=&amp;apos;beijing&amp;apos;,state_province=&amp;apos;CA&amp;apos;,country=&amp;apos;CN&amp;apos;,website=&amp;apos;http://www.songqingbo.cn&amp;apos;)

\&amp;gt;&amp;gt;&amp;gt;p2.save()  #增加数据两种方式，1.使用对象的objects的create方法进行数据的创建，2.使用对象的save方法进行数据的保存。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-数据库过滤查询&quot;&gt;&lt;a href=&quot;#4-数据库过滤查询&quot; class=&quot;headerlink&quot; title=&quot;4. 数据库过滤查询&quot;&gt;&lt;/a&gt;4. 数据库过滤查询&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; from article.models import Author

\&amp;gt;&amp;gt;&amp;gt; author_list = Author.objects.all()

\&amp;gt;&amp;gt;&amp;gt; author_list

[&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;, &amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;]

\&amp;gt;&amp;gt;&amp;gt; Author.objects.filter(first_name=&amp;apos;shen&amp;apos;)

[&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-获取单个对象&quot;&gt;&lt;a href=&quot;#5-获取单个对象&quot; class=&quot;headerlink&quot; title=&quot;5. 获取单个对象&quot;&gt;&lt;/a&gt;5. 获取单个对象&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; Author.objects.get(first_name=&amp;apos;shen&amp;apos;)

&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;

\&amp;gt;&amp;gt;&amp;gt; Author.objects.get(id=&amp;apos;1&amp;apos;)

&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;

\&amp;gt;&amp;gt;&amp;gt; Author.objects.get(id=&amp;apos;2&amp;apos;)

&amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;

注意：如果查询没有返回结果也会抛出异常
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-数据排序&quot;&gt;&lt;a href=&quot;#6-数据排序&quot; class=&quot;headerlink&quot; title=&quot;6. 数据排序&quot;&gt;&lt;/a&gt;6. 数据排序&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; Author.objects.order_by(&amp;quot;first_name&amp;quot;)

[&amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;, &amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;]

\&amp;gt;&amp;gt;&amp;gt; Author.objects.order_by(&amp;quot;id&amp;quot;)

[&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;, &amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;7-数据更新&quot;&gt;&lt;a href=&quot;#7-数据更新&quot; class=&quot;headerlink&quot; title=&quot;7. 数据更新&quot;&gt;&lt;/a&gt;7. 数据更新&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; author = Author.objects.get(last_name=&amp;apos;test&amp;apos;)

\&amp;gt;&amp;gt;&amp;gt; author.last_name = &amp;apos;diaoxia&amp;apos;

\&amp;gt;&amp;gt;&amp;gt; author.save()

\&amp;gt;&amp;gt;&amp;gt; Author.objects.all()

[&amp;lt;Author: &amp;lt;shen diaoxia&amp;gt;&amp;gt;, &amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;8-删除对象&quot;&gt;&lt;a href=&quot;#8-删除对象&quot; class=&quot;headerlink&quot; title=&quot;8. 删除对象&quot;&gt;&lt;/a&gt;8. 删除对象&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; author = Author.objects.get(first_name=&amp;apos;alix&amp;apos;)

\&amp;gt;&amp;gt;&amp;gt; author

&amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;

\&amp;gt;&amp;gt;&amp;gt; author.delete()

(2L, {u&amp;apos;article.Book_authors&amp;apos;: 1L, u&amp;apos;article.Author&amp;apos;: 1L})

\&amp;gt;&amp;gt;&amp;gt; Author.objects.all()

[&amp;lt;Author: &amp;lt;shen diaoxia&amp;gt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5457672.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ww
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day15</title>
    <link href="http://blog.songqingbo.cn/2016/04/30/s12-20160430-day15/"/>
    <id>http://blog.songqingbo.cn/2016/04/30/s12-20160430-day15/</id>
    <published>2016-04-30T07:30:00.000Z</published>
    <updated>2016-07-07T01:59:02.606Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/4491246.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/4491246.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/4508271.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/4508271.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、前端设计&quot;&gt;&lt;a href=&quot;#一、前端设计&quot; class=&quot;headerlink&quot; title=&quot;一、前端设计&quot;&gt;&lt;/a&gt;一、前端设计&lt;/h2&gt;&lt;h3 id=&quot;1-实现图片轮播&quot;&gt;&lt;a href=&quot;#1-实现图片轮播&quot; class=&quot;headerlink&quot; title=&quot;1.实现图片轮播&quot;&gt;&lt;/a&gt;1.实现图片轮播&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;js下载地址：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	http://bxslider.com/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;引入&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- jQuery library (served from Google) --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- bxSlider Javascript file --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&amp;quot;/js/jquery.bxslider.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- bxSlider CSS file --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;link href=&amp;quot;/lib/jquery.bxslider.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;加载图片：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;ul class=&amp;quot;bxslider&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;/images/pic1.jpg&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;/images/pic2.jpg&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;/images/pic3.jpg&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;/images/pic4.jpg&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用：	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	$(document).ready(function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  $(&amp;apos;.bxslider&amp;apos;).bxSlider();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-图标资源&quot;&gt;&lt;a href=&quot;#2-图标资源&quot; class=&quot;headerlink&quot; title=&quot;2.图标资源&quot;&gt;&lt;/a&gt;2.图标资源&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Font Awesome
   http://fontawesome.io/
   a、图片，自己找图片，挖洞
   b、现成的图标
       css
       使用样式
       --以前版本
           css
           图片库
           使用样式
       -- 现在
           css
           字体文件
           使用样式
   c、css
       字体文件
       样式
   =====》 大图片
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-伪类&quot;&gt;&lt;a href=&quot;#3-伪类&quot; class=&quot;headerlink&quot; title=&quot;3.伪类&quot;&gt;&lt;/a&gt;3.伪类&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;响应式&amp;lt;/title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;style&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        @media (min-width: 768px) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .lead &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                background-color: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .c1 &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            background-color: green;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .clearfix:after &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            content: &amp;quot;.&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            clear: both;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            visibility: hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/style&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dev class=&amp;quot;lead&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        我们都是中国人&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dev&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;c1 clearfix&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;div style=&amp;quot;float: right;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            你好&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;lt;div style=&amp;quot;float: right;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             china&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;lt;!--&amp;lt;div style=&amp;quot;clear: both&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二、web框架&quot;&gt;&lt;a href=&quot;#二、web框架&quot; class=&quot;headerlink&quot; title=&quot;二、web框架&quot;&gt;&lt;/a&gt;二、web框架&lt;/h2&gt;&lt;h3 id=&quot;1-python-web框架分类&quot;&gt;&lt;a href=&quot;#1-python-web框架分类&quot; class=&quot;headerlink&quot; title=&quot;1.python web框架分类&quot;&gt;&lt;/a&gt;1.python web框架分类&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
#coding:utf-8

import socket

def handle_request(client):
    buf = client.recv(1024)
    client.send(&amp;quot;HTTP/1.1 200 OK\r\n\r\n&amp;quot;)
    client.send(&amp;quot;Hello, Seven&amp;quot;)

def main():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((&amp;apos;localhost&amp;apos;,8000))
    sock.listen(5)

    while True:
        connection, address = sock.accept()
        handle_request(connection)
        connection.close()

if __name__ == &amp;apos;__main__&amp;apos;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-MVC-web框架&quot;&gt;&lt;a href=&quot;#2-MVC-web框架&quot; class=&quot;headerlink&quot; title=&quot;2.MVC web框架&quot;&gt;&lt;/a&gt;2.MVC web框架&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;MVC：Models  Views Controllers

        数据库操作 模板  处理请求的函数
代码块的归类结构

MTV：Models Templates Views

    数据库操作 模板  处理请求的函数
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-Django基础&quot;&gt;&lt;a href=&quot;#3-Django基础&quot; class=&quot;headerlink&quot; title=&quot;3.Django基础&quot;&gt;&lt;/a&gt;3.Django基础&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Django框架属于MTV框架。程序需要的操作的：
    1.models
    2.Templates
    3.Views
    4.urls
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、Django&quot;&gt;&lt;a href=&quot;#三、Django&quot; class=&quot;headerlink&quot; title=&quot;三、Django&quot;&gt;&lt;/a&gt;三、Django&lt;/h2&gt;&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;pip install django 1.9.5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-创建Django程序框架&quot;&gt;&lt;a href=&quot;#2-创建Django程序框架&quot; class=&quot;headerlink&quot; title=&quot;2.创建Django程序框架&quot;&gt;&lt;/a&gt;2.创建Django程序框架&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;使用命令创建
    django-admin startproject demo 创建projects
    cd demo
    python manage.py startapp app0 创建应用
使用pycharm进行创建项目和应用
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-执行程序&quot;&gt;&lt;a href=&quot;#3-执行程序&quot; class=&quot;headerlink&quot; title=&quot;3.执行程序&quot;&gt;&lt;/a&gt;3.执行程序&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;进入项目， python manage.py runserver 127.0.0.1：8000
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-创建数据表&quot;&gt;&lt;a href=&quot;#4-创建数据表&quot; class=&quot;headerlink&quot; title=&quot;4.创建数据表&quot;&gt;&lt;/a&gt;4.创建数据表&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;python manage.py makemigrations #生成配置文件
python manage.py migrate       #根据配置文件创建数据库相关 表
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-django默认后台管理&quot;&gt;&lt;a href=&quot;#5-django默认后台管理&quot; class=&quot;headerlink&quot; title=&quot;5.django默认后台管理&quot;&gt;&lt;/a&gt;5.django默认后台管理&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;创建超级用户名 python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-路由系统&quot;&gt;&lt;a href=&quot;#6-路由系统&quot; class=&quot;headerlink&quot; title=&quot;6.路由系统&quot;&gt;&lt;/a&gt;6.路由系统&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;静态路由
动态路由
    安照顺序，第n个匹配的数据交给函数的第n个参数，严格按照顺序
        url(r&amp;apos;^page/（\d+)/(\d+)&amp;apos;,views.page)
    模板的方法，将匹配的参数，传给指定的形式参数
        url(r&amp;apos;^page/(?P&amp;lt;n1&amp;gt;\d+)/(?P&amp;lt;n2&amp;gt;\d+)&amp;apos;,views.page)
二级路由
    app01
        urls.py
    project name 
        URL：app01 -&amp;gt;include（&amp;quot;app01.urls&amp;quot;）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QbaeTDM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-基本数据库操作&quot;&gt;&lt;a href=&quot;#7-基本数据库操作&quot; class=&quot;headerlink&quot; title=&quot;7.基本数据库操作&quot;&gt;&lt;/a&gt;7.基本数据库操作&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;ORM框架
    code first
        自己写类 --&amp;gt;数据库表
    db first
        自己写命令操作数据库--&amp;gt;更新类
    使用类进行数据操作

创建类
    from django.db import models
    class UserInfo(models.Model):
        username = models.CharField(max_length=32)
        password = models.CharField(max_length=32)
        age = models.IntegerField()

配置
    setting
        INSTALLED_APPS = [
            &amp;apos;django.contrib.admin&amp;apos;,
            &amp;apos;django.contrib.auth&amp;apos;,
            &amp;apos;django.contrib.contenttypes&amp;apos;,
            &amp;apos;django.contrib.sessions&amp;apos;,
            &amp;apos;django.contrib.messages&amp;apos;,
            &amp;apos;django.contrib.staticfiles&amp;apos;,
            &amp;apos;app01&amp;apos;,
        ]
使用命令根据类创建表
    python manage.py makemigrations #生成配置文件
    python manage.py migrate       #根据配置文件创建数据库相关 表
默认表名：
    appname_classname

d. 
    views中导入models

e.
    POST提交数据
        settings里操作：
            MIDDLEWARE_CLASSES = [
                &amp;apos;django.middleware.security.SecurityMiddleware&amp;apos;,
                &amp;apos;django.contrib.sessions.middleware.SessionMiddleware&amp;apos;,
                &amp;apos;django.middleware.common.CommonMiddleware&amp;apos;,
               # &amp;apos;django.middleware.csrf.CsrfViewMiddleware&amp;apos;,
                &amp;apos;django.contrib.auth.middleware.AuthenticationMiddleware&amp;apos;,
                &amp;apos;django.contrib.auth.middleware.SessionAuthenticationMiddleware&amp;apos;,
                &amp;apos;django.contrib.messages.middleware.MessageMiddleware&amp;apos;,
                &amp;apos;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;apos;,
            ]
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/4491246.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day14</title>
    <link href="http://blog.songqingbo.cn/2016/04/21/s12-20160421-day14/"/>
    <id>http://blog.songqingbo.cn/2016/04/21/s12-20160421-day14/</id>
    <published>2016-04-21T07:30:00.000Z</published>
    <updated>2016-07-05T10:30:05.747Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5369773.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5369773.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.php100.com/manual/jquery/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.php100.com/manual/jquery/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;JQuery&quot;&gt;&lt;a href=&quot;#JQuery&quot; class=&quot;headerlink&quot; title=&quot;JQuery&quot;&gt;&lt;/a&gt;JQuery&lt;/h2&gt;&lt;h3 id=&quot;1-查找&quot;&gt;&lt;a href=&quot;#1-查找&quot; class=&quot;headerlink&quot; title=&quot;1.查找&quot;&gt;&lt;/a&gt;1.查找&lt;/h3&gt;&lt;h4 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$(&amp;apos;#nid&amp;apos;)  根据id找到某个标签
$(&amp;apos;.nid&amp;apos;)  根据class查找
$(&amp;apos;.nid div #nid&amp;apos;)  根据class查找下面的div标签下面的id
$(&amp;apos;.nid,div,#nid&amp;apos;)  查找到class或div或id条件的查找到
$(&amp;apos;li:eq(0)&amp;apos;)  查到到第一个li标签行
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;筛选器&quot;&gt;&lt;a href=&quot;#筛选器&quot; class=&quot;headerlink&quot; title=&quot;筛选器&quot;&gt;&lt;/a&gt;筛选器&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$(&amp;apos;li&amp;apos;).eq(0)  查到到第一个li标签行
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-操作&quot;&gt;&lt;a href=&quot;#2-操作&quot; class=&quot;headerlink&quot; title=&quot;2.操作&quot;&gt;&lt;/a&gt;2.操作&lt;/h2&gt;&lt;p&gt;属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;添加指定属性，并删除兄弟的属性
 $(ths).addClass(&amp;apos;current&amp;apos;).siblings().removeClass(&amp;apos;current&amp;apos;);

attr：
    其他所有标签都适用，除checkbox、redio之外
prop：
    checkbox、redio

jQuery循环：

    var userList = [&amp;apos;swht&amp;apos;,&amp;apos;shen&amp;apos;,&amp;apos;test&amp;apos;];
    $.each(userList,fun(i,item){
        console.log(i,item);
    })    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h3&gt;&lt;p&gt;文档处理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;增加
append(content|fn)
    在指定的标签内部后面追加
appendTo(content)
    把指定的某个标签追加某个标签内部后面
prepend(content|fn)
    在指定的标签内部前面追加
prependTo(content)
    把指定的某个标签追加某个标签内部前面
包裹
wrap(html|ele|fn)
unwrap()
wrapAll(html|ele)
wrapInner(html|ele|fn)

删除
empty()
remove([expr])
detach([expr])
复制
clone([Even[,deepEven]])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;绑定事件：
    1. 直接绑定ready(fn) 文本加载完之后执行事件绑定
        1. $(document).ready(function(){

            })
        2. $(function(){

            })
    2. 委派delegate(s,[t],[d],fn)
        1. $(&amp;apos;ul&amp;apos;).delegate(&amp;apos;li&amp;apos;,&amp;apos;click&amp;apos;,function(){

           })

    3. bind(type,[data],fn)
        1. $(&amp;apos;li&amp;apos;).click(function(){

            })
        2. $(&amp;apos;li&amp;apos;).bind(&amp;apos;click&amp;apos;)
        3. unbind
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AJAX&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;异步的javascript和xml
ajax是对javascript和Dom的封装。
ajax容易出现跨域的问题。
$.ajax({
    url:&amp;quot;&amp;quot;,
    data:{},
    type:&amp;quot;&amp;quot;,
    dateType:&amp;quot;&amp;quot;,
    jsonp:&amp;quot;&amp;quot;,
    jsonpCallback:&amp;quot;&amp;quot;,
    sucess:function(){},
    error:function(){}
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JQuery扩展&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function(arg){
    arg.extend({
      qinghua: function() {
        return &amp;quot;SB&amp;quot;;
      },
      qinghua1: function() {
        return this.each(function() { this.checked = false; });
      }
    });

    arg.fn.extend({
       sanjiang:function(){
           return &amp;quot;DSB&amp;quot;
       }
    });
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他&lt;/p&gt;
&lt;p&gt;30款最好的 Bootstrap 3.0 免费主题和模板&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/lhb25/p/30-free-bootstrap-templates.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/lhb25/p/30-free-bootstrap-templates.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tab菜单

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;tab&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        .tab-box .box-menu{
            background-color: #DDDDDD;
            border: 1px solid #DDDDDD;
            height: 33px;
            line-height: 33px;
        }
        .box-menu a{
            border-right: 1px solid #664747;
            padding: 10px;
            background-color: #425a66;;
        }
        .tab-box .box-body{
            border: 1px solid #dddddd;
        }
        .hide{
            display: none;
        }
         .current{
            background-color: white;
            color: black;
            border-top: 2px solid red;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;tab-box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;box-menu&amp;quot;&amp;gt;
            &amp;lt;!--所有菜单--&amp;gt;
            &amp;lt;a menu1=&amp;quot;c1&amp;quot; onclick=&amp;quot;ChangeTab(this);&amp;quot; class=&amp;quot;current&amp;quot;&amp;gt;菜单一&amp;lt;/a&amp;gt;
            &amp;lt;a menu1=&amp;quot;c2&amp;quot; onclick=&amp;quot;ChangeTab(this);&amp;quot;&amp;gt;菜单二&amp;lt;/a&amp;gt;
            &amp;lt;a menu1=&amp;quot;c3&amp;quot; onclick=&amp;quot;ChangeTab(this);&amp;quot;&amp;gt;菜单三&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;box-body&amp;quot;&amp;gt;
            &amp;lt;!--所有内容--&amp;gt;
            &amp;lt;div id=&amp;quot;c1&amp;quot;&amp;gt;内容一&amp;lt;/div&amp;gt;
            &amp;lt;div id=&amp;quot;c2&amp;quot; class=&amp;quot;hide&amp;quot;&amp;gt;内容二&amp;lt;/div&amp;gt;
            &amp;lt;div id=&amp;quot;c3&amp;quot; class=&amp;quot;hide&amp;quot;&amp;gt;内容三&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;jquery-2.2.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        function ChangeTab(ths){
            $(ths).addClass(&amp;apos;current&amp;apos;).siblings().removeClass(&amp;apos;current&amp;apos;);
            var contentId = $(ths).attr(&amp;apos;menu1&amp;apos;);
            var temp = &amp;quot;#&amp;quot; + contentId;
            $(temp).removeClass(&amp;apos;hide&amp;apos;).siblings().addClass(&amp;apos;hide&amp;apos;);

        }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;


全选、反选、取消

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;全选、反选、取消&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;全选&amp;quot; onclick=&amp;quot;selectAll();&amp;quot; /&amp;gt;
        &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;反选&amp;quot; onclick=&amp;quot;selectInvert();&amp;quot; /&amp;gt;
        &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;取消&amp;quot; onclick=&amp;quot;clearAll();&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;table border=&amp;quot;1&amp;quot;&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;input type=&amp;quot;checkbox&amp;quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一章
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一篇
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;input type=&amp;quot;checkbox&amp;quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第二章
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一篇
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;input type=&amp;quot;checkbox&amp;quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                   第三章
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一篇
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;input type=&amp;quot;checkbox&amp;quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                   第四章
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一篇
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/table&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script src=&amp;quot;jquery-2.2.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        function selectAll(){
            $(&amp;quot;table input[type=&amp;apos;checkbox&amp;apos;]&amp;quot;).prop(&amp;apos;checked&amp;apos;,true);
        }
        function selectInvert(){
            $(&amp;quot;table input[type=&amp;apos;checkbox&amp;apos;]&amp;quot;).each(function(){
               var isChecked = $(this).prop(&amp;apos;checked&amp;apos;);
                if(isChecked){
                    $(this).prop(&amp;apos;checked&amp;apos;,false);
                }else{
                    $(this).prop(&amp;apos;checked&amp;apos;,true);
                }
            });
        }
        function clearAll(){
            $(&amp;quot;table input[type=&amp;apos;checkbox&amp;apos;]&amp;quot;).prop(&amp;apos;checked&amp;apos;,false);
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;


ajax_jsonp

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;ajax_jsonp&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;获取电视节目&amp;quot; onclick=&amp;quot;Ajax_jsonp();&amp;quot;/&amp;gt;
    &amp;lt;dev id=&amp;quot;contaner&amp;quot;&amp;gt;

    &amp;lt;/dev&amp;gt;
    &amp;lt;script src=&amp;quot;jquery-2.2.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        function Ajax_jsonp(){
            $.ajax({
                url:&amp;quot;http://www.jxntv.cn/data/jmd-jxtv2.html&amp;quot;,
                data:{},
                type:&amp;quot;GET&amp;quot;,
                dataType:&amp;quot;jsonp&amp;quot;,
                jsonp:&amp;quot;callback&amp;quot;,
                jsonpCallback:&amp;quot;list&amp;quot;,
                success:function(arg){
                    console.log(arg);
                    var jsonArray = arg.data;
                    $.each(jsonArray,function(k,v){
                        var week = v.week;
                        var label = &amp;quot;&amp;lt;h1&amp;gt;&amp;quot; + week + &amp;quot;&amp;lt;/h1&amp;gt;&amp;quot;;
                        $(&amp;quot;#contaner&amp;quot;).append(label);
                        var listArray = v.list;
                        $.each(listArray,function(kk,vv){
                            var link = vv.link;
                            var name = vv.name;
                            var time = vv.time;
                            var labelNew = &amp;quot;&amp;lt;a href=&amp;apos;&amp;quot; + link + &amp;quot;&amp;apos;&amp;gt;&amp;quot; + time+name + &amp;quot;&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;quot;;
                            $(&amp;quot;#contaner&amp;quot;).append(labelNew);
                        })
                    })
                },
                error:function(arg){
                    console.log(arg);
                }
            })
        }
    &amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5369773.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day13</title>
    <link href="http://blog.songqingbo.cn/2016/04/09/s12-20160409-day13/"/>
    <id>http://blog.songqingbo.cn/2016/04/09/s12-20160409-day13/</id>
    <published>2016-04-09T07:30:00.000Z</published>
    <updated>2016-07-07T03:02:36.049Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day13&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5369773.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5369773.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;js    
    使页面动起来的一门语言，解释器就是浏览器的引擎
dom
    提供一套api
jQuery
    封装的JS和dom的类库
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、javaScript&quot;&gt;&lt;a href=&quot;#二、javaScript&quot; class=&quot;headerlink&quot; title=&quot;二、javaScript&quot;&gt;&lt;/a&gt;二、javaScript&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 存在形式：
    文件
    标签
2. 放置位置：
    原则上可以存在head 和body，但是当页面请求不到js的时候就会一直在等待。建议将js代码放在body底部
3. 声明变量：
    name = &amp;quot;swht&amp;quot;;  //全局变量
    age = 18;   //局部变量    

4. 注释：
    当行注释：  //
    多行注释：    /*  ..  */
    每行代码结束需要加分号(;)
5. 类型：
    数字                
    字符串
    数组（字典）
6. 类型转换：
    var age = 18；
    var age = Number(18)；

    Number(&amp;quot;123&amp;quot;);
    parseInt(&amp;apos;123&amp;apos;);  //将字符串转换成数字类型
    var num = 18.9;
    num1 = parseInt(num); //将数字类型转换成整型数字输出
    num2 = parseFloat(num); //将数字类型转换成浮点型数字输出
    console.log(&amp;quot;num1:&amp;quot;,num1,typeof num1,&amp;quot;num2:&amp;quot;,num2,typeof num2); //控制台打印转换后的值和类型
    //输出结果：num1: 18 number num2: 18.9 number
7. 控制台打印：
    var age = &amp;quot;18&amp;quot;; 
    var n1 = 1,n2 = 3,n3 = 4; //单行可以声明多个变量并赋值
    console.log(age,typeof age); //控制台输出变量的值和类型
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;字符串操作&quot;&gt;&lt;a href=&quot;#字符串操作&quot; class=&quot;headerlink&quot; title=&quot;字符串操作&quot;&gt;&lt;/a&gt;字符串操作&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1. 去除字符串左右空格：        
    var name = &amp;quot;swht   &amp;quot;;
    name.trim();    
2. 按索引取值：
    var name = &amp;quot;swht&amp;quot;;
    name.charAt(1);
3. search:
    name.search(&amp;quot;w&amp;quot;);  //返回字符所在的索引值
4. split：
    name.split(&amp;quot;&amp;quot;);  //将字符串转换成数组
    [&amp;quot;s&amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot; &amp;quot;, &amp;quot; &amp;quot;, &amp;quot; &amp;quot;]
5. xx
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var li1 = [11,22,33,44];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for (var index in li1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for (var i = 0;i &amp;lt; li1.length;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(i,li1[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var dict = &amp;#123;&amp;quot;name&amp;quot;:&amp;quot;swht&amp;quot;,&amp;quot;age&amp;quot;:18,&amp;quot;work&amp;quot;:&amp;quot;运维&amp;quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for (var item in dict)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(item,dict[item]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;while循环&quot;&gt;&lt;a href=&quot;#while循环&quot; class=&quot;headerlink&quot; title=&quot;while循环&quot;&gt;&lt;/a&gt;while循环&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;while(true){
    countine;
    break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var name = &amp;apos;1&amp;apos;;
switch (name){
    case &amp;quot;1&amp;quot;:
        console.log(1);
        break;
    case &amp;quot;2&amp;quot;:
        console.log(2);
        break;
    case &amp;quot;3&amp;quot;:
        console.log(3);
        break;
    default:
        console.log(&amp;apos;default&amp;apos;);
        break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;if条件句&quot;&gt;&lt;a href=&quot;#if条件句&quot; class=&quot;headerlink&quot; title=&quot;if条件句&quot;&gt;&lt;/a&gt;if条件句&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var name = &amp;quot;swht&amp;quot;;
if (name == &amp;quot;alex&amp;quot;){
    console.log(err);
}else if (name == &amp;quot;hh&amp;quot;){
    console.log(true);
}else {
    console.log(&amp;quot;你逗呢！&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;try&quot;&gt;&lt;a href=&quot;#try&quot; class=&quot;headerlink&quot; title=&quot;try&quot;&gt;&lt;/a&gt;try&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var name = &amp;quot;swht&amp;quot;;
try {
    if (name == &amp;quot;shen&amp;quot;){
        console.log(&amp;quot;err&amp;quot;);
    }else {
        console.log(&amp;quot;false&amp;quot;);
    }
}catch (e){
    console.log(e);
}finally {
    console.log(&amp;quot;finally&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;//函数的声明
function func1(arg){
    return true;
}
//匿名函数
var func2 = function(arg){
    return true;
}
//自执行函数，一般用在jq封装类库时使用
(function(arg){
    console.log(arg);
})(&amp;apos;123&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;function Foo(name,age){
this.Name = name;
this.Age = age;
this.Func = function(arg){
    return this.Name +arg;
}
}
var obj = new Foo(&amp;apos;swht&amp;apos;,22)
console.log(obj.Name);
console.log(obj.Age);
var ret = obj.Func(&amp;apos;haha&amp;apos;);
console.log(ret);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、Dom&quot;&gt;&lt;a href=&quot;#三、Dom&quot; class=&quot;headerlink&quot; title=&quot;三、Dom&quot;&gt;&lt;/a&gt;三、Dom&lt;/h2&gt;&lt;p&gt;文档对象模型（Document Object Model，DOM）是一种用于HTML和XML文档的编程接口。它给文档提供了一种结构化的表示方法，可以改变文档的内容和呈现方式。我们最为关心的是，DOM把网页和脚本以及其他的编程语言联系了起来。DOM属于浏览器，而不是JavaScript语言规范里的规定的核心内容。&lt;/p&gt;
&lt;p&gt;注：一般说的JS让页面动起来泛指JavaScript和Dom&lt;/p&gt;
&lt;h3 id=&quot;1-选择器&quot;&gt;&lt;a href=&quot;#1-选择器&quot; class=&quot;headerlink&quot; title=&quot;1.选择器&quot;&gt;&lt;/a&gt;1.选择器&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;document.getElementById(&amp;apos;id&amp;apos;);
document.getElementsByName(&amp;apos;name&amp;apos;);
document.getElementsByTagName(&amp;apos;tagname&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-内容&quot;&gt;&lt;a href=&quot;#2-内容&quot; class=&quot;headerlink&quot; title=&quot;2.内容&quot;&gt;&lt;/a&gt;2.内容&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;innerText
innerHTML

var obj = document.getElementById(&amp;apos;nid&amp;apos;)
obj.innerText                       # 获取文本内容
obj.innerText = &amp;quot;hello&amp;quot;             # 设置文本内容
obj.innerHTML                       # 获取HTML内容
obj.innerHTML = &amp;quot;&amp;lt;h1&amp;gt;asd&amp;lt;/h1&amp;gt;&amp;quot;      # 设置HTML内容


特殊的：
    input系列
    textarea标签
    select标签

    value属性操作用户输入和选择的值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-创建标签&quot;&gt;&lt;a href=&quot;#3-创建标签&quot; class=&quot;headerlink&quot; title=&quot;3.创建标签&quot;&gt;&lt;/a&gt;3.创建标签&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;方式一：
    var obj = document.createElement(&amp;apos;a&amp;apos;);
    obj.href = &amp;quot;http://www.apicloud.com&amp;quot;;
    obj.innerText = &amp;quot;APICloud&amp;quot;;

    var container = document.getElementById(&amp;apos;container&amp;apos;);
    //container.appendChild(obj);
    //container.insertBefore(obj, container.firstChild);
    //container.insertBefore(obj, document.getElementById(&amp;apos;hhh&amp;apos;));

方式二：
    var container = document.getElementById(&amp;apos;container&amp;apos;);
    var obj = &amp;quot;&amp;lt;input  type=&amp;apos;text&amp;apos; /&amp;gt;&amp;quot;;
    container.innerHTML = obj;
    // &amp;apos;beforeBegin&amp;apos;, &amp;apos;afterBegin&amp;apos;, &amp;apos;beforeEnd&amp;apos;,  &amp;apos;afterEnd&amp;apos;
    //container.insertAdjacentHTML(&amp;quot;beforeEnd&amp;quot;,obj);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-标签属性&quot;&gt;&lt;a href=&quot;#4-标签属性&quot; class=&quot;headerlink&quot; title=&quot;4.标签属性&quot;&gt;&lt;/a&gt;4.标签属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var obj = document.getElementById(&amp;apos;container&amp;apos;);
固定属性
    obj.id
    obj.id = &amp;quot;nid&amp;quot;
    obj.className
    obj.style.fontSize = &amp;quot;88px&amp;quot;;

自定义属性
    obj.setAttribute(name,value)
    obj.getAttribute(name)
    obj.removeAttribute(name)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-提交表单&quot;&gt;&lt;a href=&quot;#5-提交表单&quot; class=&quot;headerlink&quot; title=&quot;5.提交表单&quot;&gt;&lt;/a&gt;5.提交表单&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;document.geElementById(&amp;apos;form&amp;apos;).submit()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-事件&quot;&gt;&lt;a href=&quot;#6-事件&quot; class=&quot;headerlink&quot; title=&quot;6.事件&quot;&gt;&lt;/a&gt;6.事件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/aP6MTMY.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-其他功能&quot;&gt;&lt;a href=&quot;#7-其他功能&quot; class=&quot;headerlink&quot; title=&quot;7.其他功能&quot;&gt;&lt;/a&gt;7.其他功能&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;console.log()
alert()
confirm()

// URL和刷新
location.href
location.href = &amp;quot;url&amp;quot;  window.location.reload()

// 定时器
setInterval(&amp;quot;alert()&amp;quot;,2000);   
clearInterval(obj)
setTimeout();   
clearTimeout(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;跑马灯

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;欢迎南非波波同志成为本届董事长&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;input type=&amp;quot;button&amp;quot; onclick=&amp;quot;DropInterval();&amp;quot; value=&amp;quot;停止滚动&amp;quot; /&amp;gt;
        &amp;lt;script&amp;gt;
            obj1 = setInterval(&amp;quot;GunDong()&amp;quot;,1000);
            console.log(obj1);
            function DropInterval(){
                   clearInterval(obj1);
            }
            function GunDong(){
                var text = document.title;
                var firstWord = text.charAt(0);
                var subWord = text.substring(1,text.length);
                var newWord = subWord + firstWord;
                document.title = newWord;
            }
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

搜索框

&amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;请输入关键字&amp;quot; id=&amp;quot;search&amp;quot; onfocus=&amp;quot;Focus();&amp;quot; onblur=&amp;quot;Blur();&amp;quot;/&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function Focus(){
        var nid = document.getElementById(&amp;quot;search&amp;quot;);
        var value = nid.placeholder;
        if (value == &amp;quot;请输入关键字&amp;quot;){
            nid.placeholder = &amp;quot;&amp;quot;;
        }
    }

    function Blur(){
        var nid = document.getElementById(&amp;quot;search&amp;quot;);
        var value = nid.placeholder;
        if (!value.trim()){
            nid.placeholder = &amp;quot;请输入关键字&amp;quot;;
        }
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、jQuery&quot;&gt;&lt;a href=&quot;#四、jQuery&quot; class=&quot;headerlink&quot; title=&quot;四、jQuery&quot;&gt;&lt;/a&gt;四、jQuery&lt;/h2&gt;&lt;h3 id=&quot;1-选择器：&quot;&gt;&lt;a href=&quot;#1-选择器：&quot; class=&quot;headerlink&quot; title=&quot;1.选择器：&quot;&gt;&lt;/a&gt;1.选择器：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#id
element
.class
*
selector1,selector2,selectorN
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fhuW9MD.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
           &amp;lt;div id=&amp;quot;n1&amp;quot;&amp;gt;11&amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;quot;c1&amp;quot;&amp;gt;22&amp;lt;/div&amp;gt;
            &amp;lt;div  class=&amp;quot;c1&amp;quot;&amp;gt;33&amp;lt;/div&amp;gt;
            &amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;span id=&amp;quot;n2&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;

            &amp;lt;div id=&amp;quot;n3&amp;quot;&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;div class=&amp;quot;c3&amp;quot;&amp;gt;
                        &amp;lt;span&amp;gt;
                            &amp;lt;a class=&amp;quot;c4&amp;quot;&amp;gt;asdf&amp;lt;/a&amp;gt;
                        &amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;span&amp;gt;asdf&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;

        &amp;lt;/div&amp;gt;

        &amp;lt;script src=&amp;quot;jquery-2.2.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script&amp;gt;
            /*
            选择器基础使用
             */
            $(&amp;quot;#n1&amp;quot;).text(&amp;quot;中国好声音&amp;quot;);
            $(&amp;quot;.c1&amp;quot;).text(&amp;quot;欢迎三江同学&amp;quot;);
            $(&amp;quot;.c4&amp;quot;).text(&amp;quot;一不小心挂掉了&amp;quot;);
            $(&amp;quot;#n3 span&amp;quot;).text(&amp;quot;游泳冠军&amp;quot;);

        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-筛选器&quot;&gt;&lt;a href=&quot;#2-筛选器&quot; class=&quot;headerlink&quot; title=&quot;2.筛选器&quot;&gt;&lt;/a&gt;2.筛选器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/x7Jqi96.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-属性、CSS&quot;&gt;&lt;a href=&quot;#3-属性、CSS&quot; class=&quot;headerlink&quot; title=&quot;3.属性、CSS&quot;&gt;&lt;/a&gt;3.属性、CSS&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/mPoLfMu.png&quot; alt=&quot;&quot;&gt;    &lt;/p&gt;
&lt;h3 id=&quot;4-文档处理&quot;&gt;&lt;a href=&quot;#4-文档处理&quot; class=&quot;headerlink&quot; title=&quot;4.文档处理&quot;&gt;&lt;/a&gt;4.文档处理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/8YcX0EW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-事件&quot;&gt;&lt;a href=&quot;#5-事件&quot; class=&quot;headerlink&quot; title=&quot;5.事件&quot;&gt;&lt;/a&gt;5.事件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/p53Uf3n.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jQuery API文档阅读&lt;/li&gt;
&lt;li&gt;博客实例阅读练习&lt;/li&gt;
&lt;li&gt;列表处理、登录方式&lt;/li&gt;
&lt;li&gt;主机管理列表可编辑&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day13&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5369773.html&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day10</title>
    <link href="http://blog.songqingbo.cn/2016/03/19/s12-20160319-day10/"/>
    <id>http://blog.songqingbo.cn/2016/03/19/s12-20160319-day10/</id>
    <published>2016-03-19T07:30:00.000Z</published>
    <updated>2016-07-07T02:55:01.160Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day09&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5248247.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5248247.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day10&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5286889.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5286889.html
&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、回顾&quot;&gt;&lt;a href=&quot;#一、回顾&quot; class=&quot;headerlink&quot; title=&quot;一、回顾&quot;&gt;&lt;/a&gt;一、回顾&lt;/h2&gt;&lt;h3 id=&quot;1-队列&quot;&gt;&lt;a href=&quot;#1-队列&quot; class=&quot;headerlink&quot; title=&quot;1.    队列&quot;&gt;&lt;/a&gt;1.    队列&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.    队列的作业就是实现多个线程之间数据安全的交互
2.    队列类型：先进先出、后进先出、优先级
3.    queue的数据必须按照顺序进行取出--&amp;gt;处理--&amp;gt;放回。主要作用就是不同进程之间数据的交换，manager可以进行多个进程之间的数据的共享，而且是数据安全的。
4.    生产者-消费者模型：实现程序的松耦合
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-gevent模块：对Greenlet模块的一次封装&quot;&gt;&lt;a href=&quot;#2-gevent模块：对Greenlet模块的一次封装&quot; class=&quot;headerlink&quot; title=&quot;2. gevent模块：对Greenlet模块的一次封装&quot;&gt;&lt;/a&gt;2. gevent模块：对Greenlet模块的一次封装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. gevent里面的socket本身可以实现IO阻塞变成非阻塞
2. monkey.path_all()可以帮助我们实现阻塞变成非阻塞
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-协程&quot;&gt;&lt;a href=&quot;#3-协程&quot; class=&quot;headerlink&quot; title=&quot;3. 协程&quot;&gt;&lt;/a&gt;3. 协程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. 实现单个线程里面的并发
2. 无需线程上下文切换的开销，无需原子操作锁定及同步的开销，方便切换控制流，高并发+高扩展性+低成本
3. 无法利用多核资源，但是可以实现单个进程下面起一个线程，然后一个线程下面实现多个协程并发
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-select&quot;&gt;&lt;a href=&quot;#4-select&quot; class=&quot;headerlink&quot; title=&quot;4. select&quot;&gt;&lt;/a&gt;4. select&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SpEkQHr.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. select 与poll的区别

    select有一个最大文件数的限制1024，文件扫描一个列表是非常低效的；poll没有这个限制
    内核态到用户态的数据copy；Epoll直接调用C语言进行内核态的数据nat到用户态

2.    select代码注释


    __auther__ = &amp;apos;Victor&amp;apos;

    import select
    import socket
    import sys
    import queue

    # 创建一个TCP/IP socket
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setblocking(False)
    # 绑定socket到指定端口
    server_address = (&amp;apos;localhost&amp;apos;, 10000)
    print(sys.stderr, &amp;apos;starting up on %s port %s&amp;apos; % server_address)
    server.bind(server_address)
    # 监听连接的地址
    server.listen(5)
    inputs = [server]
    # Socket的读操作
    outputs = []
    # socket的写操作
    message_queues = {}
    while inputs:
    # Wait for at least one of the sockets to be ready for processing
    print( &amp;apos;\nwaiting for the next event&amp;apos;)
    readable, writable, exceptional = select.select(inputs, outputs, inputs)
    # 监听句柄序列，如果某个发生变化，select的第一个rLest会拿到数据，output只要有数据wLest就能获取到，select的第三个参数inputs用来监测异常，并赋值给exceptional。
    # 监听inputs，outputs，inputs  如果他们的值有变化，就将分别赋值给readable，writable，exceptional。
    for s in readable:
    # 遍历readable的值。
    if s is server:
    connection, client_address = s.accept()
    # 如果s 是server，那么server socket将接收连接。
    print(&amp;apos;new connection from&amp;apos;, client_address)
    # 打印出连接客户端的地址。
    connection.setblocking(False)
    # 设置socket 为非阻塞模式。
    inputs.append(connection)
    # 因为有读操作发生，所以将此连接加入inputs
    message_queues[connection] = queue.Queue()
    # 为每个连接创建一个queue队列。使得每个连接接收到正确的数据。
    else:
    data = s.recv(1024)
    # 如果s不是server，说明客户端连接来了，那么就接受客户端的数据。
    if data:
    # 如果接收到客户端的数据
    print(sys.stderr, &amp;apos;received &amp;quot;%s&amp;quot; from %s&amp;apos; % (data, s.getpeername()) )
    message_queues[s].put(data)
    # 将收到的数据放入队列中
    if s not in outputs:
    outputs.append(s)
    # 将socket客户端的连接加入select的output中，并且用来返回给客户端数据。
    else:
    print(&amp;apos;closing&amp;apos;, client_address, &amp;apos;after reading no data&amp;apos;)
    # 如果没有收到客户端发来的空消息，则说明客户端已经断开连接。
    if s in outputs:
    outputs.remove(s)
    # 既然客户端都断开了，我就不用再给它返回数据了，所以这时候如果这个客户端的连接对象还在outputs列表中，就把它删掉
    inputs.remove(s)
    # inputs中也删除掉
    s.close()
    # 把这个连接关闭掉
    del message_queues[s]
    # 删除此客户端的消息队列

    for s in writable:
    # 遍历output的数据
    try:
    next_msg = message_queues[s].get_nowait()
    except queue.Empty:
    # 获取对应客户端消息队列中的数据，如果队列中的数据为空，从消息队列中移除此客户端连接。
    print(&amp;apos;output queue for&amp;apos;, s.getpeername(), &amp;apos;is empty&amp;apos;)
    outputs.remove(s)
    else:
    print( &amp;apos;sending &amp;quot;%s&amp;quot; to %s&amp;apos; % (next_msg, s.getpeername()))
    s.send(next_msg)
    # 如果消息队列有数据，则发送给客户端。
    for s in exceptional:
    # 处理 &amp;quot;exceptional conditions&amp;quot;
    print(&amp;apos;handling exceptional condition for&amp;apos;, s.getpeername() )
    inputs.remove(s)
    # 取消对出现异常的客户端的监听
    if s in outputs:
    outputs.remove(s)
    # 移除客户端的连接对象。
    s.close()
    # 关闭此socket连接
    del message_queues[s]
    # 删除此消息队列。

    &amp;apos;&amp;apos;&amp;apos;

    在select/poll时代，服务器进程每次都把这100万个连接告诉操作系统(从用户态复制句柄数据结构到内核态)，让操作系统内核去查询这些套接字上是否有事件发生，

    轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll一般只能处理几千的并发连接。

    epoll的设计和实现与select完全不同。epoll通过在Linux内核中申请一个简易的文件系统(文件系统一般用什么数据结构实现？B+树)。把原先的select/poll调用分成了3个部分：

    1）调用epoll_create()建立一个epoll对象(在epoll文件系统中为这个句柄对象分配资源)

    2）调用epoll_ctl向epoll对象中添加这100万个连接的套接字

    3）调用epoll_wait收集发生的事件的连接

    &amp;apos;&amp;apos;&amp;apos;


3.    epoll代码注释

    __auther__ = &amp;apos;Victor&amp;apos;


    #--------------这是一个epoll的例子--------------


    import socket, select
    # &amp;apos;windows&amp;apos;下不支持&amp;apos;epoll&amp;apos;

    EOL1 = b&amp;apos;\n\n&amp;apos;
    EOL2 = b&amp;apos;\n\r\n&amp;apos;
    response = b&amp;apos;HTTP/1.0 200 OK\r\nDate: Mon, 1 Jan 1996 01:01:01 GMT\r\n&amp;apos;
    response += b&amp;apos;Content-Type: text/plain\r\nContent-Length: 13\r\n\r\n&amp;apos;
    response += b&amp;apos;Hello, world!&amp;apos;

    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    serversocket.bind((&amp;apos;0.0.0.0&amp;apos;, 8080))
    serversocket.listen(1)
    # 建立socket连接。
    serversocket.setblocking(0)
    # 因为socket本身是阻塞的，setblocking（0）使得socket不阻塞

    epoll = select.epoll()
    # 创建一个eopll对象
    epoll.register(serversocket.fileno(), select.EPOLLIN)
    # 在服务器端socket上面注册对读event的关注，一个读event随时会触发服务器端socket去接收一个socket连接。

    try:
       connections = {}; requests = {}; responses = {}
    # 生成3个字典，connection字典是存储文件描述符映射到他们相应的网络连接对象
       while True:
          events = epoll.poll(1)
    # 查询epoll对象，看是否有任何关注的event被触发，参数‘1’表示，会等待一秒来看是否有event发生，如果有任何感兴趣的event发生在这次查询之前，这个查询就会带着这些event的列表立即返回
          for fileno, event in events:
            # event作为一个序列（fileno，event code）的元组返回，fileno是文件描述符的代名词，始终是一个整数。
             if fileno == serversocket.fileno():
                # 如果一个读event在服务器端socket发生，就会有一个新的socket连接可能被创建。
                connection, address = serversocket.accept()
                # 服务器端开始接收连接和客户端地址
                connection.setblocking(0)
                # 设置新的socket为非阻塞模式
                epoll.register(connection.fileno(), select.EPOLLIN)
                # 为新的socket注册对读（EPOLLIN）event的关注
                connections[connection.fileno()] = connection
                requests[connection.fileno()] = b&amp;apos;&amp;apos;
                responses[connection.fileno()] = response
             elif event &amp;amp; select.EPOLLIN:
                requests[fileno] += connections[fileno].recv(1024)
                # 如果发生一个读event，就读取从客户端发过来的数据。
                if EOL1 in requests[fileno] or EOL2 in requests[fileno]:
                   epoll.modify(fileno, select.EPOLLOUT)
                # 一旦完成请求已经收到，就注销对读event的关注，注册对写（EPOLLOUT）event的关注，写event发生的时候，会回复数据给客户端。
                   print(&amp;apos;-&amp;apos;*40 + &amp;apos;\n&amp;apos; + requests[fileno].decode()[:-2])
                # 打印完整的请求，证明虽然与客户端的通信是交错进行的，但是数据可以作为一个整体来组装和处理。
             elif event &amp;amp; select.EPOLLOUT:
                # 如果一个写event在一个客户端socket上面发生，他会接受新的数据以便发送到客户端。
                byteswritten = connections[fileno].send(responses[fileno])
                responses[fileno] = responses[fileno][byteswritten:]
                if len(responses[fileno]) == 0:
                    # 每次发送一部分响应数据，直到完整的响应数据都已经发送给操作系统等待传输给客户端。
                   epoll.modify(fileno, 0)
                # 一旦完整的响应数据发送完成，就不再关注读或者写event。
                   connections[fileno].shutdown(socket.SHUT_RDWR)
                # 如果一个连接显式关闭，那么socket shutdown是可选的，在这里这样使用，是为了让客户端首先关闭。
                # shutdown调用会通知客户端socket没有更多的数据应该被发送或者接收，并会让功能正常的客户端关闭自己的socket连接。
             elif event &amp;amp; select.EPOLLHUP:
                # HUP挂起event表明客户端socket已经断开（即关闭），所以服务器端也需要关闭，没有必要注册对HUP event的关注，在socket上面，他们总是会被epoll对象注册。
                epoll.unregister(fileno)
                # 注销对此socket连接的关注。
                connections[fileno].close()
                # 关闭socket连接。
                del connections[fileno]
    finally:
       epoll.unregister(serversocket.fileno())
    # 去掉已经注册的文件句柄
       epoll.close()
    # 关闭epoll对象
       serversocket.close()
    # 关闭服务器连接
    # 打开的socket连接不需要关闭，因为Python会在程序结束时关闭， 这里的显示关闭是个好的习惯。

    &amp;apos;&amp;apos;&amp;apos;

    首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。

        不管是文件，还是套接字，还是管道，我们都可以把他们看作流。

        之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，
        我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），
        这时候该怎么办？

    阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；
    那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。

    非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”

        很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。

        大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。

        为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），
        当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。

    假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。

    假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，
    这个事件姑且称之为“缓冲区非空”。

        但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，
        B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。

    假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”

        也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。

    这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。
    这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。

        然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，
        很不幸这两种方法效率都不高。

        于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：

    while true {
        for i in stream[]; {
            if i has data
                read until unavailable
        }
    }

        我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。
        这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。

        为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，
        可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流
        （于是我们可以把“忙”字去掉了）。代码长这样:

    while true {
        select(streams[])
        for i in streams[] {
            if i has data
                read until unavailable
        }
    }

        于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流
        （可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。

        但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次

    说了这么多，终于能好好解释epoll了

        epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。
        （复杂度降低到了O(1)）

        在讨论epoll的实现细节之前，先把epoll的相关操作列出：

          epoll_create 创建一个epoll对象，一般epollfd = epoll_create()

          epoll_ctl （epoll_add/epoll_del的合体），往epoll对象中增加/删除某一个流的某一个事件

    比如

    epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入

    epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入

    epoll_wait(epollfd,...)等待直到注册的事件发生

    （注：当对一个非阻塞流的读写发生缓冲区满或缓冲区空，write/read会返回-1，并设置errno=EAGAIN。而epoll只关心缓冲区非满和缓冲区非空事件）。

    一个epoll模式的代码大概的样子是：
    while true {
        active_stream[] = epoll_wait(epollfd)
        for i in active_stream[] {
            read or write till
        }
    }
    &amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、Twsited异步网络框架&quot;&gt;&lt;a href=&quot;#二、Twsited异步网络框架&quot; class=&quot;headerlink&quot; title=&quot;二、Twsited异步网络框架&quot;&gt;&lt;/a&gt;二、Twsited异步网络框架&lt;/h2&gt;&lt;h3 id=&quot;1-事件驱动&quot;&gt;&lt;a href=&quot;#1-事件驱动&quot; class=&quot;headerlink&quot; title=&quot;1.    事件驱动&quot;&gt;&lt;/a&gt;1.    事件驱动&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;将自定义的类和函数注册到事件列表中，事件驱动框架就会自行去列表中获取事件并执行。

第一，注册事件；第二，触发事件
![](http://i.imgur.com/6brDszu.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#event_drive.py

#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
&amp;apos;&amp;apos;&amp;apos;
模拟twsited异步网络框架的流程
&amp;apos;&amp;apos;&amp;apos;
#创建一个事件列表
event_list = []

#创建一个事件驱动动作
def run():
    for event in event_list:
        obj = event()
        obj.execute()

#创建事件定义规则，用户将自定义事件注册到事件列表中需要继承此类
class BaseHandler(object):
    &amp;quot;&amp;quot;&amp;quot;
    用户必须继承该类，从而规范所有类的方法（类似于接口的功能）
    &amp;quot;&amp;quot;&amp;quot;
    def execute(self):
        raise Exception(&amp;apos;you must overwrite execute&amp;apos;)


#event_run.py


#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import event_drive

#自定义事件，继承事件驱动自定义类
class MyHandler(event_drive.BaseHandler):

    #重写执行函数
    def execute(self):
        print(&amp;apos;event-drive execute MyHandler&amp;apos;)
class YourHandler(event_drive.BaseHandler):

    def execute(self):
        print(&amp;apos;event-drive ezecute YourHandler&amp;apos;)

event_drive.event_list.append(MyHandler) #将事件注册到事件列表中
event_drive.event_list.append(YourHandler)
event_drive.run()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-Twisted框架&quot;&gt;&lt;a href=&quot;#2-Twisted框架&quot; class=&quot;headerlink&quot; title=&quot;2.    Twisted框架&quot;&gt;&lt;/a&gt;2.    Twisted框架&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Echo_server

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    from twisted.internet import protocol
    from twisted.internet import reactor

    class Echo(protocol.Protocol):
        &amp;apos;&amp;apos;&amp;apos;
        定义一个类，处理客户端传递的数据
        &amp;apos;&amp;apos;&amp;apos;
        def dataReceived(self, data):
            &amp;apos;&amp;apos;&amp;apos;
            一旦接收到客户端传递的数据就要调用该方法
            :param data: 客户端传递过来的数据，python3版本传递的数据需要转换成bytes
            :return: 返回的数据是将客户端传递过来的数据返回给客户端
            &amp;apos;&amp;apos;&amp;apos;
            print(&amp;quot;Client said:&amp;quot;,data)
            self.transport.write(data)

    def main():
        &amp;apos;&amp;apos;&amp;apos;
        主函数，程序执行时直接从该函数调用事件类
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        factory = protocol.ServerFactory() #定义基础工厂类
        factory.protocol = Echo #相当于socketserver中的Handler方法，工厂协议直接引用自定义的Echo类

        reactor.listenTCP(5000,factory) #reactor自动重复去做一件事情。使用listenTCP监听端口
        reactor.run() #运行

    if __name__ == &amp;apos;__main__&amp;apos;:
        main()


Echo_client:

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    from twisted.internet import reactor, protocol


    # a client protocol

    class EchoClient(protocol.Protocol):
        &amp;apos;&amp;apos;&amp;apos;
        客户端Echo事件
        &amp;apos;&amp;apos;&amp;apos;
        def connectionMade(self):
            &amp;apos;&amp;apos;&amp;apos;
            连接建立执行该方法，客户端发送数据
            :return:
            &amp;apos;&amp;apos;&amp;apos;
            self.transport.write(b&amp;quot;hello alex!&amp;quot;)

        def dataReceived(self, data):
            &amp;apos;&amp;apos;&amp;apos;
            客户端接收服务端的数据
            :param data:
            :return:
            &amp;apos;&amp;apos;&amp;apos;
            print(&amp;quot;Server said:&amp;quot;, data)
            self.transport.loseConnection()
        def connectionLost(self, reason):
            &amp;apos;&amp;apos;&amp;apos;
            客户端接收完数据断开连接，主动执行该方法断开连接
            :param reason:
            :return:
            &amp;apos;&amp;apos;&amp;apos;
            print(&amp;quot;connection lost&amp;quot;)

    class EchoFactory(protocol.ClientFactory):
        &amp;apos;&amp;apos;&amp;apos;
        自定义工厂类，继承prorocol.ClientFactory类
        &amp;apos;&amp;apos;&amp;apos;
        protocol = EchoClient #hanld。自己重写了protocol类

        def clientConnectionFailed(self, connector, reason):
            print(&amp;quot;Connection failed - goodbye!&amp;quot;)
            reactor.stop()

        def clientConnectionLost(self, connector, reason):
            print(&amp;quot;Connection lost - goodbye!&amp;quot;)
            reactor.stop()


    # this connects the protocol to a server running on port 8000
    def main():
        f = EchoFactory()
        reactor.connectTCP(&amp;quot;localhost&amp;quot;, 5000, f)
        reactor.run()

    # this only runs if the module was *not* imported
    if __name__ == &amp;apos;__main__&amp;apos;:
        main()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-深入学习&quot;&gt;&lt;a href=&quot;#3-深入学习&quot; class=&quot;headerlink&quot; title=&quot;3.深入学习&quot;&gt;&lt;/a&gt;3.深入学习&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/hanhuili/article/details/9389433&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/hanhuili/article/details/9389433&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://krondo.com/an-introduction-to-asynchronous-programming-and-twisted/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://krondo.com/an-introduction-to-asynchronous-programming-and-twisted/&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&quot;三、非关系型数据库&quot;&gt;&lt;a href=&quot;#三、非关系型数据库&quot; class=&quot;headerlink&quot; title=&quot;三、非关系型数据库&quot;&gt;&lt;/a&gt;三、非关系型数据库&lt;/h3&gt;&lt;h3 id=&quot;1-Redis&quot;&gt;&lt;a href=&quot;#1-Redis&quot; class=&quot;headerlink&quot; title=&quot;1.    Redis&quot;&gt;&lt;/a&gt;1.    Redis&lt;/h3&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5132791.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5132791.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;数据（键值对）存储在内存中，一个独立的内存管理器，可以使多个程序共享数据    

默认是非持久化的，但是可以在配置文件中进行设置

1. redis基础使用

        cli&amp;gt;keys * #查看所有的键
        cli&amp;gt;set name swht ex 5 #设置一个键值对，其有效时间为5秒
        cli&amp;gt;get name #获取键值

2. redis连接

        import redis
        redis_cli = redis.Redis(&amp;quot;localhost&amp;quot;)
        print(redis_cli.get(&amp;apos;name&amp;apos;)) #b&amp;apos;swht&amp;apos;  get方法只能获取字符
3. redis连接池

        import redis
        pool = redis.ConnectionPool(host = &amp;apos;localhost&amp;apos;,port = 6379)
        redis_cli = redis.Redis(connection_pool=pool)
        redis_cli.set(&amp;apos;age&amp;apos;,56)
        print(redis_cli.get(&amp;apos;age&amp;apos;)) #b&amp;apos;56&amp;apos;
4. 操作

    set(name, value, ex=None, px=None, nx=False, xx=False)

        在Redis中设置值，默认，不存在则创建，存在则修改
        参数：
             ex，过期时间（秒）
             px，过期时间（毫秒）
             nx，如果设置为True，则只有name不存在时，当前set操作才执行
             xx，如果设置为True，则只有name存在时，岗前set操作才执行
    setnx(name, value)

        设置值，只有name不存在时，执行设置操作（添加）
    setex(name, value, time)

        # 设置值
        # 参数：
            # time，过期时间（数字秒 或 timedelta对象）
    psetex(name, time_ms, value)

        # 设置值
        # 参数：
            # time_ms，过期时间（数字毫秒 或 timedelta对象）
    mset(*args, **kwargs)

        批量设置值
        如：
            mset(k1=&amp;apos;v1&amp;apos;, k2=&amp;apos;v2&amp;apos;)
            或
            mget({&amp;apos;k1&amp;apos;: &amp;apos;v1&amp;apos;, &amp;apos;k2&amp;apos;: &amp;apos;v2&amp;apos;})
    get(name)

        获取值
    mget(keys, *args)

        批量获取
        如：
            mget(&amp;apos;ylr&amp;apos;, &amp;apos;wupeiqi&amp;apos;)
            或
            r.mget([&amp;apos;ylr&amp;apos;, &amp;apos;wupeiqi&amp;apos;])
    getset(name, value)

        设置新值并获取原来的值
    getrange(key, start, end)


        # 获取子序列（根据字节获取，非字符）
        # 参数：
            # name，Redis 的 name
            # start，起始位置（字节）
            # end，结束位置（字节）
        # 如： &amp;quot;武沛齐&amp;quot; ，0-3表示 &amp;quot;武&amp;quot;
    setrange(name, offset, value)

        # 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）
        # 参数：
            # offset，字符串的索引，字节（一个汉字三个字节）
            # value，要设置的值
    setbit(name, offset, value)    
        # 对name对应值的二进制表示的位进行操作

        # 参数：
            # name，redis的name
            # offset，位的索引（将值变换成二进制后再进行索引）
            # value，值只能是 1 或 0

        # 注：如果在Redis中有一个对应： n1 = &amp;quot;foo&amp;quot;，
                那么字符串foo的二进制表示为：01100110 01101111 01101111
            所以，如果执行 setbit(&amp;apos;n1&amp;apos;, 7, 1)，则就会将第7位设置为1，
                那么最终二进制则变成 01100111 01101111 01101111，即：&amp;quot;goo&amp;quot;

        # 扩展，转换二进制表示：

            # source = &amp;quot;武沛齐&amp;quot;
            source = &amp;quot;foo&amp;quot;

            for i in source:
                num = ord(i)
                print bin(num).replace(&amp;apos;b&amp;apos;,&amp;apos;&amp;apos;)

            特别的，如果source是汉字 &amp;quot;武沛齐&amp;quot;怎么办？
            答：对于utf-8，每一个汉字占 3 个字节，那么 &amp;quot;武沛齐&amp;quot; 则有 9个字节
               对于汉字，for循环时候会按照 字节 迭代，那么在迭代时，将每一个字节转换 十进制数，然后再将十进制数转换成二进制    
    假定统计UV，使用setbit可以进行相应UV数统计。

        #!/usr/local/env python3
        &amp;apos;&amp;apos;&amp;apos;
        Author:@南非波波
        Blog:http://www.cnblogs.com/songqingbo/
        E-mail:qingbo.song@gmail.com
        &amp;apos;&amp;apos;&amp;apos;
        import redis

        pool = redis.ConnectionPool(host = &amp;apos;localhost&amp;apos;,port = 6379)
        redis_cli = redis.Redis(connection_pool=pool)
        redis_cli.setbit(&amp;apos;ip&amp;apos;,5,1)
        redis_cli.setbit(&amp;apos;ip&amp;apos;,45,1)
        redis_cli.setbit(&amp;apos;ip&amp;apos;,15,1)
        redis_cli.setbit(&amp;apos;ip&amp;apos;,45,1)
        print(&amp;quot;uv_count:&amp;quot;,redis_cli.bitcount(&amp;apos;ip&amp;apos;))    
    getbit(name, offset)


        # 获取name对应的值的二进制表示中的某位的值 （0或1）
        bitcount(key, start=None, end=None)

        # 获取name对应的值的二进制表示中 1 的个数
        # 参数：
            # key，Redis的name
            # start，位起始位置
            # end，位结束位置
    bitop(operation, dest, *keys)

        # 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值

        # 参数：
            # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）
            # dest, 新的Redis的name
            # *keys,要查找的Redis的name

        # 如：
            bitop(&amp;quot;AND&amp;quot;, &amp;apos;new_name&amp;apos;, &amp;apos;n1&amp;apos;, &amp;apos;n2&amp;apos;, &amp;apos;n3&amp;apos;)
            # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中
    strlen(name)

        # 返回name对应值的字节长度（一个汉字3个字节）
    incr(self, name, amount=1)

        做pv统计比较有用
        # 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。

        # 参数：
            # name,Redis的name
            # amount,自增数（必须是整数）

        # 注：同incrby
    incrbyfloat(self, name, amount=1.0)

        # 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。

        # 参数：
            # name,Redis的name
            # amount,自增数（浮点型）
    decr(self, name, amount=1)

        # 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。

        # 参数：
            # name,Redis的name
            # amount,自减数（整数）
    append(key, value)

        # 在redis name对应的值后面追加内容

        # 参数：
            key, redis的name
            value, 要追加的字符串        

5. Hash操作

    hset(name, key, value)

        # name对应的hash中设置一个键值对（不存在，则创建；否则，修改）

        # 参数：
            # name，redis的name
            # key，name对应的hash中的key
            # value，name对应的hash中的value

        # 注：
            # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）
    hmset(name, mapping)

        # 在name对应的hash中批量设置键值对

        # 参数：
            # name，redis的name
            # mapping，字典，如：{&amp;apos;k1&amp;apos;:&amp;apos;v1&amp;apos;, &amp;apos;k2&amp;apos;: &amp;apos;v2&amp;apos;}

        # 如：
            # r.hmset(&amp;apos;xx&amp;apos;, {&amp;apos;k1&amp;apos;:&amp;apos;v1&amp;apos;, &amp;apos;k2&amp;apos;: &amp;apos;v2&amp;apos;})
    hget(name,key)

        # 在name对应的hash中获取根据key获取value
        hmget(name, keys, *args)

        # 在name对应的hash中获取多个key的值

        # 参数：
            # name，reids对应的name
            # keys，要获取key集合，如：[&amp;apos;k1&amp;apos;, &amp;apos;k2&amp;apos;, &amp;apos;k3&amp;apos;]
            # *args，要获取的key，如：k1,k2,k3

        # 如：
            # r.mget(&amp;apos;xx&amp;apos;, [&amp;apos;k1&amp;apos;, &amp;apos;k2&amp;apos;])
            # 或
            # print r.hmget(&amp;apos;xx&amp;apos;, &amp;apos;k1&amp;apos;, &amp;apos;k2&amp;apos;)
    hgetall(name)

        获取name对应hash的所有键值
    hlen(name)

        # 获取name对应的hash中键值对的个数
    hkeys(name)

        # 获取name对应的hash中所有的key的值
    hvals(name)

        # 获取name对应的hash中所有的value的值
    hexists(name, key)

        # 检查name对应的hash是否存在当前传入的key
    hdel(name,*keys)

        # 将name对应的hash中指定key的键值对删除
    hincrby(name, key, amount=1)

        # 自增name对应的hash中的指定key的值，不存在则创建key=amount
        # 参数：
            # name，redis中的name
            # key， hash对应的key
            # amount，自增数（整数）
    hincrbyfloat(name, key, amount=1.0)

        # 自增name对应的hash中的指定key的值，不存在则创建key=amount

        # 参数：
            # name，redis中的name
            # key， hash对应的key
            # amount，自增数（浮点数）

        # 自增name对应的hash中的指定key的值，不存在则创建key=amount
    hscan(name, cursor=0, match=None, count=None)

        # 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆

        # 参数：
            # name，redis的name
            # cursor，游标（基于游标分批取获取数据）
            # match，匹配指定key，默认None 表示所有的key
            # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数

        # 如：
            # 第一次：cursor1, data1 = r.hscan(&amp;apos;xx&amp;apos;, cursor=0, match=None, count=None)
            # 第二次：cursor2, data1 = r.hscan(&amp;apos;xx&amp;apos;, cursor=cursor1, match=None, count=None)
            # ...
            # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕
    hscan_iter(name, match=None, count=None)

        # 利用yield封装hscan创建生成器，实现分批去redis中获取数据

        # 参数：
            # match，匹配指定key，默认None 表示所有的key
            # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数

        # 如：
            # for item in r.hscan_iter(&amp;apos;xx&amp;apos;):
            #     print item
6. List操作

    lpush(name,values)

        # 在name对应的list中添加元素，每个新的元素都添加到列表的最左边

        # 如：
            # r.lpush(&amp;apos;oo&amp;apos;, 11,22,33)
            # 保存顺序为: 33,22,11

        # 扩展：
            # rpush(name, values) 表示从右向左操作
    lpushx(name,value)

        # 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边

        # 更多：
            # rpushx(name, value) 表示从右向左操作
    llen(name)

        # name对应的list元素的个数
    linsert(name, where, refvalue, value))

        # 在name对应的列表的某一个值前或后插入一个新值

        # 参数：
            # name，redis的name
            # where，BEFORE或AFTER
            # refvalue，标杆值，即：在它前后插入数据
            # value，要插入的数据
    r.lset(name, index, value)

        # 对name对应的list中的某一个索引位置重新赋值

        # 参数：
            # name，redis的name
            # index，list的索引位置
            # value，要设置的值
    r.lrem(name, value, num)

        # 在name对应的list中删除指定的值

        # 参数：
            # name，redis的name
            # value，要删除的值
            # num，  num=0，删除列表中所有的指定值；
                   # num=2,从前到后，删除2个；
                   # num=-2,从后向前，删除2个
    lpop(name)

        # 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素

        # 更多：
            # rpop(name) 表示从右向左操作
    lindex(name, index)

        在name对应的列表中根据索引获取列表元素
    lrange(name, start, end)

        # 在name对应的列表分片获取数据
        # 参数：
            # name，redis的name
            # start，索引的起始位置
            # end，索引结束位置
    ltrim(name, start, end)

        # 在name对应的列表中移除没有在start-end索引之间的值
        # 参数：
            # name，redis的name
            # start，索引的起始位置
            # end，索引结束位置
    rpoplpush(src, dst)

        # 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边
        # 参数：
            # src，要取数据的列表的name
            # dst，要添加数据的列表的name
    blpop(keys, timeout)

        # 将多个列表排列，按照从左到右去pop对应列表的元素

        # 参数：
            # keys，redis的name的集合
            # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞

        # 更多：
            # r.brpop(keys, timeout)，从右向左获取数据
    brpoplpush(src, dst, timeout=0)

        # 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧

        # 参数：
            # src，取出并要移除元素的列表对应的name
            # dst，要插入元素的列表对应的name
            # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞
    自定义增量迭代

        # 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：
            # 1、获取name对应的所有列表
            # 2、循环列表
        # 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：

        def list_iter(name):
            &amp;quot;&amp;quot;&amp;quot;
            自定义redis列表增量迭代
            :param name: redis中的name，即：迭代name对应的列表
            :return: yield 返回 列表元素
            &amp;quot;&amp;quot;&amp;quot;
            list_count = r.llen(name)
            for index in xrange(list_count):
                yield r.lindex(name, index)

        # 使用
        for item in list_iter(&amp;apos;pp&amp;apos;):
            print item
7. Set操作，Set集合就是不允许重复的列表

    sadd(name,values)

        # name对应的集合中添加元素
    scard(name)

        获取name对应的集合中元素个数
    sdiff(keys, *args)

        在第一个name对应的集合中且不在其他name对应的集合的元素集合
    sdiffstore(dest, keys, *args)

        # 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中
    sinter(keys, *args)

        # 获取多一个name对应集合的并集
    sinterstore(dest, keys, *args)

        # 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中
    sismember(name, value)

        # 检查value是否是name对应的集合的成员
    smembers(name)

        # 获取name对应的集合的所有成员
    smove(src, dst, value)

        # 将某个成员从一个集合中移动到另外一个集合
    spop(name)

        # 从集合的右侧（尾部）移除一个成员，并将其返回
    srandmember(name, numbers)

        # 从name对应的集合中随机获取 numbers 个元素
    srem(name, values)

        # 在name对应的集合中删除某些值
    sunion(keys, *args)

        # 获取多一个name对应的集合的并集
    sunionstore(dest,keys, *args)

        # 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中
    sscan(name, cursor=0, match=None, count=None)
    sscan_iter(name, match=None, count=None)

        # 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大


8. 有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。

    zadd(name, *args, **kwargs)

        # 在name对应的有序集合中添加元素
        # 如：
             # zadd(&amp;apos;zz&amp;apos;, &amp;apos;n1&amp;apos;, 1, &amp;apos;n2&amp;apos;, 2)
             # 或
             # zadd(&amp;apos;zz&amp;apos;, n1=11, n2=22)
    zcard(name)

        # 获取name对应的有序集合元素的数量
    zcount(name, min, max)

        # 获取name对应的有序集合中分数 在 [min,max] 之间的个数
    zincrby(name, value, amount)

        # 自增name对应的有序集合的 name 对应的分数
    r.zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)

        # 按照索引范围获取name对应的有序集合的元素

        # 参数：
            # name，redis的name
            # start，有序集合索引起始位置（非分数）
            # end，有序集合索引结束位置（非分数）
            # desc，排序规则，默认按照分数从小到大排序
            # withscores，是否获取元素的分数，默认只获取元素的值
            # score_cast_func，对分数进行数据转换的函数

        # 更多：
            # 从大到小排序
            # zrevrange(name, start, end, withscores=False, score_cast_func=float)

            # 按照分数范围获取name对应的有序集合的元素
            # zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)
            # 从大到小排序
            # zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)
    zrank(name, value)

        # 获取某个值在 name对应的有序集合中的排行（从 0 开始）

        # 更多：
            # zrevrank(name, value)，从大到小排序
    zrangebylex(name, min, max, start=None, num=None)

        # 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员
        # 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大

        # 参数：
            # name，redis的name
            # min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间
            # min，右区间（值）
            # start，对结果进行分片处理，索引位置
            # num，对结果进行分片处理，索引后面的num个元素

        # 如：
            # ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga
            # r.zrangebylex(&amp;apos;myzset&amp;apos;, &amp;quot;-&amp;quot;, &amp;quot;[ca&amp;quot;) 结果为：[&amp;apos;aa&amp;apos;, &amp;apos;ba&amp;apos;, &amp;apos;ca&amp;apos;]

        # 更多：
            # 从大到小排序
            # zrevrangebylex(name, max, min, start=None, num=None)
    zrem(name, values)

        # 删除name对应的有序集合中值是values的成员

        # 如：zrem(&amp;apos;zz&amp;apos;, [&amp;apos;s1&amp;apos;, &amp;apos;s2&amp;apos;])
    zremrangebyrank(name, min, max)

        # 根据排行范围删除
    zremrangebyscore(name, min, max)

        # 根据分数范围删除
    zremrangebylex(name, min, max)

        # 根据值返回删除
    zscore(name, value)

        # 获取name对应有序集合中 value 对应的分数
    zinterstore(dest, keys, aggregate=None)

        # 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作
        # aggregate的值为:  SUM  MIN  MAX
    zunionstore(dest, keys, aggregate=None)

        # 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作
        # aggregate的值为:  SUM  MIN  MAX
    zscan(name, cursor=0, match=None, count=None, score_cast_func=float)
    zscan_iter(name, match=None, count=None,score_cast_func=float)

        # 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作

　　9. redis的发布与订阅

基础类：

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import redis


    class RedisHelper:

        def __init__(self):
            self.__conn = redis.Redis(host=&amp;apos;localhost&amp;apos;,port=6379)
            self.chan_sub = &amp;apos;fm104.5&amp;apos;
            self.chan_pub = &amp;apos;fm104.5&amp;apos;

        def public(self, msg):
            self.__conn.publish(self.chan_pub, msg)
            return True

        def subscribe(self):
            pub = self.__conn.pubsub()
            pub.subscribe(self.chan_sub)
            pub.parse_response()
            return pub

redis_sub.py

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    from RedisHelper import RedisHelper

    obj = RedisHelper()
    redis_sub = obj.subscribe()

    while True:
        msg= redis_sub.parse_response()
        print(msg)

redis_pub.py

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    from RedisHelper import RedisHelper

    obj = RedisHelper()
    obj.public(&amp;apos;hello&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-memcached&quot;&gt;&lt;a href=&quot;#2-memcached&quot; class=&quot;headerlink&quot; title=&quot;2.    memcached&quot;&gt;&lt;/a&gt;2.    memcached&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;非持久化轻量级缓存，使用第三方工具可以实现数据的持久化存储
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-mongodb&quot;&gt;&lt;a href=&quot;#3-mongodb&quot; class=&quot;headerlink&quot; title=&quot;3.    mongodb&quot;&gt;&lt;/a&gt;3.    mongodb&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;天生的数据持久化，默认将数据持久化存储在本地磁盘。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、消息队列rabbitmq&quot;&gt;&lt;a href=&quot;#四、消息队列rabbitmq&quot; class=&quot;headerlink&quot; title=&quot;四、消息队列rabbitmq&quot;&gt;&lt;/a&gt;四、消息队列rabbitmq&lt;/h2&gt;&lt;p&gt;通信模式：&lt;/p&gt;
&lt;h3 id=&quot;1-简单生产者消费者模型&quot;&gt;&lt;a href=&quot;#1-简单生产者消费者模型&quot; class=&quot;headerlink&quot; title=&quot;1. 简单生产者消费者模型&quot;&gt;&lt;/a&gt;1. 简单生产者消费者模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;rabbit_send

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import pika
    #与消息队列建立一个连接
    connection = pika.BlockingConnection(pika.ConnectionParameters(
                   &amp;apos;localhost&amp;apos;))
    #创建一个管道
    channel = connection.channel()

    #在管道中声明一个名称为&amp;apos;name&amp;apos;的队列
    channel.queue_declare(queue=&amp;apos;name&amp;apos;)

    #一个消息不能直接发送给消息队列，需要通过一个路由器进行转发，这个路由器就是由exchange进行设置
    channel.basic_publish(exchange=&amp;apos;&amp;apos;, #路由器
                          routing_key=&amp;apos;name&amp;apos;, #队列名称
                          body=&amp;apos;swht&amp;apos;) #消息
    print(&amp;quot; [swht] Sent a message&amp;quot;)
    connection.close()

rabbit_recive

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import pika

    #与消息队列服务器建立连接
    connection = pika.BlockingConnection(pika.ConnectionParameters(
                   &amp;apos;localhost&amp;apos;))
    #创建一个管道
    channel = connection.channel()
    #消费者声明一个队列，为了防止生产者还没有启动没有完成创建队列时代码出错的问题。如果队列已存在，则忽略该操作，否则则创建队列
    channel.queue_declare(queue=&amp;apos;name&amp;apos;)

    def callback(ch, method, properties, body):
        print(&amp;quot; [x] Received %r&amp;quot; % body)

    channel.basic_consume(callback,
                          queue=&amp;apos;name&amp;apos;,
                          no_ack=True) #接收消息不进行确认

    print(&amp;apos; [*] Waiting for messages. To exit press CTRL+C&amp;apos;)
    channel.start_consuming()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-消息持久化&quot;&gt;&lt;a href=&quot;#2-消息持久化&quot; class=&quot;headerlink&quot; title=&quot;2. 消息持久化&quot;&gt;&lt;/a&gt;2. 消息持久化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    channel.queue_declare(queue=&amp;apos;name&amp;apos;,durable=True)
已经存在的队列是不能再进行持久化设置的，所以在只有创建队列的时候设置持久化选项
    basc_ack = (delivery_tag= method.delivry_tag)

查看当前所有的queue  XX
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-消息公平分发&quot;&gt;&lt;a href=&quot;#3-消息公平分发&quot; class=&quot;headerlink&quot; title=&quot;3. 消息公平分发&quot;&gt;&lt;/a&gt;3. 消息公平分发&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/qBwPkju.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;只在消费者添加
channel.basic_qos(prefetch_count=1)

示例代码：

rabbit_slb_send.py
    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import pika

    connection = pika.BlockingConnection(pika.ConnectionParameters(
                   &amp;apos;192.168.137.6&amp;apos;))
    channel = connection.channel()

    #声明queue
    channel.queue_declare(queue=&amp;apos;task_queue&amp;apos;)

    #n RabbitMQ a message can never be sent directly to the queue, it always needs to go through an exchange.
    import sys

    message = &amp;apos; &amp;apos;.join(sys.argv[1:]) or &amp;quot;Hello World!&amp;quot;
    channel.basic_publish(exchange=&amp;apos;&amp;apos;,
                          routing_key=&amp;apos;task_queue&amp;apos;,
                          body=message,
                          properties=pika.BasicProperties(
                          delivery_mode = 2, # make message persistent
                          ))
    print(&amp;quot; [x] Sent %r&amp;quot; % message)
    connection.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-exchange路由&quot;&gt;&lt;a href=&quot;#4-exchange路由&quot; class=&quot;headerlink&quot; title=&quot;4. exchange路由&quot;&gt;&lt;/a&gt;4. exchange路由&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MFX1LTo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;publisher.py

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import pika
    import sys

    connection = pika.BlockingConnection(pika.ConnectionParameters(
            host=&amp;apos;localhost&amp;apos;))
    channel = connection.channel()

    channel.exchange_declare(exchange=&amp;apos;logs&amp;apos;,
                             type=&amp;apos;fanout&amp;apos;)

    message = &amp;apos; &amp;apos;.join(sys.argv[1:]) or &amp;quot;info: Hello World!&amp;quot;
    channel.basic_publish(exchange=&amp;apos;logs&amp;apos;,
                          routing_key=&amp;apos;&amp;apos;,
                          body=message)
    print(&amp;quot; [x] Sent %r&amp;quot; % message)
    connection.close()

subscriber.py

    import pika

    connection = pika.BlockingConnection(pika.ConnectionParameters(
            host=&amp;apos;localhost&amp;apos;))
    channel = connection.channel()

    channel.exchange_declare(exchange=&amp;apos;logs&amp;apos;,
                             type=&amp;apos;fanout&amp;apos;)

    result = channel.queue_declare(exclusive=True) #不指定queue名字,rabbit会随机分配一个名字,exclusive=True会在使用此queue的消费者断开后,自动将queue删除
    queue_name = result.method.queue

    channel.queue_bind(exchange=&amp;apos;logs&amp;apos;,
                       queue=queue_name)

    print(&amp;apos; [*] Waiting for logs. To exit press CTRL+C&amp;apos;)

    def callback(ch, method, properties, body):
        print(&amp;quot; [x] %r&amp;quot; % body)

    channel.basic_consume(callback,
                          queue=queue_name,
                          no_ack=True)

    channel.start_consuming()
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day09&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5248247.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
</feed>
