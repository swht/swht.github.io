<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南非波波博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.songqingbo.cn/"/>
  <updated>2017-01-14T06:47:16.268Z</updated>
  <id>http://blog.songqingbo.cn/</id>
  
  <author>
    <name>南非波波</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017-01-14-Nodejs全栈开发之路-nodejs-http-post请求</title>
    <link href="http://blog.songqingbo.cn/2017/01/14/2017-01-14-Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-nodejs-http-post%E8%AF%B7%E6%B1%82/"/>
    <id>http://blog.songqingbo.cn/2017/01/14/2017-01-14-Nodejs全栈开发之路-nodejs-http-post请求/</id>
    <published>2017-01-14T03:50:50.000Z</published>
    <updated>2017-01-14T06:47:16.268Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/OHtEUi6.jpg&quot; alt=&quot;URl&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;serve.js&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var http = require(&amp;apos;http&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var fs = require(&amp;apos;fs&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http.createServer(function (request, response) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   if(request.url == &amp;apos;/&amp;apos;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       fs.createReadStream(&amp;apos;./login.html&amp;apos;).pipe(response);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;else if(request.url == &amp;apos;/login&amp;apos;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       var str = &amp;apos;&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       var buffers = [];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       request.on(&amp;apos;data&amp;apos;,function (data) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           buffers.push(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           console.log(str);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       request.on(&amp;apos;end&amp;apos;,function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           var result = Buffer.concat(buffers);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;           response.end(buffers.toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;else&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       response.end(&amp;apos;404&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;).listen(8000);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(&amp;apos;服务监听在8000端口&amp;apos;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;login.html&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;login&amp;lt;/title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;form action=&amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    用户名 &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    密码 &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;登录&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/form&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ajax&quot;&gt;&lt;a href=&quot;#ajax&quot; class=&quot;headerlink&quot; title=&quot;ajax&quot;&gt;&lt;/a&gt;ajax&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建ajax对象&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var XHR = new XMLHttpRequest();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开请求&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;XHR.open(method,url,async,user,password);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;method    http方法，例如：post、get、put等,大小写不敏感&lt;/li&gt;
&lt;li&gt;url       请求的url地址，可以为绝对地址也可以为相对地址&lt;/li&gt;
&lt;li&gt;async     布尔型，指定此请求是否为异步方式，默认为true。如果为真，当状态改变时会调用onreadystatechange属性指定的回调函数&lt;/li&gt;
&lt;li&gt;user      如果服务器需要验证，此处指定用户名，默认是undefined&lt;/li&gt;
&lt;li&gt;password  验证信息中的密码部分，默认是undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注册回调监听&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;readyState XMLHttpRequest对象的状态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0(为初始化)   对象已建立，但是尚未初始化(尚未调用open方法)&lt;/li&gt;
&lt;li&gt;1(初始化)     对象已建立，尚未调用send方法&lt;/li&gt;
&lt;li&gt;2(发送数据)   send方法已调用，但是当前的状态及http头未知&lt;/li&gt;
&lt;li&gt;3(数据传送中)  已接收部分数据，因为响应及http头不全，这时通过responseBody和responText获取部分数据会出现错误。&lt;/li&gt;
&lt;li&gt;4(完成)       数据接收完成，此时可以通过responseBody和responText获取完整的回应数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;http&quot;&gt;&lt;a href=&quot;#http&quot; class=&quot;headerlink&quot; title=&quot;http&quot;&gt;&lt;/a&gt;http&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/OHtEUi6.jpg&quot; 
    
    </summary>
    
    
      <category term="Nodejs全栈开发之路" scheme="http://blog.songqingbo.cn/tags/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2017-01-14-Nodejs全栈开发之路-nodejs模块fs(可读流和可写流)</title>
    <link href="http://blog.songqingbo.cn/2017/01/14/2017-01-14-Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-nodejs%E6%A8%A1%E5%9D%97fs(%E5%8F%AF%E8%AF%BB%E6%B5%81%E5%92%8C%E5%8F%AF%E5%86%99%E6%B5%81)/"/>
    <id>http://blog.songqingbo.cn/2017/01/14/2017-01-14-Nodejs全栈开发之路-nodejs模块fs(可读流和可写流)/</id>
    <published>2017-01-14T01:50:50.000Z</published>
    <updated>2017-01-14T03:49:46.555Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;fs模块&quot;&gt;&lt;a href=&quot;#fs模块&quot; class=&quot;headerlink&quot; title=&quot;fs模块&quot;&gt;&lt;/a&gt;fs模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可读流createReadStream&lt;/p&gt;
&lt;p&gt;  可读流触发的事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data  绑定一个data事件监听器会将流切换成流动模式，数据会被尽可能的读出&lt;/li&gt;
&lt;li&gt;end   该事件会在读完数据后触发&lt;/li&gt;
&lt;li&gt;&lt;p&gt;error 当数据接收时发生错误时触发&lt;/p&gt;
&lt;p&gt;可读流的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;setEncoding   指定编码&lt;/li&gt;
&lt;li&gt;pause         通知对象停止触发data事件&lt;/li&gt;
&lt;li&gt;resume        通知对象恢复触发事件&lt;/li&gt;
&lt;li&gt;pipe          设置管道，将可读流里的内容导入到参数指定的可写流里&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var fs = require(&amp;apos;fs&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var rs = fs.createReadStream(&amp;apos;./README.md&amp;apos;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    flags:&amp;apos;r&amp;apos;,//表示打开文件进行读操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // encoding:&amp;apos;utf8&amp;apos; //得到的数据是Buffer对象。指定编码输出&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //下面两个参数可以进行截取读取，取值范围str[i] :start&amp;lt;= i &amp;lt;= end&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    start:1, //读取文件内容的起始位置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    end:3   //读取文件内容的结束位置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rs.setEncoding(&amp;apos;utf8&amp;apos;);//或者可以在创建流之后进行指定编码类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//流是EnventEmitter的子类&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rs.on(&amp;apos;data&amp;apos;,function (data) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   console.log(data); //输出：&amp;lt;Buffer 23 32 30 31 36 31 32 6e 6f 64 65 0d 0a&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                     //输出:#201612node&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//当读完文件的时候会触发end事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rs.on(&amp;apos;end&amp;apos;,function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;读完了!&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//当读取文件出错的时候会监听到，输出相应的错误&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rs.on(&amp;apos;error&amp;apos;,function (err) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;出错了:&amp;apos;,err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var fs = require(&amp;apos;fs&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var rs = fs.createReadStream(&amp;apos;./README.md&amp;apos;,&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    flags:&amp;apos;r&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    encoding:&amp;apos;utf8&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    highWaterMark:5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rs.on(&amp;apos;data&amp;apos;,function (data) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rs.pause();//暂停触发data事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rs.resume();//5秒钟之后继续触发data事件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;,5000);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rs.on(&amp;apos;end&amp;apos;,function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;读取完毕!&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rs.on(&amp;apos;error&amp;apos;,function (err) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    console.log(&amp;apos;读取数据出错:&amp;apos;,err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//输出:#2016&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//12nod&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;可写流&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var fs =require(&amp;apos;fs&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function copy(src,dst) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var rs = fs.createReadStream(src);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    var ws = fs.createWriteStream(dst);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rs.on(&amp;apos;data&amp;apos;,function (data) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var flag = ws.write(data);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        if(!flag)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            rs.pause();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ws.on(&amp;apos;drain&amp;apos;,function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        rs.resume()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rs.on(&amp;apos;end&amp;apos;,function () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ws.end();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    rs.on(&amp;apos;error&amp;apos;,function (err) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        console.log(err);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;copy(&amp;apos;1.txt&amp;apos;,&amp;apos;2.txt&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//复制，同copy函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var rs = fs.createReadStream(&amp;apos;./1.txt&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var ws = fs.createWriteStream(&amp;apos;./3.txt&amp;apos;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rs.pipe(ws);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;fs模块&quot;&gt;&lt;a href=&quot;#fs模块&quot; class=&quot;headerlink&quot; title=&quot;fs模块&quot;&gt;&lt;/a&gt;fs模块&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可读流createReadStream&lt;/p&gt;
&lt;p&gt;  可读流触
    
    </summary>
    
    
      <category term="Nodejs全栈开发之路" scheme="http://blog.songqingbo.cn/tags/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2016/12/29 持续交付-发布可靠软件的系统方法完整版</title>
    <link href="http://blog.songqingbo.cn/2016/12/29/2016-12-29-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98-%E5%8F%91%E5%B8%83%E5%8F%AF%E9%9D%A0%E8%BD%AF%E4%BB%B6%E7%9A%84%E7%B3%BB%E7%BB%9F%E6%96%B9%E6%B3%95%E5%AE%8C%E6%95%B4%E7%89%88/"/>
    <id>http://blog.songqingbo.cn/2016/12/29/2016-12-29-nodejs开发书籍-持续交付-发布可靠软件的系统方法完整版/</id>
    <published>2016-12-29T04:00:34.000Z</published>
    <updated>2016-12-29T04:00:51.830Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/软件开发书籍/持续交付-发布可靠软件的系统方法完整版.pdf&quot; title=&quot;持续交付-发布可靠软件的系统方法完整版.pdf&quot;&gt;持续交付-发布可靠软件的系统方法完整版&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/软件开发书籍/持续交付-发布可靠软件的系统方法完整版.pdf&quot; title=&quot;持续交付-发布可靠软件的系统方法完整版.pdf&quot;&gt;持续交付-发布可靠软件的系统
    
    </summary>
    
    
      <category term="软件开发书籍" scheme="http://blog.songqingbo.cn/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-12-26-Nodejs全栈开发之路-Nodejs基础(如何通过nodejs开发web网站程序)</title>
    <link href="http://blog.songqingbo.cn/2016/12/26/2016-12-26-Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-Nodejs%E5%9F%BA%E7%A1%80(%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87nodejs%E5%BC%80%E5%8F%91web%E7%BD%91%E7%AB%99%E7%A8%8B%E5%BA%8F)/"/>
    <id>http://blog.songqingbo.cn/2016/12/26/2016-12-26-Nodejs全栈开发之路-Nodejs基础(如何通过nodejs开发web网站程序)/</id>
    <published>2016-12-26T03:50:50.000Z</published>
    <updated>2016-12-26T11:30:01.776Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;一、http模块&quot;&gt;&lt;a href=&quot;#一、http模块&quot; class=&quot;headerlink&quot; title=&quot;一、http模块&quot;&gt;&lt;/a&gt;一、http模块&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;创建一个服务器监听指定端口，浏览器等客户端会通过该服务器端获取到相应的信息

示例：
#test.js
    var fs = require(&amp;apos;fs&amp;apos;);
    var http = require(&amp;apos;http&amp;apos;);
    //创建server
    http.createServer(function(request,response){
        fs.readFile(&amp;apos;E:/projects/all-code/笔记/js &amp;amp;&amp;amp; html/Html模板主题/登录模板/login5/index.html&amp;apos;,&amp;apos;utf-8&amp;apos;,function(error,data){
            if(error){
                console.log(&amp;quot;读取文件出错！&amp;quot;);
                response.end(&amp;apos;页面获取失败!&amp;apos;);
            }else{
                console.log(&amp;quot;读取文件成功,返回页面数据!&amp;quot;);
                response.end(data);
            }

        });
    }).listen(8000); //绑定指定端口号

    console.log(&amp;apos;监听8000端口...&amp;apos;);
#控制台会首先打印监听8000端口...,当浏览器访问localhost:8000的时候，控制台打印“读取文件成功，返回页面数据！”，页面返回指定的html页面
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;二、url模块&quot;&gt;&lt;a href=&quot;#二、url模块&quot; class=&quot;headerlink&quot; title=&quot;二、url模块&quot;&gt;&lt;/a&gt;二、url模块&lt;/h3&gt;&lt;h4 id=&quot;1-parse&quot;&gt;&lt;a href=&quot;#1-parse&quot; class=&quot;headerlink&quot; title=&quot;1. parse&quot;&gt;&lt;/a&gt;1. parse&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;获取url的相关信息
#url.parse(request.url)  http://localhost:8000/query.html
    Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: &amp;apos;/query.html&amp;apos;,
      path: &amp;apos;/query.html&amp;apos;,
      href: &amp;apos;/query.html&amp;apos; }
    Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: &amp;apos;/favicon.ico&amp;apos;,
      path: &amp;apos;/favicon.ico&amp;apos;,
      href: &amp;apos;/favicon.ico&amp;apos; }

示例：
    var fs = require(&amp;apos;fs&amp;apos;);
    var http = require(&amp;apos;http&amp;apos;);
    var url = require(&amp;apos;url&amp;apos;);
    http.createServer(function(request,response){
        var urlObj = url.parse(request.url);
        console.log(urlObj);
        var pathname = urlObj.pathname;
        fs.readFile(pathname.substr(1),&amp;apos;utf-8&amp;apos;,function(error,data){
            response.end(pathname.substr(1));
        });

    }).listen(8000);
    console.log(&amp;quot;端口监听8000端口...&amp;quot;);




示例：

    var fs = require(&amp;apos;fs&amp;apos;);
    var http = require(&amp;apos;http&amp;apos;);
    var url = require(&amp;apos;url&amp;apos;);
    http.createServer(function(request,response){
        var urlObj = url.parse(request.url);
        console.log(urlObj);
        var pathname = urlObj.pathname;
        if(pathname === &amp;apos;/&amp;apos;){
            requestAndresponse(&amp;apos;/index.html&amp;apos;,response);
        }else if(pathname === &amp;apos;/test.html&amp;apos;){
            response.end(&amp;apos;msg:{hostname:&amp;quot;intel&amp;quot;,IP:192.168.13.1}&amp;apos;);
        }else{
            requestAndresponse(pathname,response);
        }


    }).listen(8000);
    console.log(&amp;quot;端口监听8000端口...&amp;quot;);

    function requestAndresponse(pathname,response){
            fs.readFile(pathname.substr(1),&amp;apos;utf-8&amp;apos;,function(error,data){
            if(error){
                response.writeHead(404);
                response.end(&amp;apos;file not found!&amp;apos;);
            }else{
                response.end(pathname.substr(1));
            }

        });
    };
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;一、http模块&quot;&gt;&lt;a href=&quot;#一、http模块&quot; class=&quot;headerlink&quot; title=&quot;一、http模块&quot;&gt;&lt;/a&gt;一、http模块&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;创建一个服务器监听指定端口，浏览器等
    
    </summary>
    
    
      <category term="Nodejs全栈开发之路" scheme="http://blog.songqingbo.cn/tags/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2016-12-22-Nodejs全栈开发之路-Nodejs基础(模块、包、文件读取、非阻塞异步模式)</title>
    <link href="http://blog.songqingbo.cn/2016/12/22/2016-12-22-Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-Nodejs%E5%9F%BA%E7%A1%80(%E6%A8%A1%E5%9D%97%E3%80%81%E5%8C%85%E3%80%81%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E3%80%81%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8F)/"/>
    <id>http://blog.songqingbo.cn/2016/12/22/2016-12-22-Nodejs全栈开发之路-Nodejs基础(模块、包、文件读取、非阻塞异步模式)/</id>
    <published>2016-12-22T02:30:50.000Z</published>
    <updated>2016-12-23T07:11:34.076Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;一、模块&quot;&gt;&lt;a href=&quot;#一、模块&quot; class=&quot;headerlink&quot; title=&quot;一、模块&quot;&gt;&lt;/a&gt;一、模块&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;任何具有特定功能的js文件都可以被封装成模块。
通过require将模块引入。
使用exports将函数全局化，使得其他文件可以通过引入该模块引用函数。

示例：
#test.js
    var sum = require(&amp;apos;./sum&amp;apos;); //导入自定义模块
    var data = sum[&amp;apos;sum&amp;apos;](2,3);
    var data1 = sum[&amp;apos;product&amp;apos;](3,5);
    console.log(data); //5
    console.log(data1); //60
#sum.js
    module.exports = {
        sum: function (startnum, endnum) {
            var sumnum = 0
            for (i = startnum; i &amp;lt;= endnum; i++) {
                sumnum += i;
            }
            return sumnum;
        },
        product: function (startnum, endnum) {
            var productnum = 1;
            for (j = startnum; j &amp;lt;= endnum; j++) {
                productnum *= j;
            }
            return productnum;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;二、包管理&quot;&gt;&lt;a href=&quot;#二、包管理&quot; class=&quot;headerlink&quot; title=&quot;二、包管理&quot;&gt;&lt;/a&gt;二、包管理&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;使用nodejs的包管理工具npm，可以从网络上下载并安装已经被封装好实现某个功能的接口模块。
开发者也可以将自己的模块封装成包上传到网络供其他开发者使用。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;三、文件相关&quot;&gt;&lt;a href=&quot;#三、文件相关&quot; class=&quot;headerlink&quot; title=&quot;三、文件相关&quot;&gt;&lt;/a&gt;三、文件相关&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;使用fs对文件进行操作

示例：
#test.js //异步回调读取文件内容
    var fs = require(&amp;apos;fs&amp;apos;);
    fs.readFile(&amp;apos;./err.txt&amp;apos;,function(err,data){
        if(err){
            console.log(&amp;apos;读取文件出错!&amp;apos;,err);
        }else{
            console.log(&amp;apos;文件读取成功:&amp;apos;,data.toString());//如果不加编码格式，这里data输出的是16进制的字符串
        }

    });
    // fs.readFile(&amp;apos;./err.txt&amp;apos;,&amp;apos;utf-8&amp;apos;,function(err,data){
    //     if(err){
    //         console.log(&amp;apos;读取文件出错!&amp;apos;,err);
    //     }else{
    //         console.log(&amp;apos;文件读取成功:&amp;apos;,data);
    //     }

    // });
#输出：
    文件读取成功: warn this！
    error this！
#test.js  //同步读取文件内容
    var fs = require(&amp;apos;fs&amp;apos;);
    var data = fs.readFileSync(&amp;apos;./err.txt&amp;apos;,&amp;apos;utf-8&amp;apos;);
    console.log(&amp;apos;文件读取成功:&amp;apos;,data);
#输出：
    文件读取成功: warn this！
    error this！
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;四、-path模块&quot;&gt;&lt;a href=&quot;#四、-path模块&quot; class=&quot;headerlink&quot; title=&quot;四、 path模块&quot;&gt;&lt;/a&gt;四、 path模块&lt;/h3&gt;&lt;h4 id=&quot;1-path-normalize-p&quot;&gt;&lt;a href=&quot;#1-path-normalize-p&quot; class=&quot;headerlink&quot; title=&quot;1. path.normalize(p)&quot;&gt;&lt;/a&gt;1. path.normalize(p)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;规范化路径，注意&amp;apos;..&amp;apos; 和 &amp;apos;.&amp;apos;。

示例：
#test.js
    var path = require(&amp;apos;path&amp;apos;);
    filepath = &amp;apos;./upload-aws/app.js&amp;apos;;
    console.log( path.normalize(filepath)); //返回指定文件的规范的路径
    console.log(&amp;apos;normalization : &amp;apos; + path.normalize(&amp;apos;/test/test1//2slashes/1slash/tab/..&amp;apos;)); 
#输出：
    upload-aws/app.js
    normalization : \test\test1\2slashes\1slash
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-path-join-path1-path2-…&quot;&gt;&lt;a href=&quot;#2-path-join-path1-path2-…&quot; class=&quot;headerlink&quot; title=&quot;2.    path.join([path1][, path2][, …])&quot;&gt;&lt;/a&gt;2.    path.join([path1][, path2][, …])&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是&amp;quot;/&amp;quot;，Windows系统是&amp;quot;\&amp;quot;。

示例：
    var path = require(&amp;apos;path&amp;apos;);
    console.log(&amp;apos;join path : &amp;apos; + path.join(&amp;apos;/test&amp;apos;, &amp;apos;test1&amp;apos;, &amp;apos;2slashes/1slash&amp;apos;, &amp;apos;tab/ddd/&amp;apos;, &amp;apos;..&amp;apos;));//join path : \test\test1\2slashes\1slash\tab
    console.log(&amp;apos;join path : &amp;apos; + path.join(&amp;apos;/test&amp;apos;, &amp;apos;test1&amp;apos;, &amp;apos;2slashes/1slash&amp;apos;,&amp;apos;..&amp;apos;));//join path : \test\test1\2slashes
#该方法会把最后一个正常的路径名称识别为文件，不会拼接在路径中。这一点儿很奇怪
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-path-resolve-from-…-to&quot;&gt;&lt;a href=&quot;#3-path-resolve-from-…-to&quot; class=&quot;headerlink&quot; title=&quot;3. path.resolve([from …], to)&quot;&gt;&lt;/a&gt;3. path.resolve([from …], to)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;将 to 参数解析为绝对路径。

示例：
    var path = require(&amp;apos;path&amp;apos;);
    filepath = &amp;apos;./upload-aws/app.js&amp;apos;;
    console.log(path.resolve(filepath)); //将指定文件相对路径转换成绝对路径
输出：
    E:\projects\all-code\node\upload-aws\app.js 
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;4-path-isAbsolute-path&quot;&gt;&lt;a href=&quot;#4-path-isAbsolute-path&quot; class=&quot;headerlink&quot; title=&quot;4.    path.isAbsolute(path)&quot;&gt;&lt;/a&gt;4.    path.isAbsolute(path)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;判断参数 path 是否是绝对路径。
返回值是：true false,根据返回值判断是否是绝对路径
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;5-path-relative-from-to&quot;&gt;&lt;a href=&quot;#5-path-relative-from-to&quot; class=&quot;headerlink&quot; title=&quot;5.    path.relative(from, to)&quot;&gt;&lt;/a&gt;5.    path.relative(from, to)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;用于将相对路径转为绝对路径。from是指定源路径，to是指定的目的路径，输出结果是从源路径到目的路径的相对路径。

示例：
    console.log(path.relative(&amp;apos;upload-aws/app.js&amp;apos;,&amp;apos;swht.github.io&amp;apos;)); //..\swht.github.io
    解析：upload-aws 和swht.github.io在同一级路径，从upload-aws路径进入到swht.github.io路径，需要的相对路径是..\swht.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;6-path-dirname-p&quot;&gt;&lt;a href=&quot;#6-path-dirname-p&quot; class=&quot;headerlink&quot; title=&quot;6. path.dirname(p)&quot;&gt;&lt;/a&gt;6. path.dirname(p)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;返回路径中代表文件夹的部分，同 Unix的 __dirname 命令类似,但是_dirname获取的是文件所在位置的绝对路径
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;7-path-basename-p-ext&quot;&gt;&lt;a href=&quot;#7-path-basename-p-ext&quot; class=&quot;headerlink&quot; title=&quot;7.    path.basename(p[, ext])&quot;&gt;&lt;/a&gt;7.    path.basename(p[, ext])&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;返回路径中的最后一部分。同 Unix 命令 bashname 类似。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;8-path-extname-p&quot;&gt;&lt;a href=&quot;#8-path-extname-p&quot; class=&quot;headerlink&quot; title=&quot;8.    path.extname(p)&quot;&gt;&lt;/a&gt;8.    path.extname(p)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;返回路径中文件的后缀名，即路径中最后一个&amp;apos;.&amp;apos;之后的部分。如果一个路径中并不包含&amp;apos;.&amp;apos;或该路径只包含一个&amp;apos;.&amp;apos; 且这个&amp;apos;.&amp;apos;为路径的第一个字符，则此命令返回空字符串。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;9-path-parse-pathString&quot;&gt;&lt;a href=&quot;#9-path-parse-pathString&quot; class=&quot;headerlink&quot; title=&quot;9.    path.parse(pathString)&quot;&gt;&lt;/a&gt;9.    path.parse(pathString)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;返回路径字符串的对象。

示例：
    var path = require(&amp;apos;path&amp;apos;);
    filepath = &amp;apos;./upload-aws/app.js&amp;apos;;
    console.log(path.parse(filepath));
    // { root: &amp;apos;&amp;apos;,
    //   dir: &amp;apos;./upload-aws&amp;apos;,
    //   base: &amp;apos;app.js&amp;apos;,
    //   ext: &amp;apos;.js&amp;apos;,
    //   name: &amp;apos;app&amp;apos; }    
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;10-path-format-pathObject&quot;&gt;&lt;a href=&quot;#10-path-format-pathObject&quot; class=&quot;headerlink&quot; title=&quot;10. path.format(pathObject)&quot;&gt;&lt;/a&gt;10. path.format(pathObject)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;从对象中返回路径字符串，和 path.parse 相反。

示例：
    data = { root: &amp;apos;&amp;apos;,
      dir: &amp;apos;./upload-aws&amp;apos;,
      base: &amp;apos;app.js&amp;apos;,
      ext: &amp;apos;.js&amp;apos;,
      name: &amp;apos;app&amp;apos; }
      console.log(path.format(data));
输出：./upload-aws\app.js
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;11-path-sep&quot;&gt;&lt;a href=&quot;#11-path-sep&quot; class=&quot;headerlink&quot; title=&quot;11. path.sep&quot;&gt;&lt;/a&gt;11. path.sep&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;平台的文件路径分隔符，&amp;apos;\\&amp;apos; 或 &amp;apos;/&amp;apos;。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;12-path-delimiter&quot;&gt;&lt;a href=&quot;#12-path-delimiter&quot; class=&quot;headerlink&quot; title=&quot;12. path.delimiter&quot;&gt;&lt;/a&gt;12. path.delimiter&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;平台的分隔符, ; or &amp;apos;:&amp;apos;.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;13-path-posix&quot;&gt;&lt;a href=&quot;#13-path-posix&quot; class=&quot;headerlink&quot; title=&quot;13. path.posix&quot;&gt;&lt;/a&gt;13. path.posix&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;提供上述 path 的方法，不过总是以 posix 兼容的方式交互。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;14-path-win32&quot;&gt;&lt;a href=&quot;#14-path-win32&quot; class=&quot;headerlink&quot; title=&quot;14. path.win32&quot;&gt;&lt;/a&gt;14. path.win32&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;提供上述 path 的方法，不过总是以 win32 兼容的方式交互。
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;一、模块&quot;&gt;&lt;a href=&quot;#一、模块&quot; class=&quot;headerlink&quot; title=&quot;一、模块&quot;&gt;&lt;/a&gt;一、模块&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;任何具有特定功能的js文件都可以被封装成模块。
通过require将
    
    </summary>
    
    
      <category term="Nodejs全栈开发之路" scheme="http://blog.songqingbo.cn/tags/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2016-12-21-Nodejs全栈开发之路-Nodejs基础(console、process)</title>
    <link href="http://blog.songqingbo.cn/2016/12/21/2016-12-21-Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF-Nodejs%E5%9F%BA%E7%A1%80(console%E3%80%81process)/"/>
    <id>http://blog.songqingbo.cn/2016/12/21/2016-12-21-Nodejs全栈开发之路-Nodejs基础(console、process)/</id>
    <published>2016-12-21T10:03:50.000Z</published>
    <updated>2016-12-21T11:03:09.734Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;一、console控制台输出&quot;&gt;&lt;a href=&quot;#一、console控制台输出&quot; class=&quot;headerlink&quot; title=&quot;一、console控制台输出&quot;&gt;&lt;/a&gt;一、console控制台输出&lt;/h3&gt;&lt;h4 id=&quot;1-console-log&quot;&gt;&lt;a href=&quot;#1-console-log&quot; class=&quot;headerlink&quot; title=&quot;1. console.log()&quot;&gt;&lt;/a&gt;1. console.log()&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;信息输出,主要负责在程序调试中打印某个变量的值、输出程序逻辑注释
示例：
console.log(&amp;apos;Server running at http://127.0.0.1:8000/&amp;apos;); //服务监听在127.0.0.1:8000

var data = process.stdin.read(); //读取用户输入的信息并赋给变量data
console.log(data); //输出用户输入的信息
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-console-info&quot;&gt;&lt;a href=&quot;#2-console-info&quot; class=&quot;headerlink&quot; title=&quot;2. console.info()&quot;&gt;&lt;/a&gt;2. console.info()&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;等级日志--一般信息输出，主要是一般信息的打印输出到控制台或指定日志文件
示例：
#test.js
    console.info(&amp;apos;this is info！&amp;apos;); //node test.js 1&amp;gt;log.txt 
#log.txt
    this is info！
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-console-warn&quot;&gt;&lt;a href=&quot;#3-console-warn&quot; class=&quot;headerlink&quot; title=&quot;3. console.warn()&quot;&gt;&lt;/a&gt;3. console.warn()&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;等级日志--警告信息输出，主要是指具有警告信息的日志信息打印输出到控制台或指定日志文件，该类信息被打印在控制台时表现出不同颜色
#test.js
    console.info(&amp;apos;this is warn！&amp;apos;); //node test.js 2&amp;gt;err.txt 
#log.txt
    this is warn！
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;4-console-err&quot;&gt;&lt;a href=&quot;#4-console-err&quot; class=&quot;headerlink&quot; title=&quot;4. console.err()&quot;&gt;&lt;/a&gt;4. console.err()&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;等级日志--错误信息输出，主要是指具有错误信息的日志信息打印输出到控制台或指定日志文件，该类信息被打印在控制台时表现出不同颜色
#test.js
    console.info(&amp;apos;this is error！&amp;apos;); //node test.js 2&amp;gt;err.txt 
#log.txt
    this is error！
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;5-等级日志信息输出总结&quot;&gt;&lt;a href=&quot;#5-等级日志信息输出总结&quot; class=&quot;headerlink&quot; title=&quot;5. 等级日志信息输出总结&quot;&gt;&lt;/a&gt;5. 等级日志信息输出总结&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;等级日志，按照不同等级在控制台输出呈现不同颜色。也可以根据等级对日志进行分流输出到不同的文件：
示例：
#test.js
    console.info(&amp;apos;this is info！&amp;apos;);
    console.info(&amp;apos;this is warn！&amp;apos;); 
    console.info(&amp;apos;this is error！&amp;apos;);
    //node test.js 1&amp;gt;log.txt 2&amp;gt;err.txt 
#log.txt
    this is info！
#err.txt
    this is warn！
    this is error！
1 info信息被输入到日志文件log.txt
2 warn/error信息被输入到日志文件err.txt
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;二、dirname-filename-cwd&quot;&gt;&lt;a href=&quot;#二、dirname-filename-cwd&quot; class=&quot;headerlink&quot; title=&quot;二、dirname/filename/cwd&quot;&gt;&lt;/a&gt;二、&lt;strong&gt;dirname/&lt;/strong&gt;filename/cwd&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;console.log(__filename);//输出当前执行文件所在绝对路径+文件名
console.log(&amp;apos;__dirname:&amp;apos;,__dirname);//输出当前执行文件所在的绝对路径
console.log(&amp;apos;process.cwd():&amp;apos;,process.cwd()); //cwd输出执行node命令所在目录的绝对路径
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;三、process&quot;&gt;&lt;a href=&quot;#三、process&quot; class=&quot;headerlink&quot; title=&quot;三、process&quot;&gt;&lt;/a&gt;三、process&lt;/h3&gt;&lt;h4 id=&quot;1-process-stdout&quot;&gt;&lt;a href=&quot;#1-process-stdout&quot; class=&quot;headerlink&quot; title=&quot;1. process.stdout&quot;&gt;&lt;/a&gt;1. process.stdout&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;标准信息输出，不建议使用字段出来日志的输出
process.stdout.write(&amp;apos;this is stdout write\n&amp;apos;); //标准信息输出
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-process-stderr&quot;&gt;&lt;a href=&quot;#2-process-stderr&quot; class=&quot;headerlink&quot; title=&quot;2. process.stderr&quot;&gt;&lt;/a&gt;2. process.stderr&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;标准错误信息输出
process.stderr.write(&amp;apos;this is stderr write\n&amp;apos;); //标准错误输出
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-process-stdin&quot;&gt;&lt;a href=&quot;#3-process-stdin&quot; class=&quot;headerlink&quot; title=&quot;3. process.stdin&quot;&gt;&lt;/a&gt;3. process.stdin&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;标准输入
process.stdin.setEncoding(&amp;apos;utf-8&amp;apos;); //设置process输出的编码格式
process.stdin.on(&amp;apos;data&amp;apos;,function(data){
    console.log(data);
});//on监听事件，当用户输入信息，通过事件监听将信息传递给data，通过回调函数输出

示例：
    process.stdin.setEncoding(&amp;apos;utf-8&amp;apos;); //设置process输出的编码格式
    process.stdin.on(&amp;apos;readable&amp;apos;,function(){
    var data = process.stdin.read(); //读取用户输入的信息
        console.log(data);
    })；
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;4-process-on&quot;&gt;&lt;a href=&quot;#4-process-on&quot; class=&quot;headerlink&quot; title=&quot;4. process.on&quot;&gt;&lt;/a&gt;4. process.on&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;事件监听
    exit 监听程序的正常退出
    SIGINT 监听键盘的输入

示例：

#test.js
    process.stdin.setEncoding(&amp;apos;utf-8&amp;apos;); //设置process输出的编码格式
    process.stdin.on(&amp;apos;data&amp;apos;,function(data){
        console.log(data);
    });
    process.on(&amp;apos;exit&amp;apos;,function(){
        console.log(&amp;apos;exit is exit&amp;apos;);
    });//监听事件，程序正常退出的时候打印exit信息
    process.on(&amp;apos;SIGINT&amp;apos;,function(){
        console.log(&amp;apos;exit&amp;apos;);
        process.exit(); //监听正常退出事件，打印&amp;apos;exit is exit&amp;apos;并退出
    });//监听键盘输入，当用户按下Ctrl+c之后，程序不会退出
#node test.js 
#用户输入信息，直接打印相应信息，当用户按下Ctrl+c之后，程序会打印exit退出信息，在走到process.exit()之后会打印&amp;apos;exit is exit&amp;apos;。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;5-process-argv&quot;&gt;&lt;a href=&quot;#5-process-argv&quot; class=&quot;headerlink&quot; title=&quot;5. process.argv&quot;&gt;&lt;/a&gt;5. process.argv&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;获取执行执行程序的命令和程序名，以及用户输入的其他参数
#test.js
    console.log(process.argv); //获取执行程序时用户输入的一个配置参数 process.argv[2] process.argv[3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QqveM9L.jpg&quot; alt=&quot;&quot;&gt;    &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;h3 id=&quot;一、console控制台输出&quot;&gt;&lt;a href=&quot;#一、console控制台输出&quot; class=&quot;headerlink&quot; title=&quot;一、console控制台输出&quot;&gt;&lt;/a&gt;一、console控制台输出&lt;/h3&gt;&lt;h4 i
    
    </summary>
    
    
      <category term="Nodejs全栈开发之路" scheme="http://blog.songqingbo.cn/tags/Nodejs%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2016-10-11-mysql-mysql查询命令</title>
    <link href="http://blog.songqingbo.cn/2016/10/11/2016-10-11-mysql-mysql%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.songqingbo.cn/2016/10/11/2016-10-11-mysql-mysql查询命令/</id>
    <published>2016-10-11T03:18:50.000Z</published>
    <updated>2016-11-22T05:53:23.102Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;编者按:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这篇文章会陆续记录在工作中使用mysql进行数据查询的一些命令，以及将一些需求和命令的实现进行结合讲解。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一、获取在(北京、广州、深圳)近三个月内有登录行为的用户信息，字段：用户名，邮箱，手机号，创建应用数量，注册时间，最后一次登录时间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    num,
    province,
    FROM_UNIXTIME(
        ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    FROM_UNIXTIME(
        loginTime / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS loginTime
FROM
    TB_Enterprise_User
INNER JOIN (
    SELECT
        userId,
        COUNT(*) AS num
    FROM
        cad_app_user
    WHERE
        type = 0
    GROUP BY
        userId
    ORDER BY
        num
) tb1 ON TB_Enterprise_User.enterUserId = tb1.userId
WHERE
    LENGTH(phone) = 11
AND phone IS NOT NULL
AND loginTime &amp;gt;= UNIX_TIMESTAMP(&amp;apos;2016-07-11 00:00:00&amp;apos;) * 1000

AND (
    province = &amp;apos;北京&amp;apos;
    OR province = &amp;apos;广州&amp;apos;
    OR province = &amp;apos;深圳&amp;apos;
)
ORDER BY
    loginTime ASC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需求分析：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用户名，邮箱，手机号，注册时间，最后一次登录时间这几个字段都存放在一张表中(TB_Enterprise_User),只需要写好相应的条件就行。
创建应用数需要从另一张表中(cad_app_user)进行统计查询形成新表与TB_Enterprise_User进行表关联。
这里需要注意loginTime、ct记录的是毫秒值，而UNIX_TIMESTAMP(&amp;apos;2016-07-11 00:00:00&amp;apos;)转换的记录值是秒
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二、获取过去一周新增loader用户的信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;查询指定时间增加loader用户的信息：
    1.统计服务器每天新增文件total_day/new.txt获取appId
        awk -F &amp;quot;|&amp;quot; &amp;apos;{print $1}&amp;apos; 20161023 |sort -k 1 -n -r|uniq -c|awk -F &amp;quot; &amp;quot; &amp;apos;{print $2}&amp;apos; &amp;gt;&amp;gt; test.txt （多天就执行多条，把文件名换一下，然后执行下面一句）
        awk -F &amp;quot;|&amp;quot; &amp;apos;{print $1}&amp;apos; test.txt |sort -k 1 -n -r|uniq -c|awk -F &amp;quot; &amp;quot; &amp;apos;{print $2}&amp;apos; &amp;gt;&amp;gt; test_2.txt(获取到全部的新增loader的应用ID)
    2.根据应用ID获取对应的userId
    3.查询对应userId创建应用的数量
    4.进行表关联，查询用户表，获取用户的信息


SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        TB_Enterprise_User.ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    province,
    num
FROM 
    TB_Enterprise_User
INNER JOIN (
    SELECT
        userId,COUNT(*) AS num
    FROM
        cad_app_user
    WHERE
        userId IN (
            SELECT
                userId
            FROM
                cad_app_user
            WHERE
                type = 0
            AND appId IN(&amp;apos;A6999979578606&amp;apos;,&amp;apos;A6999956860949&amp;apos;,&amp;apos;A6999909977189&amp;apos;)
            GROUP BY
                userId
        )
    GROUP BY
        userId
) tb1 ON TB_Enterprise_User.enterUserId = tb1.userId
ORDER BY
    TB_Enterprise_User.enterUserId ASC;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;三、指定时间的自定义loader的使用用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        TB_Enterprise_User.ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    province
FROM
    TB_Enterprise_User
INNER JOIN loader_pack ON TB_Enterprise_User.enterUserId = loader_pack.userId
WHERE
    loader_pack.ct &amp;gt;= UNIX_TIMESTAMP(&amp;apos;2016-10-17 00:00:00&amp;apos;) * 1000
AND loader_pack.ct &amp;lt; UNIX_TIMESTAMP(&amp;apos;2016-10-24 00:00:00&amp;apos;) * 1000
GROUP BY enterUserId
ORDER BY
    TB_Enterprise_User.enterUserId ASC;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;四、10月28号-11月8号访问课程页面“未买课程”的用户数据。需要信息：注册时间、手机号、邮箱、应用个数、最后登录时间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        TB_Enterprise_User.ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    FROM_UNIXTIME(
        TB_Enterprise_User.loginTime / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS loginTime,
    num,
    MAX(vip_click.date) AS date
FROM
    TB_Enterprise_User
INNER JOIN vip_click ON TB_Enterprise_User.enterUserId = vip_click.userId
INNER JOIN (
    SELECT
        userId,
        COUNT(*) AS num
    FROM
        cad_app_user
    WHERE
        type = 0
    GROUP BY
        userId
) tb1 ON TB_Enterprise_User.enterUserId = tb1.userId
WHERE
    UNIX_TIMESTAMP(vip_click.date) &amp;gt;= UNIX_TIMESTAMP(&amp;apos;2016-10-28 00:00:00&amp;apos;)
AND UNIX_TIMESTAMP(vip_click.date) &amp;lt; UNIX_TIMESTAMP(&amp;apos;2016-11-09 00:00:00&amp;apos;)
AND vip_click.url = &amp;apos;/vipservice/course&amp;apos;
AND vip_click.userId NOT IN (select userid from training_user GROUP BY userid)
GROUP BY
    vip_click.userId
ORDER BY
    vip_click.date ASC;    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;五、10月21号-11月8号注册的新用户“未访问过课程页面的用户”需要信息：注册时间、手机号、邮箱、最后登录时间&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        TB_Enterprise_User.ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    FROM_UNIXTIME(
        TB_Enterprise_User.loginTime / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS loginTime
FROM
    TB_Enterprise_User
WHERE
    UNIX_TIMESTAMP(ct) &amp;gt;= UNIX_TIMESTAMP(&amp;apos;2016-10-28 00:00:00&amp;apos;)
AND UNIX_TIMESTAMP(ct) &amp;lt; UNIX_TIMESTAMP(&amp;apos;2016-11-09 00:00:00&amp;apos;)
AND enterUserId NOT IN(select userId from vip_click GROUP BY
    vip_click.userId)
ORDER BY
    enterUserId ASC;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;六、点击公开直播课程按钮的用户信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        TB_Enterprise_User.ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    num
FROM
    TB_Enterprise_User
INNER JOIN (
    SELECT
        userId,
        COUNT(*) AS num
    FROM
        cad_app_user
    WHERE
        type = 0
    GROUP BY
        userId
) tb1 ON TB_Enterprise_User.enterUserId = tb1.userId
where 
    enterUserId in (select userid from vip_click where  url=&amp;apos;openclass&amp;apos; and date &amp;gt;&amp;apos;2016-11-06&amp;apos;)
ORDER BY
    TB_Enterprise_User.enterUserId ASC;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;七、获取指定城市注册用户的信息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    FROM_UNIXTIME(
        loginTime / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS loginTime,
    province,
    num
FROM
    TB_Enterprise_User
INNER JOIN (
    SELECT
        userId,
        COUNT(*) AS num
    FROM
        cad_app_user
    WHERE
        type = 0
    GROUP BY
        userId
) tb1 ON TB_Enterprise_User.enterUserId = tb1.userId
WHERE
    state != 100
AND (
    TB_Enterprise_User.province = &amp;apos;青岛&amp;apos;
    OR TB_Enterprise_User.province = &amp;apos;潍坊&amp;apos;
    OR TB_Enterprise_User.province = &amp;apos;济南&amp;apos;
    OR TB_Enterprise_User.province = &amp;apos;淄博&amp;apos;
)
ORDER BY
    loginTime ASC
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;八、获取指定城市购买过七天培训课程的用户信息(运行库为CAD)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ct,
    FROM_UNIXTIME(
        loginTime / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS loginTime,
    province,
    num
FROM
    TB_Enterprise_User
INNER JOIN (
    SELECT
        userId,
        COUNT(*) AS num
    FROM
        cad_app_user
    WHERE
        type = 0
    GROUP BY
        userId
) tb1 ON TB_Enterprise_User.enterUserId = tb1.userId
WHERE
    state != 100
AND (
    TB_Enterprise_User.province = &amp;apos;青岛&amp;apos;
    OR TB_Enterprise_User.province = &amp;apos;潍坊&amp;apos;
    OR TB_Enterprise_User.province = &amp;apos;济南&amp;apos;
    OR TB_Enterprise_User.province = &amp;apos;淄博&amp;apos;
)
AND enterUserId IN (
    SELECT
        userid
    FROM
        training_user
    GROUP BY
        userid
    UNION
        SELECT
            userid
        FROM
            admin2.tr_order
        GROUP BY
            userid
)
ORDER BY
    loginTime ASC


===============================================================================
参考：http://www.cnblogs.com/kissdodog/archive/2013/06/24/3152743.html
使用了union关键字做查询结果的并集 
    select * from table1
    union [all]
    select * from table2
#注意事项：两个表的查询结果数据结构要一致。另外如果使用 union all组合关键字，求并集的时候不会去掉重复行
===============================================================================
#延伸知识
#求交集
    SELECT Name FROM Person_1
    INTERSECT
    SELECT Name FROM Person_2
#求差集
    SELECT Name FROM Person_1
    EXCEPT
    SELECT Name FROM Person_2
===============================================================================
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;九、获取指定时间的移动端未完全注册渠道来源用户    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT
    userName,
    loginName,
    phone,
    FROM_UNIXTIME(
        TB_Enterprise_User.ct / 1000,
        &amp;apos;%Y-%m-%d %H:%i:%S&amp;apos;
    ) AS ctime,
    channel
FROM
    TB_Enterprise_User
WHERE
    state = 10
AND ct &amp;gt;= UNIX_TIMESTAMP(&amp;apos;2016-11-09 00:00:00&amp;apos;) * 1000
AND ct &amp;lt; UNIX_TIMESTAMP(&amp;apos;2016-11-23 00:00:00&amp;apos;) * 1000
AND channelType=0
ORDER BY
ct ASC;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;编者按:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这篇文章会陆续记录在工作中使用mysql进行数据查询的一些命令，以及将一些需求和命令的实现进行结合讲解。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一、获取在(北京、广州、深圳)近三个月内有登录行为的用户
    
    </summary>
    
    
      <category term="mysql" scheme="http://blog.songqingbo.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-Python教程_20141026</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Python%E6%95%99%E7%A8%8B-20141026/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-Python教程-20141026/</id>
    <published>2016-08-31T08:55:18.000Z</published>
    <updated>2016-09-26T08:58:28.608Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python教程_20141026.pdf&quot; title=&quot;Python教程_20141026.pdf&quot;&gt;Python教程_20141026&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python教程_20141026.pdf&quot; title=&quot;Python教程_20141026.pdf&quot;&gt;Python教程_20141026&lt;
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-Python核心编程 第三版 英文版</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B-%E7%AC%AC%E4%B8%89%E7%89%88-%E8%8B%B1%E6%96%87%E7%89%88/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-Python核心编程-第三版-英文版/</id>
    <published>2016-08-31T08:53:13.000Z</published>
    <updated>2016-09-26T08:58:19.525Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/《Python标准库》中文版.pdf&quot; title=&quot;《Python标准库》中文版.pdf&quot;&gt;《Python标准库》中文版&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/《Python标准库》中文版.pdf&quot; title=&quot;《Python标准库》中文版.pdf&quot;&gt;《Python标准库》中文版&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-PythonCookbook第三版中文</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-PythonCookbook%E7%AC%AC%E4%B8%89%E7%89%88%E4%B8%AD%E6%96%87/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-PythonCookbook第三版中文/</id>
    <published>2016-08-31T08:51:58.000Z</published>
    <updated>2016-09-26T08:58:36.005Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/PythonCookbook第三版中文.pdf&quot; title=&quot;PythonCookbook第三版中文.pdf&quot;&gt;PythonCookbook第三版中文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/PythonCookbook第三版中文.pdf&quot; title=&quot;PythonCookbook第三版中文.pdf&quot;&gt;PythonCookbook
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-Python 入门指南3.5.1 中文</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Python-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%973-5-1-%E4%B8%AD%E6%96%87/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-Python-入门指南3-5-1-中文/</id>
    <published>2016-08-31T08:50:06.000Z</published>
    <updated>2016-09-26T08:58:44.345Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python入门指南3.5.1中文.chm&quot; title=&quot;Python入门指南3.5.1中文.chm&quot;&gt;Python 入门指南3.5.1 中文&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python入门指南3.5.1中文.chm&quot; title=&quot;Python入门指南3.5.1中文.chm&quot;&gt;Python 入门指南3.5.1 中
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-DjangoBook2.0中文版</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-DjangoBook2-0%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-DjangoBook2-0中文版/</id>
    <published>2016-08-31T08:48:46.000Z</published>
    <updated>2016-10-13T08:51:42.586Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/DjangoBook2.0中文版.pdf&quot; title=&quot;DjangoBook2.0中文版.pdf&quot;&gt;DjangoBook2.0中文版.pdf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/DjangoBook2.0中文版.pdf&quot; title=&quot;DjangoBook2.0中文版.pdf&quot;&gt;DjangoBook2.0中文版.pdf
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-Django Web开发指南</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Django-Web%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-Django-Web开发指南/</id>
    <published>2016-08-31T08:46:17.000Z</published>
    <updated>2016-09-26T08:58:58.625Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/DjangoWeb开发指南.pdf&quot; title=&quot;Django Web开发指南.pdf&quot;&gt;Django Web开发指南.pdf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/DjangoWeb开发指南.pdf&quot; title=&quot;Django Web开发指南.pdf&quot;&gt;Django Web开发指南.pdf&lt;/a&gt;&lt;/p
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-《Python标准库源代码》</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-%E3%80%8APython%E6%A0%87%E5%87%86%E5%BA%93%E6%BA%90%E4%BB%A3%E7%A0%81%E3%80%8B/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-《Python标准库源代码》/</id>
    <published>2016-08-31T08:43:40.000Z</published>
    <updated>2016-09-26T08:57:59.404Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/《Python标准库源代码》.CHM&quot; title=&quot;《Python标准库源代码》.CHM&quot;&gt;《Python标准库源代码》&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/《Python标准库源代码》.CHM&quot; title=&quot;《Python标准库源代码》.CHM&quot;&gt;《Python标准库源代码》&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-31-python开发书籍-《Python标准库》中文版</title>
    <link href="http://blog.songqingbo.cn/2016/08/31/2016-08-31-python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-%E3%80%8APython%E6%A0%87%E5%87%86%E5%BA%93%E3%80%8B%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>http://blog.songqingbo.cn/2016/08/31/2016-08-31-python开发书籍-《Python标准库》中文版/</id>
    <published>2016-08-31T08:41:21.000Z</published>
    <updated>2016-09-26T08:58:12.738Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python核心编程[第三版]英文版.pdf&quot; title=&quot;Python核心编程[第三版]英文版.pdf&quot;&gt;Python核心编程[第三版]英文版&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/python/Python核心编程[第三版]英文版.pdf&quot; title=&quot;Python核心编程[第三版]英文版.pdf&quot;&gt;Python核心编程[第三版]英
    
    </summary>
    
    
      <category term="python开发书籍" scheme="http://blog.songqingbo.cn/tags/python%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-26-nodejs开发书籍-Node入门</title>
    <link href="http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Node%E5%85%A5%E9%97%A8/"/>
    <id>http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs开发书籍-Node入门/</id>
    <published>2016-08-26T02:31:54.000Z</published>
    <updated>2016-08-26T02:32:44.187Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node入门.pdf&quot; title=&quot;Node入门.pdf&quot;&gt;Node入门&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node入门.pdf&quot; title=&quot;Node入门.pdf&quot;&gt;Node入门&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-26-nodejs开发书籍-Node+Web开发</title>
    <link href="http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Node-Web%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs开发书籍-Node-Web开发/</id>
    <published>2016-08-26T02:29:04.000Z</published>
    <updated>2016-08-26T02:31:29.564Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node+Web开发.pdf&quot; title=&quot;Node+Web开发.pdf&quot;&gt;Node+Web开发&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node+Web开发.pdf&quot; title=&quot;Node+Web开发.pdf&quot;&gt;Node+Web开发&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016-08-26-nodejs开发书籍-Node.js+开js+开发指南</title>
    <link href="http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-Nodejs-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>http://blog.songqingbo.cn/2016/08/26/2016-08-26-nodejs开发书籍-Nodejs-开发指南/</id>
    <published>2016-08-26T02:15:31.000Z</published>
    <updated>2016-08-26T02:28:17.405Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node.js+开发指南.pdf&quot; title=&quot;Node.js+开发指南.pdf&quot;&gt;Node.js+开发指南&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/Node.js+开发指南.pdf&quot; title=&quot;Node.js+开发指南.pdf&quot;&gt;Node.js+开发指南&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016/08/22 [nodejs开发书籍]深入浅出Node.js.pdf</title>
    <link href="http://blog.songqingbo.cn/2016/08/22/2016-08-22-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode-js-pdf/"/>
    <id>http://blog.songqingbo.cn/2016/08/22/2016-08-22-nodejs开发书籍-深入浅出Node-js-pdf/</id>
    <published>2016-08-22T01:47:18.000Z</published>
    <updated>2016-08-24T03:48:56.108Z</updated>
    
    <content type="html">&lt;p&gt;Author: @南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/深入浅出Node.js.pdf&quot; title=&quot;深入浅出Node.js.pdf&quot;&gt;深入浅出Node.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明：本电子书为为本人从图灵社区所购，涉及版权，请读者不要私自传播。本平台仅提供在线阅读功能。如果您觉得此书帮助了您，同时也想帮作者分摊一部分电子书版权费。欢迎通过微信二维码进行资助，非常感谢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.songqingbo.cn/img/微信收款.png&quot; width=&quot;30%&quot; height=&quot;30%&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author: @南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/深入浅出Node.js.pdf&quot; title=&quot;深入浅出Node.js.pdf&quot;&gt;深入浅出Node.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明：本电子
    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>2016/08/20 [nodejs开发书籍]MEAN Web开发</title>
    <link href="http://blog.songqingbo.cn/2016/08/20/2016-08-20-%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95%E4%B9%A6%E7%B1%8D-MEAN-Web%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.songqingbo.cn/2016/08/20/2016-08-20-软件开发方法书籍-MEAN-Web开发/</id>
    <published>2016-08-20T10:42:34.000Z</published>
    <updated>2016-08-26T02:36:40.635Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/MEANWeb开发.pdf&quot; title=&quot;MEAN Web开发.pdf&quot;&gt;MEAN WEB开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/MEANWeb开发代码.zip&quot; title=&quot;MEAN Web开发代码.zip&quot;&gt;MEAN Web开发代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明：本电子书为为本人从图灵社区所购，涉及版权，请读者不要私自传播。本平台仅提供在线阅读功能。如果您觉得此书帮助了您，同时也想帮作者分摊一部分电子书版权费。欢迎通过微信二维码进行资助，非常感谢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blog.songqingbo.cn/img/微信收款.png&quot; width=&quot;30%&quot; height=&quot;30%&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/nodejs/MEANWeb开发.pdf&quot; title=&quot;MEAN Web开发.pdf&quot;&gt;MEAN WEB开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;ht
    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
</feed>
