<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南非波波博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.songqingbo.cn/"/>
  <updated>2016-08-20T10:54:23.986Z</updated>
  <id>http://blog.songqingbo.cn/</id>
  
  <author>
    <name>南非波波</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2016/08/20 [nodejs开发书籍]MEAN Web开发</title>
    <link href="http://blog.songqingbo.cn/2016/08/20/2016-08-20-nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D-MEAN-Web%E5%BC%80%E5%8F%91/"/>
    <id>http://blog.songqingbo.cn/2016/08/20/2016-08-20-nodejs开发书籍-MEAN-Web开发/</id>
    <published>2016-08-20T10:42:34.000Z</published>
    <updated>2016-08-20T10:54:23.986Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/MEAN Web开发.pdf&quot; title=&quot;MEAN Web开发.pdf&quot;&gt;MEAN WEB开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明：本电子书为为本人从图灵社区所购，涉及版权，请读者不要私自传播。本平台仅提供在线阅读功能。如果您觉得此书帮助了您，同时也想帮作者分摊一部分电子书版权费。欢迎通过微信二维码进行资助，非常感谢。&lt;br&gt;&lt;img src=&quot;http://blog.songqingbo.cn/img/微信收款.png&quot; alt=&quot;资助南非波波&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.songqingbo.cn/pdf/MEAN Web开发.pdf&quot; title=&quot;MEAN Web开发.pdf&quot;&gt;MEAN WEB开发&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;声明：本电子书为为本人从图灵社区所
    
    </summary>
    
    
      <category term="nodejs开发书籍" scheme="http://blog.songqingbo.cn/tags/nodejs%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day17</title>
    <link href="http://blog.songqingbo.cn/2016/05/14/s12-20160514-day17/"/>
    <id>http://blog.songqingbo.cn/2016/05/14/s12-20160514-day17/</id>
    <published>2016-05-14T07:30:00.000Z</published>
    <updated>2016-07-05T10:37:26.015Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5474411.html&quot; title=&quot;常用算法设计&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5474411.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、冒泡排序算法&quot;&gt;&lt;a href=&quot;#一、冒泡排序算法&quot; class=&quot;headerlink&quot; title=&quot;一、冒泡排序算法&quot;&gt;&lt;/a&gt;一、冒泡排序算法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import random,time
#m冒泡排序

def bubble_up1(array):
    &amp;apos;&amp;apos;&amp;apos;
    m冒泡排序算法
    :param array:
    :return: count: 6190862 time: 6.706383466720581
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for i in range(len(array)):
        for j in range(len(array) - 1 - i):
            if array[j] &amp;gt; array[j + 1]:
                temp = array[j + 1]
                array[j + 1] = array[j]
                array[j] = temp
                count += 1
    print(&amp;quot;count:&amp;quot;, count)
    print(&amp;quot;array:&amp;quot;, array)

def bubble_up2(array):
    &amp;apos;&amp;apos;&amp;apos;
    m冒泡排序算法
    :param array:
    :return:count: 5000 time: 3.825218915939331
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for i in range(len(array)):
        for j in range(len(array) - 1 - i):
            big_temp = j
            if array[big_temp] &amp;gt; array[j + 1]:
                big_temp = j + 1
        temp = array[big_temp]
        array[i] = array[big_temp]
        array[big_temp] = temp
        count += 1
    print(&amp;quot;count:&amp;quot;, count)
    print(&amp;quot;array:&amp;quot;, array)


if __name__ == &amp;apos;__main__&amp;apos;:
    array = []
    for i in range(5000):
        array.append(random.randrange(1000))

    time_start = time.time()
    bubble_up2(array)
    time_end = time.time()
    #
    print(array[0:100])
    print(&amp;quot;time:&amp;quot;,time_end - time_start)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、-选择排序&quot;&gt;&lt;a href=&quot;#二、-选择排序&quot; class=&quot;headerlink&quot; title=&quot;二、 选择排序&quot;&gt;&lt;/a&gt;二、 选择排序&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;def select1(array):
    &amp;apos;&amp;apos;&amp;apos;
    选择排序算法v1
    :param array:
    :return:count: 1996750 time: 3.2961885929107666
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for i in range(len(array)):
        for j in range(i,len(array)):
            if array[i] &amp;gt; array[j]:
                temp = array[j]
                array[j] = array[i]
                array[i] = temp
                count += 1
    print(&amp;quot;count:&amp;quot;,count)
    print(&amp;quot;array:&amp;quot;,array)

def select2(array):
    &amp;apos;&amp;apos;&amp;apos;
    选择排序算法v2
    :param array:
    :return:count: 5000 time: 2.4801418781280518
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for i in range(len(array)):
        smallest_index = i
        for j in range(i,len(array)):
            if array[smallest_index] &amp;gt; array[j]:
                smallest_index = j
        temp = array[smallest_index]
        array[smallest_index] = array[i]
        array[i] = temp
        count += 1
    print(&amp;quot;count:&amp;quot;,count)
    print(&amp;quot;array:&amp;quot;,array)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、直接插入排序算法&quot;&gt;&lt;a href=&quot;#三、直接插入排序算法&quot; class=&quot;headerlink&quot; title=&quot;三、直接插入排序算法&quot;&gt;&lt;/a&gt;三、直接插入排序算法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;def insert1(array):
    &amp;apos;&amp;apos;&amp;apos;
    插入排序算法
    :param array:
    :return: count: 4999 time: 3.685210704803467
    &amp;apos;&amp;apos;&amp;apos;
    count = 0
    for index in range(1, len(array)):
        current_val = array[index]  # 先记下来每次大循环走到的第几个元素的值
        position = index

        while position &amp;gt; 0 and array[
                    position - 1] &amp;gt; current_val:  # 当前元素的左边的紧靠的元素比它大,要把左边的元素一个一个的往右移一位,给当前这个值插入到左边挪一个位置出来
            array[position] = array[position - 1]  # 把左边的一个元素往右移一位
            position -= 1  # 只一次左移只能把当前元素一个位置 ,还得继续左移只到此元素放到排序好的列表的适当位置 为止

        array[position] = current_val  # 已经找到了左边排序好的列表里不小于current_val的元素的位置,把current_val放在这里
        count += 1
    print(&amp;quot;count:&amp;quot;, count)
    print(array)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、快速排序&quot;&gt;&lt;a href=&quot;#四、快速排序&quot; class=&quot;headerlink&quot; title=&quot;四、快速排序&quot;&gt;&lt;/a&gt;四、快速排序&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;def quick_sort(array,start,end):
    &amp;apos;&amp;apos;&amp;apos;
    快速排序算法
    :param array:
    :param start:
    :param end:
    :return:time: 0.03600192070007324
    &amp;apos;&amp;apos;&amp;apos;
    if start &amp;gt;= end:
        return
    k = array[start]
    left_flag = start
    right_flag = end
    while left_flag &amp;lt; right_flag:
        while array[right_flag] &amp;gt; k:
            right_flag -= 1
        temp = array[right_flag]
        array[left_flag] = array[right_flag]
        array[right_flag] = temp

        while array[left_flag] &amp;lt;= k:
            left_flag += 1
        temp = array[left_flag]
        array[left_flag] = array[right_flag]
        array[right_flag] = temp

    quick_sort(array,start,left_flag - 1)
    quick_sort(array,left_flag + 1,end)
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5474411.html&quot; title=&quot;常用算法设计&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day16</title>
    <link href="http://blog.songqingbo.cn/2016/05/07/s12-20160507-day16/"/>
    <id>http://blog.songqingbo.cn/2016/05/07/s12-20160507-day16/</id>
    <published>2016-05-07T07:30:00.000Z</published>
    <updated>2016-07-07T01:55:09.382Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5457672.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5457672.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Django起步&quot;&gt;&lt;a href=&quot;#一、Django起步&quot; class=&quot;headerlink&quot; title=&quot;一、Django起步&quot;&gt;&lt;/a&gt;一、Django起步&lt;/h2&gt;&lt;h3 id=&quot;1-创建Django项目&quot;&gt;&lt;a href=&quot;#1-创建Django项目&quot; class=&quot;headerlink&quot; title=&quot;1.创建Django项目&quot;&gt;&lt;/a&gt;1.创建Django项目&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;两种方式：使用pycharm工具进行创建
         使用manage命令进行创建
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/UKdz7aG.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-url设计&quot;&gt;&lt;a href=&quot;#2-url设计&quot; class=&quot;headerlink&quot; title=&quot;2.url设计&quot;&gt;&lt;/a&gt;2.url设计&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/2y2zgI4.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-views视图设计&quot;&gt;&lt;a href=&quot;#3-views视图设计&quot; class=&quot;headerlink&quot; title=&quot;3.views视图设计&quot;&gt;&lt;/a&gt;3.views视图设计&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/M1xkgkw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/UsZ5fay.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4-Template版本设计&quot;&gt;&lt;a href=&quot;#4-Template版本设计&quot; class=&quot;headerlink&quot; title=&quot;4.Template版本设计&quot;&gt;&lt;/a&gt;4.Template版本设计&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LLavnYW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、Template模板渲染&quot;&gt;&lt;a href=&quot;#二、Template模板渲染&quot; class=&quot;headerlink&quot; title=&quot;二、Template模板渲染&quot;&gt;&lt;/a&gt;二、Template模板渲染&lt;/h2&gt;&lt;h3 id=&quot;1-调用后端传递的数据&quot;&gt;&lt;a href=&quot;#1-调用后端传递的数据&quot; class=&quot;headerlink&quot; title=&quot;1.调用后端传递的数据&quot;&gt;&lt;/a&gt;1.调用后端传递的数据&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;h3&amp;gt;username:&amp;#123;&amp;#123;user_obj.username&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;h3&amp;gt;E-mail:&amp;#123;&amp;#123;user_obj.email&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-使用for循环进行遍历数据&quot;&gt;&lt;a href=&quot;#2-使用for循环进行遍历数据&quot; class=&quot;headerlink&quot; title=&quot;2.使用for循环进行遍历数据&quot;&gt;&lt;/a&gt;2.使用for循环进行遍历数据&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;url&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% for user_info in user_obj %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% endfor %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/url&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-使用if进行相关条件判断&quot;&gt;&lt;a href=&quot;#3-使用if进行相关条件判断&quot; class=&quot;headerlink&quot; title=&quot;3.使用if进行相关条件判断&quot;&gt;&lt;/a&gt;3.使用if进行相关条件判断&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;url&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;% for user_info in user_obj %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#123;#  &amp;#123;% if user_info.username == &amp;quot;swht&amp;quot; %&amp;#125;#&amp;#125; &amp;lt;!--可以直接判断某个字符串，然后进行处理--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    	&amp;#123;% if forloop.counter0|divisibleby:&amp;quot;2&amp;quot; %&amp;#125; &amp;lt;!--使用forloop。counter参数获取遍历的当前数字。counter0是从0开始的索引值，divisibleby:&amp;quot;2&amp;quot;是指能够被2整除--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        	&amp;lt;li style=&amp;quot;background-color: aqua&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;% else %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;% endif %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   	&amp;#123;% endfor %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/url&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-模板的继承与复用&quot;&gt;&lt;a href=&quot;#4-模板的继承与复用&quot; class=&quot;headerlink&quot; title=&quot;4.模板的继承与复用&quot;&gt;&lt;/a&gt;4.模板的继承与复用&lt;/h3&gt;&lt;p&gt;使用主页的头部进行继承，然后将主体进行重写&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;index.html
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% block header-menu %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;ul &amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li style=&amp;quot;display: inline-block&amp;quot;&amp;gt;Home&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li style=&amp;quot;display: inline-block&amp;quot;&amp;gt;page1&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li style=&amp;quot;display: inline-block&amp;quot;&amp;gt;page2&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;li style=&amp;quot;display: inline-block&amp;quot;&amp;gt;page3&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% endblock %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% block content-container %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;h2&amp;gt;这是文章的首页&amp;lt;/h2&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!--&amp;lt;h3&amp;gt;username:&amp;#123;&amp;#123;user_obj.username&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;!--&amp;lt;h3&amp;gt;E-mail:&amp;#123;&amp;#123;user_obj.email&amp;#125;&amp;#125;&amp;lt;/h3&amp;gt;--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;url&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;% for user_info in user_obj %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;#            &amp;#123;% if user_info.username == &amp;quot;swht&amp;quot; %&amp;#125;#&amp;#125; &amp;lt;!--可以直接判断某个字符串，然后进行处理--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;% if forloop.counter0|divisibleby:&amp;quot;2&amp;quot; %&amp;#125; &amp;lt;!--使用forloop。counter参数获取遍历的当前数字。counter0是从0开始的索引值，divisibleby:&amp;quot;2&amp;quot;是指能够被2整除--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;li style=&amp;quot;background-color: aqua&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;% else %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;lt;li style=&amp;quot;&amp;quot;&amp;gt;username:&amp;#123;&amp;#123;user_info.username&amp;#125;&amp;#125;,E-mail:&amp;#123;&amp;#123;user_info.email&amp;#125;&amp;#125;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#123;% endif %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#123;% endfor %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/url&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;% endblock %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;year.html
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% extends &amp;apos;article/index.html&amp;apos; %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% block content-container %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;h1&amp;gt;这是&amp;#123;&amp;#123; year_obj.year &amp;#125;&amp;#125;年的文章&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblock %&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% extends &amp;apos;article/index.html&amp;apos; %&amp;#125; 语法是继承主页的所有属性&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% block content-container %&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;% endblock%&amp;#125;  语法说明该语块是可以被重写的&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;模板的继承和重写支持：子继承父、孙继承子&lt;/p&gt;
&lt;h2 id=&quot;三、配置文件&quot;&gt;&lt;a href=&quot;#三、配置文件&quot; class=&quot;headerlink&quot; title=&quot;三、配置文件&quot;&gt;&lt;/a&gt;三、配置文件&lt;/h2&gt;&lt;h3 id=&quot;1-setting文件说明&quot;&gt;&lt;a href=&quot;#1-setting文件说明&quot; class=&quot;headerlink&quot; title=&quot;1.setting文件说明&quot;&gt;&lt;/a&gt;1.setting文件说明&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))  指定了当前项目文件的基础路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SECRET_KEY = &amp;apos;-i6p7t+w6@&amp;amp;duki)8s88tf=_ms%@z8fz4_5g@vhvzp@tij36w$&amp;apos; django通信KEY，我们一般不需要进行修改&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DEBUG = True  #选项为True时，属于开发环境，当遇到错误时会弹出默认的提示大黄页，当选项为False时，属于生产环境，需要下面的关键字进行配合设置&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ALLOWED_HOSTS = [] #当DEBUG = False时，ALLOWED_HOSTS = [*]，即允许所有主机访问，当访问的资源不存在时，默认会返回默认的404页面提示&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;INSTALLED_APPS=[] #这里需要配置我们安装的应用的名称&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TEMPLATES = [] #这里指定项目模板的路径，一般不需要修改，但也可以自定义路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DATABASES = &amp;#123;&amp;#125; #这里默认使用sqlite3数据库进行存储，我们可以修改成支持的其他数据库类型&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;TIME_ZONE = &amp;apos;Asia/Shanghai&amp;apos; #这里的时区参数需要选择上海时区&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-设置mysql数据库配置&quot;&gt;&lt;a href=&quot;#2-设置mysql数据库配置&quot; class=&quot;headerlink&quot; title=&quot;2.设置mysql数据库配置&quot;&gt;&lt;/a&gt;2.设置mysql数据库配置&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;DATABASES = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;apos;default&amp;apos;:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;ENGINE&amp;apos;:&amp;apos;django.db.backends.mysql&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;NAME&amp;apos;:&amp;apos;blog&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;HOST&amp;apos;:&amp;apos;127.0.0.1&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;PORT&amp;apos;:&amp;apos;3306&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;USER&amp;apos;:&amp;apos;root&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;apos;PASSWORD&amp;apos;:&amp;apos;&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Windows下面安装mysql环境：http://www.cnblogs.com/songqingbo/p/5080847.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;创建所需的数据库：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	create database blog charset utf8;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-mysql数据库初始化&quot;&gt;&lt;a href=&quot;#3-mysql数据库初始化&quot; class=&quot;headerlink&quot; title=&quot;3.mysql数据库初始化&quot;&gt;&lt;/a&gt;3.mysql数据库初始化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;models
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class Author(models.Model):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    first_name = models.CharField(max_length=32)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    last_name = models.CharField(max_length=32)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    email = models.EmailField()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def __unicode__(self):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return &amp;quot;&amp;lt;%s %s&amp;gt;&amp;quot; %(self.first_name,self.last_name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    class Meta:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        verbose_name_plural = u&amp;quot;作者&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    #def __str__()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Publisher(models.Model):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = models.CharField(max_length=64,unique=True)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    address = models.CharField(max_length=128,null=True,blank=True)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    city = models.CharField(max_length=64)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    state_province = models.CharField(max_length=30,help_text=&amp;quot;put your country code here..&amp;quot;,verbose_name=u&amp;quot;所属省&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    country = models.CharField(max_length=50,editable=False)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    website = models.URLField()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def __unicode__(self):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return &amp;quot;&amp;lt;%s&amp;gt;&amp;quot; %(self.name)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;class Book(models.Model):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name = models.CharField(max_length=128)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    authors = models.ManyToManyField(Author)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publisher = models.ForeignKey(Publisher)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    #publish_date = models.DateTimeField&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    publish_date = models.DateField()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    def __unicode__(self):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        return &amp;quot;&amp;lt;%s&amp;gt;&amp;quot; %(self.name)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于django需要MySQLdb进行连接mysql数据库，需要安装MySQLdb模块和vc++ for python2.7环境包。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;python2 manage.py makemigrations  #生成数据库创建表文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Migrations for &amp;apos;article&amp;apos;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  0001_initial.py:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    - Create model Author&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    - Create model Book&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    - Create model Publisher&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	    - Add field publisher to book&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;python2 manage.py migrate #将表结构写入数据库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Operations to perform:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Apply all migrations: admin, article, contenttypes, auth, sessions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Running migrations:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Rendering model states... DONE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying contenttypes.0001_initial... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0001_initial... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying admin.0001_initial... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying admin.0002_logentry_remove_auto_add... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying article.0001_initial... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying contenttypes.0002_remove_content_type_name... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0002_alter_permission_name_max_length... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0003_alter_user_email_max_length... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0004_alter_user_username_opts... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0005_alter_user_last_login_null... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0006_require_contenttypes_0002... OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  Applying auth.0007_alter_validators_add_error_messages... OK&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;4-创建后台用户&quot;&gt;&lt;a href=&quot;#4-创建后台用户&quot; class=&quot;headerlink&quot; title=&quot;4.创建后台用户&quot;&gt;&lt;/a&gt;4.创建后台用户&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;admin.py&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	#增加下面的语句作用是使用admin后台进行数据库的管理操作&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	import models&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	admin.site.register(models.Author)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	admin.site.register(models.Book)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	admin.site.register(models.Publisher)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;python2 manage.py createsuperuser #创建一个超级用户&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Foh6exY.png&quot; alt=&quot;Django后台增加数据&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;四、使用django命令对数据库进行基础操作&quot;&gt;&lt;a href=&quot;#四、使用django命令对数据库进行基础操作&quot; class=&quot;headerlink&quot; title=&quot;四、使用django命令对数据库进行基础操作&quot;&gt;&lt;/a&gt;四、使用django命令对数据库进行基础操作&lt;/h2&gt;&lt;h3 id=&quot;1-进入python-django-shell&quot;&gt;&lt;a href=&quot;#1-进入python-django-shell&quot; class=&quot;headerlink&quot; title=&quot;1. 进入python django shell&quot;&gt;&lt;/a&gt;1. 进入python django shell&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;shell&amp;gt;&amp;gt;python2 manage.py shell
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-查询数据&quot;&gt;&lt;a href=&quot;#2-查询数据&quot; class=&quot;headerlink&quot; title=&quot;2. 查询数据&quot;&gt;&lt;/a&gt;2. 查询数据&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt;from article.models import Publisher

\&amp;gt;&amp;gt;&amp;gt;publisher_list = Publisher.objects.all() #查询所有的出版社列表

\&amp;gt;&amp;gt;&amp;gt;publisher_list[1].name  #查询第2个出版社的名称

\&amp;gt;&amp;gt;&amp;gt;publisher_list[1].id  #查询第2个出版社的id
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-增加一条数据&quot;&gt;&lt;a href=&quot;#3-增加一条数据&quot; class=&quot;headerlink&quot; title=&quot;3. 增加一条数据&quot;&gt;&lt;/a&gt;3. 增加一条数据&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; p1 = Publisher.objects.create(name=&amp;apos;SWht&amp;apos;,address=&amp;apos;haidian&amp;apos;,city=&amp;apos;beijing&amp;apos;,state_province=&amp;apos;CA&amp;apos;,country=&amp;apos;CN&amp;apos;,website=&amp;apos;http://www.songqingbo.cn&amp;apos;)

\&amp;gt;&amp;gt;&amp;gt;p2 = Publisher(name=&amp;apos;SWht2&amp;apos;,address=&amp;apos;haidian1&amp;apos;,city=&amp;apos;beijing&amp;apos;,state_province=&amp;apos;CA&amp;apos;,country=&amp;apos;CN&amp;apos;,website=&amp;apos;http://www.songqingbo.cn&amp;apos;)

\&amp;gt;&amp;gt;&amp;gt;p2.save()  #增加数据两种方式，1.使用对象的objects的create方法进行数据的创建，2.使用对象的save方法进行数据的保存。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-数据库过滤查询&quot;&gt;&lt;a href=&quot;#4-数据库过滤查询&quot; class=&quot;headerlink&quot; title=&quot;4. 数据库过滤查询&quot;&gt;&lt;/a&gt;4. 数据库过滤查询&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; from article.models import Author

\&amp;gt;&amp;gt;&amp;gt; author_list = Author.objects.all()

\&amp;gt;&amp;gt;&amp;gt; author_list

[&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;, &amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;]

\&amp;gt;&amp;gt;&amp;gt; Author.objects.filter(first_name=&amp;apos;shen&amp;apos;)

[&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-获取单个对象&quot;&gt;&lt;a href=&quot;#5-获取单个对象&quot; class=&quot;headerlink&quot; title=&quot;5. 获取单个对象&quot;&gt;&lt;/a&gt;5. 获取单个对象&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; Author.objects.get(first_name=&amp;apos;shen&amp;apos;)

&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;

\&amp;gt;&amp;gt;&amp;gt; Author.objects.get(id=&amp;apos;1&amp;apos;)

&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;

\&amp;gt;&amp;gt;&amp;gt; Author.objects.get(id=&amp;apos;2&amp;apos;)

&amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;

注意：如果查询没有返回结果也会抛出异常
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-数据排序&quot;&gt;&lt;a href=&quot;#6-数据排序&quot; class=&quot;headerlink&quot; title=&quot;6. 数据排序&quot;&gt;&lt;/a&gt;6. 数据排序&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; Author.objects.order_by(&amp;quot;first_name&amp;quot;)

[&amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;, &amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;]

\&amp;gt;&amp;gt;&amp;gt; Author.objects.order_by(&amp;quot;id&amp;quot;)

[&amp;lt;Author: &amp;lt;shen test&amp;gt;&amp;gt;, &amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;7-数据更新&quot;&gt;&lt;a href=&quot;#7-数据更新&quot; class=&quot;headerlink&quot; title=&quot;7. 数据更新&quot;&gt;&lt;/a&gt;7. 数据更新&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; author = Author.objects.get(last_name=&amp;apos;test&amp;apos;)

\&amp;gt;&amp;gt;&amp;gt; author.last_name = &amp;apos;diaoxia&amp;apos;

\&amp;gt;&amp;gt;&amp;gt; author.save()

\&amp;gt;&amp;gt;&amp;gt; Author.objects.all()

[&amp;lt;Author: &amp;lt;shen diaoxia&amp;gt;&amp;gt;, &amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;8-删除对象&quot;&gt;&lt;a href=&quot;#8-删除对象&quot; class=&quot;headerlink&quot; title=&quot;8. 删除对象&quot;&gt;&lt;/a&gt;8. 删除对象&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;\&amp;gt;&amp;gt;&amp;gt; author = Author.objects.get(first_name=&amp;apos;alix&amp;apos;)

\&amp;gt;&amp;gt;&amp;gt; author

&amp;lt;Author: &amp;lt;alix sds&amp;gt;&amp;gt;

\&amp;gt;&amp;gt;&amp;gt; author.delete()

(2L, {u&amp;apos;article.Book_authors&amp;apos;: 1L, u&amp;apos;article.Author&amp;apos;: 1L})

\&amp;gt;&amp;gt;&amp;gt; Author.objects.all()

[&amp;lt;Author: &amp;lt;shen diaoxia&amp;gt;&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5457672.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ww
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day15</title>
    <link href="http://blog.songqingbo.cn/2016/04/30/s12-20160430-day15/"/>
    <id>http://blog.songqingbo.cn/2016/04/30/s12-20160430-day15/</id>
    <published>2016-04-30T07:30:00.000Z</published>
    <updated>2016-07-07T01:59:02.606Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/4491246.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/4491246.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/4508271.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/4508271.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、前端设计&quot;&gt;&lt;a href=&quot;#一、前端设计&quot; class=&quot;headerlink&quot; title=&quot;一、前端设计&quot;&gt;&lt;/a&gt;一、前端设计&lt;/h2&gt;&lt;h3 id=&quot;1-实现图片轮播&quot;&gt;&lt;a href=&quot;#1-实现图片轮播&quot; class=&quot;headerlink&quot; title=&quot;1.实现图片轮播&quot;&gt;&lt;/a&gt;1.实现图片轮播&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;js下载地址：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	http://bxslider.com/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;引入&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- jQuery library (served from Google) --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&amp;quot;//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- bxSlider Javascript file --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;script src=&amp;quot;/js/jquery.bxslider.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;!-- bxSlider CSS file --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;link href=&amp;quot;/lib/jquery.bxslider.css&amp;quot; rel=&amp;quot;stylesheet&amp;quot; /&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;加载图片：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;ul class=&amp;quot;bxslider&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;/images/pic1.jpg&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;/images/pic2.jpg&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;/images/pic3.jpg&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  &amp;lt;li&amp;gt;&amp;lt;img src=&amp;quot;/images/pic4.jpg&amp;quot; /&amp;gt;&amp;lt;/li&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;lt;/ul&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;调用：	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	$(document).ready(function()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	  $(&amp;apos;.bxslider&amp;apos;).bxSlider();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-图标资源&quot;&gt;&lt;a href=&quot;#2-图标资源&quot; class=&quot;headerlink&quot; title=&quot;2.图标资源&quot;&gt;&lt;/a&gt;2.图标资源&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Font Awesome
   http://fontawesome.io/
   a、图片，自己找图片，挖洞
   b、现成的图标
       css
       使用样式
       --以前版本
           css
           图片库
           使用样式
       -- 现在
           css
           字体文件
           使用样式
   c、css
       字体文件
       样式
   =====》 大图片
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-伪类&quot;&gt;&lt;a href=&quot;#3-伪类&quot; class=&quot;headerlink&quot; title=&quot;3.伪类&quot;&gt;&lt;/a&gt;3.伪类&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;响应式&amp;lt;/title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;style&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        @media (min-width: 768px) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            .lead &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                background-color: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .c1 &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            background-color: green;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .clearfix:after &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            content: &amp;quot;.&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            clear: both;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            visibility: hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/style&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;dev class=&amp;quot;lead&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        我们都是中国人&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/dev&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;div class=&amp;quot;c1 clearfix&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;div style=&amp;quot;float: right;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            你好&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;lt;div style=&amp;quot;float: right;&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;             china&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &amp;lt;!--&amp;lt;div style=&amp;quot;clear: both&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;--&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二、web框架&quot;&gt;&lt;a href=&quot;#二、web框架&quot; class=&quot;headerlink&quot; title=&quot;二、web框架&quot;&gt;&lt;/a&gt;二、web框架&lt;/h2&gt;&lt;h3 id=&quot;1-python-web框架分类&quot;&gt;&lt;a href=&quot;#1-python-web框架分类&quot; class=&quot;headerlink&quot; title=&quot;1.python web框架分类&quot;&gt;&lt;/a&gt;1.python web框架分类&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
#coding:utf-8

import socket

def handle_request(client):
    buf = client.recv(1024)
    client.send(&amp;quot;HTTP/1.1 200 OK\r\n\r\n&amp;quot;)
    client.send(&amp;quot;Hello, Seven&amp;quot;)

def main():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind((&amp;apos;localhost&amp;apos;,8000))
    sock.listen(5)

    while True:
        connection, address = sock.accept()
        handle_request(connection)
        connection.close()

if __name__ == &amp;apos;__main__&amp;apos;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-MVC-web框架&quot;&gt;&lt;a href=&quot;#2-MVC-web框架&quot; class=&quot;headerlink&quot; title=&quot;2.MVC web框架&quot;&gt;&lt;/a&gt;2.MVC web框架&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;MVC：Models  Views Controllers

        数据库操作 模板  处理请求的函数
代码块的归类结构

MTV：Models Templates Views

    数据库操作 模板  处理请求的函数
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-Django基础&quot;&gt;&lt;a href=&quot;#3-Django基础&quot; class=&quot;headerlink&quot; title=&quot;3.Django基础&quot;&gt;&lt;/a&gt;3.Django基础&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Django框架属于MTV框架。程序需要的操作的：
    1.models
    2.Templates
    3.Views
    4.urls
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、Django&quot;&gt;&lt;a href=&quot;#三、Django&quot; class=&quot;headerlink&quot; title=&quot;三、Django&quot;&gt;&lt;/a&gt;三、Django&lt;/h2&gt;&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; title=&quot;1.安装&quot;&gt;&lt;/a&gt;1.安装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;pip install django 1.9.5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-创建Django程序框架&quot;&gt;&lt;a href=&quot;#2-创建Django程序框架&quot; class=&quot;headerlink&quot; title=&quot;2.创建Django程序框架&quot;&gt;&lt;/a&gt;2.创建Django程序框架&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;使用命令创建
    django-admin startproject demo 创建projects
    cd demo
    python manage.py startapp app0 创建应用
使用pycharm进行创建项目和应用
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-执行程序&quot;&gt;&lt;a href=&quot;#3-执行程序&quot; class=&quot;headerlink&quot; title=&quot;3.执行程序&quot;&gt;&lt;/a&gt;3.执行程序&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;进入项目， python manage.py runserver 127.0.0.1：8000
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-创建数据表&quot;&gt;&lt;a href=&quot;#4-创建数据表&quot; class=&quot;headerlink&quot; title=&quot;4.创建数据表&quot;&gt;&lt;/a&gt;4.创建数据表&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;python manage.py makemigrations #生成配置文件
python manage.py migrate       #根据配置文件创建数据库相关 表
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-django默认后台管理&quot;&gt;&lt;a href=&quot;#5-django默认后台管理&quot; class=&quot;headerlink&quot; title=&quot;5.django默认后台管理&quot;&gt;&lt;/a&gt;5.django默认后台管理&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;创建超级用户名 python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-路由系统&quot;&gt;&lt;a href=&quot;#6-路由系统&quot; class=&quot;headerlink&quot; title=&quot;6.路由系统&quot;&gt;&lt;/a&gt;6.路由系统&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;静态路由
动态路由
    安照顺序，第n个匹配的数据交给函数的第n个参数，严格按照顺序
        url(r&amp;apos;^page/（\d+)/(\d+)&amp;apos;,views.page)
    模板的方法，将匹配的参数，传给指定的形式参数
        url(r&amp;apos;^page/(?P&amp;lt;n1&amp;gt;\d+)/(?P&amp;lt;n2&amp;gt;\d+)&amp;apos;,views.page)
二级路由
    app01
        urls.py
    project name 
        URL：app01 -&amp;gt;include（&amp;quot;app01.urls&amp;quot;）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QbaeTDM.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-基本数据库操作&quot;&gt;&lt;a href=&quot;#7-基本数据库操作&quot; class=&quot;headerlink&quot; title=&quot;7.基本数据库操作&quot;&gt;&lt;/a&gt;7.基本数据库操作&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;ORM框架
    code first
        自己写类 --&amp;gt;数据库表
    db first
        自己写命令操作数据库--&amp;gt;更新类
    使用类进行数据操作

创建类
    from django.db import models
    class UserInfo(models.Model):
        username = models.CharField(max_length=32)
        password = models.CharField(max_length=32)
        age = models.IntegerField()

配置
    setting
        INSTALLED_APPS = [
            &amp;apos;django.contrib.admin&amp;apos;,
            &amp;apos;django.contrib.auth&amp;apos;,
            &amp;apos;django.contrib.contenttypes&amp;apos;,
            &amp;apos;django.contrib.sessions&amp;apos;,
            &amp;apos;django.contrib.messages&amp;apos;,
            &amp;apos;django.contrib.staticfiles&amp;apos;,
            &amp;apos;app01&amp;apos;,
        ]
使用命令根据类创建表
    python manage.py makemigrations #生成配置文件
    python manage.py migrate       #根据配置文件创建数据库相关 表
默认表名：
    appname_classname

d. 
    views中导入models

e.
    POST提交数据
        settings里操作：
            MIDDLEWARE_CLASSES = [
                &amp;apos;django.middleware.security.SecurityMiddleware&amp;apos;,
                &amp;apos;django.contrib.sessions.middleware.SessionMiddleware&amp;apos;,
                &amp;apos;django.middleware.common.CommonMiddleware&amp;apos;,
               # &amp;apos;django.middleware.csrf.CsrfViewMiddleware&amp;apos;,
                &amp;apos;django.contrib.auth.middleware.AuthenticationMiddleware&amp;apos;,
                &amp;apos;django.contrib.auth.middleware.SessionAuthenticationMiddleware&amp;apos;,
                &amp;apos;django.contrib.messages.middleware.MessageMiddleware&amp;apos;,
                &amp;apos;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;apos;,
            ]
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/4491246.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day14</title>
    <link href="http://blog.songqingbo.cn/2016/04/21/s12-20160421-day14/"/>
    <id>http://blog.songqingbo.cn/2016/04/21/s12-20160421-day14/</id>
    <published>2016-04-21T07:30:00.000Z</published>
    <updated>2016-07-05T10:30:05.747Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5369773.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5369773.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.php100.com/manual/jquery/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.php100.com/manual/jquery/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;JQuery&quot;&gt;&lt;a href=&quot;#JQuery&quot; class=&quot;headerlink&quot; title=&quot;JQuery&quot;&gt;&lt;/a&gt;JQuery&lt;/h2&gt;&lt;h3 id=&quot;1-查找&quot;&gt;&lt;a href=&quot;#1-查找&quot; class=&quot;headerlink&quot; title=&quot;1.查找&quot;&gt;&lt;/a&gt;1.查找&lt;/h3&gt;&lt;h4 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$(&amp;apos;#nid&amp;apos;)  根据id找到某个标签
$(&amp;apos;.nid&amp;apos;)  根据class查找
$(&amp;apos;.nid div #nid&amp;apos;)  根据class查找下面的div标签下面的id
$(&amp;apos;.nid,div,#nid&amp;apos;)  查找到class或div或id条件的查找到
$(&amp;apos;li:eq(0)&amp;apos;)  查到到第一个li标签行
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;筛选器&quot;&gt;&lt;a href=&quot;#筛选器&quot; class=&quot;headerlink&quot; title=&quot;筛选器&quot;&gt;&lt;/a&gt;筛选器&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;$(&amp;apos;li&amp;apos;).eq(0)  查到到第一个li标签行
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-操作&quot;&gt;&lt;a href=&quot;#2-操作&quot; class=&quot;headerlink&quot; title=&quot;2.操作&quot;&gt;&lt;/a&gt;2.操作&lt;/h2&gt;&lt;p&gt;属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;添加指定属性，并删除兄弟的属性
 $(ths).addClass(&amp;apos;current&amp;apos;).siblings().removeClass(&amp;apos;current&amp;apos;);

attr：
    其他所有标签都适用，除checkbox、redio之外
prop：
    checkbox、redio

jQuery循环：

    var userList = [&amp;apos;swht&amp;apos;,&amp;apos;shen&amp;apos;,&amp;apos;test&amp;apos;];
    $.each(userList,fun(i,item){
        console.log(i,item);
    })    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h3&gt;&lt;p&gt;文档处理&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;增加
append(content|fn)
    在指定的标签内部后面追加
appendTo(content)
    把指定的某个标签追加某个标签内部后面
prepend(content|fn)
    在指定的标签内部前面追加
prependTo(content)
    把指定的某个标签追加某个标签内部前面
包裹
wrap(html|ele|fn)
unwrap()
wrapAll(html|ele)
wrapInner(html|ele|fn)

删除
empty()
remove([expr])
detach([expr])
复制
clone([Even[,deepEven]])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;绑定事件：
    1. 直接绑定ready(fn) 文本加载完之后执行事件绑定
        1. $(document).ready(function(){

            })
        2. $(function(){

            })
    2. 委派delegate(s,[t],[d],fn)
        1. $(&amp;apos;ul&amp;apos;).delegate(&amp;apos;li&amp;apos;,&amp;apos;click&amp;apos;,function(){

           })

    3. bind(type,[data],fn)
        1. $(&amp;apos;li&amp;apos;).click(function(){

            })
        2. $(&amp;apos;li&amp;apos;).bind(&amp;apos;click&amp;apos;)
        3. unbind
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;AJAX&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;异步的javascript和xml
ajax是对javascript和Dom的封装。
ajax容易出现跨域的问题。
$.ajax({
    url:&amp;quot;&amp;quot;,
    data:{},
    type:&amp;quot;&amp;quot;,
    dateType:&amp;quot;&amp;quot;,
    jsonp:&amp;quot;&amp;quot;,
    jsonpCallback:&amp;quot;&amp;quot;,
    sucess:function(){},
    error:function(){}
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;JQuery扩展&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(function(arg){
    arg.extend({
      qinghua: function() {
        return &amp;quot;SB&amp;quot;;
      },
      qinghua1: function() {
        return this.each(function() { this.checked = false; });
      }
    });

    arg.fn.extend({
       sanjiang:function(){
           return &amp;quot;DSB&amp;quot;
       }
    });
})(jQuery);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他&lt;/p&gt;
&lt;p&gt;30款最好的 Bootstrap 3.0 免费主题和模板&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/lhb25/p/30-free-bootstrap-templates.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/lhb25/p/30-free-bootstrap-templates.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tab菜单

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;tab&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        .tab-box .box-menu{
            background-color: #DDDDDD;
            border: 1px solid #DDDDDD;
            height: 33px;
            line-height: 33px;
        }
        .box-menu a{
            border-right: 1px solid #664747;
            padding: 10px;
            background-color: #425a66;;
        }
        .tab-box .box-body{
            border: 1px solid #dddddd;
        }
        .hide{
            display: none;
        }
         .current{
            background-color: white;
            color: black;
            border-top: 2px solid red;
        }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;tab-box&amp;quot;&amp;gt;
        &amp;lt;div class=&amp;quot;box-menu&amp;quot;&amp;gt;
            &amp;lt;!--所有菜单--&amp;gt;
            &amp;lt;a menu1=&amp;quot;c1&amp;quot; onclick=&amp;quot;ChangeTab(this);&amp;quot; class=&amp;quot;current&amp;quot;&amp;gt;菜单一&amp;lt;/a&amp;gt;
            &amp;lt;a menu1=&amp;quot;c2&amp;quot; onclick=&amp;quot;ChangeTab(this);&amp;quot;&amp;gt;菜单二&amp;lt;/a&amp;gt;
            &amp;lt;a menu1=&amp;quot;c3&amp;quot; onclick=&amp;quot;ChangeTab(this);&amp;quot;&amp;gt;菜单三&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;quot;box-body&amp;quot;&amp;gt;
            &amp;lt;!--所有内容--&amp;gt;
            &amp;lt;div id=&amp;quot;c1&amp;quot;&amp;gt;内容一&amp;lt;/div&amp;gt;
            &amp;lt;div id=&amp;quot;c2&amp;quot; class=&amp;quot;hide&amp;quot;&amp;gt;内容二&amp;lt;/div&amp;gt;
            &amp;lt;div id=&amp;quot;c3&amp;quot; class=&amp;quot;hide&amp;quot;&amp;gt;内容三&amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;script src=&amp;quot;jquery-2.2.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        function ChangeTab(ths){
            $(ths).addClass(&amp;apos;current&amp;apos;).siblings().removeClass(&amp;apos;current&amp;apos;);
            var contentId = $(ths).attr(&amp;apos;menu1&amp;apos;);
            var temp = &amp;quot;#&amp;quot; + contentId;
            $(temp).removeClass(&amp;apos;hide&amp;apos;).siblings().addClass(&amp;apos;hide&amp;apos;);

        }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;


全选、反选、取消

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;全选、反选、取消&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;全选&amp;quot; onclick=&amp;quot;selectAll();&amp;quot; /&amp;gt;
        &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;反选&amp;quot; onclick=&amp;quot;selectInvert();&amp;quot; /&amp;gt;
        &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;取消&amp;quot; onclick=&amp;quot;clearAll();&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;table border=&amp;quot;1&amp;quot;&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;input type=&amp;quot;checkbox&amp;quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一章
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一篇
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;input type=&amp;quot;checkbox&amp;quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第二章
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一篇
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;input type=&amp;quot;checkbox&amp;quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                   第三章
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一篇
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;
                    &amp;lt;input type=&amp;quot;checkbox&amp;quot; /&amp;gt;
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                   第四章
                &amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;
                    第一篇
                &amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/table&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script src=&amp;quot;jquery-2.2.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        function selectAll(){
            $(&amp;quot;table input[type=&amp;apos;checkbox&amp;apos;]&amp;quot;).prop(&amp;apos;checked&amp;apos;,true);
        }
        function selectInvert(){
            $(&amp;quot;table input[type=&amp;apos;checkbox&amp;apos;]&amp;quot;).each(function(){
               var isChecked = $(this).prop(&amp;apos;checked&amp;apos;);
                if(isChecked){
                    $(this).prop(&amp;apos;checked&amp;apos;,false);
                }else{
                    $(this).prop(&amp;apos;checked&amp;apos;,true);
                }
            });
        }
        function clearAll(){
            $(&amp;quot;table input[type=&amp;apos;checkbox&amp;apos;]&amp;quot;).prop(&amp;apos;checked&amp;apos;,false);
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;


ajax_jsonp

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;ajax_jsonp&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;获取电视节目&amp;quot; onclick=&amp;quot;Ajax_jsonp();&amp;quot;/&amp;gt;
    &amp;lt;dev id=&amp;quot;contaner&amp;quot;&amp;gt;

    &amp;lt;/dev&amp;gt;
    &amp;lt;script src=&amp;quot;jquery-2.2.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script&amp;gt;
        function Ajax_jsonp(){
            $.ajax({
                url:&amp;quot;http://www.jxntv.cn/data/jmd-jxtv2.html&amp;quot;,
                data:{},
                type:&amp;quot;GET&amp;quot;,
                dataType:&amp;quot;jsonp&amp;quot;,
                jsonp:&amp;quot;callback&amp;quot;,
                jsonpCallback:&amp;quot;list&amp;quot;,
                success:function(arg){
                    console.log(arg);
                    var jsonArray = arg.data;
                    $.each(jsonArray,function(k,v){
                        var week = v.week;
                        var label = &amp;quot;&amp;lt;h1&amp;gt;&amp;quot; + week + &amp;quot;&amp;lt;/h1&amp;gt;&amp;quot;;
                        $(&amp;quot;#contaner&amp;quot;).append(label);
                        var listArray = v.list;
                        $.each(listArray,function(kk,vv){
                            var link = vv.link;
                            var name = vv.name;
                            var time = vv.time;
                            var labelNew = &amp;quot;&amp;lt;a href=&amp;apos;&amp;quot; + link + &amp;quot;&amp;apos;&amp;gt;&amp;quot; + time+name + &amp;quot;&amp;lt;/a&amp;gt;&amp;lt;br/&amp;gt;&amp;quot;;
                            $(&amp;quot;#contaner&amp;quot;).append(labelNew);
                        })
                    })
                },
                error:function(arg){
                    console.log(arg);
                }
            })
        }
    &amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5369773.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day13</title>
    <link href="http://blog.songqingbo.cn/2016/04/09/s12-20160409-day13/"/>
    <id>http://blog.songqingbo.cn/2016/04/09/s12-20160409-day13/</id>
    <published>2016-04-09T07:30:00.000Z</published>
    <updated>2016-07-07T03:02:36.049Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day13&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5369773.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5369773.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;js    
    使页面动起来的一门语言，解释器就是浏览器的引擎
dom
    提供一套api
jQuery
    封装的JS和dom的类库
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、javaScript&quot;&gt;&lt;a href=&quot;#二、javaScript&quot; class=&quot;headerlink&quot; title=&quot;二、javaScript&quot;&gt;&lt;/a&gt;二、javaScript&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 存在形式：
    文件
    标签
2. 放置位置：
    原则上可以存在head 和body，但是当页面请求不到js的时候就会一直在等待。建议将js代码放在body底部
3. 声明变量：
    name = &amp;quot;swht&amp;quot;;  //全局变量
    age = 18;   //局部变量    

4. 注释：
    当行注释：  //
    多行注释：    /*  ..  */
    每行代码结束需要加分号(;)
5. 类型：
    数字                
    字符串
    数组（字典）
6. 类型转换：
    var age = 18；
    var age = Number(18)；

    Number(&amp;quot;123&amp;quot;);
    parseInt(&amp;apos;123&amp;apos;);  //将字符串转换成数字类型
    var num = 18.9;
    num1 = parseInt(num); //将数字类型转换成整型数字输出
    num2 = parseFloat(num); //将数字类型转换成浮点型数字输出
    console.log(&amp;quot;num1:&amp;quot;,num1,typeof num1,&amp;quot;num2:&amp;quot;,num2,typeof num2); //控制台打印转换后的值和类型
    //输出结果：num1: 18 number num2: 18.9 number
7. 控制台打印：
    var age = &amp;quot;18&amp;quot;; 
    var n1 = 1,n2 = 3,n3 = 4; //单行可以声明多个变量并赋值
    console.log(age,typeof age); //控制台输出变量的值和类型
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;字符串操作&quot;&gt;&lt;a href=&quot;#字符串操作&quot; class=&quot;headerlink&quot; title=&quot;字符串操作&quot;&gt;&lt;/a&gt;字符串操作&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1. 去除字符串左右空格：        
    var name = &amp;quot;swht   &amp;quot;;
    name.trim();    
2. 按索引取值：
    var name = &amp;quot;swht&amp;quot;;
    name.charAt(1);
3. search:
    name.search(&amp;quot;w&amp;quot;);  //返回字符所在的索引值
4. split：
    name.split(&amp;quot;&amp;quot;);  //将字符串转换成数组
    [&amp;quot;s&amp;quot;, &amp;quot;w&amp;quot;, &amp;quot;h&amp;quot;, &amp;quot;t&amp;quot;, &amp;quot; &amp;quot;, &amp;quot; &amp;quot;, &amp;quot; &amp;quot;]
5. xx
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;for循环&quot;&gt;&lt;a href=&quot;#for循环&quot; class=&quot;headerlink&quot; title=&quot;for循环&quot;&gt;&lt;/a&gt;for循环&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var li1 = [11,22,33,44];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for (var index in li1)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(index);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for (var i = 0;i &amp;lt; li1.length;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(i,li1[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var dict = &amp;#123;&amp;quot;name&amp;quot;:&amp;quot;swht&amp;quot;,&amp;quot;age&amp;quot;:18,&amp;quot;work&amp;quot;:&amp;quot;运维&amp;quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;for (var item in dict)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;console.log(item,dict[item]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;while循环&quot;&gt;&lt;a href=&quot;#while循环&quot; class=&quot;headerlink&quot; title=&quot;while循环&quot;&gt;&lt;/a&gt;while循环&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;while(true){
    countine;
    break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; class=&quot;headerlink&quot; title=&quot;switch&quot;&gt;&lt;/a&gt;switch&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var name = &amp;apos;1&amp;apos;;
switch (name){
    case &amp;quot;1&amp;quot;:
        console.log(1);
        break;
    case &amp;quot;2&amp;quot;:
        console.log(2);
        break;
    case &amp;quot;3&amp;quot;:
        console.log(3);
        break;
    default:
        console.log(&amp;apos;default&amp;apos;);
        break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;if条件句&quot;&gt;&lt;a href=&quot;#if条件句&quot; class=&quot;headerlink&quot; title=&quot;if条件句&quot;&gt;&lt;/a&gt;if条件句&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var name = &amp;quot;swht&amp;quot;;
if (name == &amp;quot;alex&amp;quot;){
    console.log(err);
}else if (name == &amp;quot;hh&amp;quot;){
    console.log(true);
}else {
    console.log(&amp;quot;你逗呢！&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;try&quot;&gt;&lt;a href=&quot;#try&quot; class=&quot;headerlink&quot; title=&quot;try&quot;&gt;&lt;/a&gt;try&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var name = &amp;quot;swht&amp;quot;;
try {
    if (name == &amp;quot;shen&amp;quot;){
        console.log(&amp;quot;err&amp;quot;);
    }else {
        console.log(&amp;quot;false&amp;quot;);
    }
}catch (e){
    console.log(e);
}finally {
    console.log(&amp;quot;finally&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;//函数的声明
function func1(arg){
    return true;
}
//匿名函数
var func2 = function(arg){
    return true;
}
//自执行函数，一般用在jq封装类库时使用
(function(arg){
    console.log(arg);
})(&amp;apos;123&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;function Foo(name,age){
this.Name = name;
this.Age = age;
this.Func = function(arg){
    return this.Name +arg;
}
}
var obj = new Foo(&amp;apos;swht&amp;apos;,22)
console.log(obj.Name);
console.log(obj.Age);
var ret = obj.Func(&amp;apos;haha&amp;apos;);
console.log(ret);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、Dom&quot;&gt;&lt;a href=&quot;#三、Dom&quot; class=&quot;headerlink&quot; title=&quot;三、Dom&quot;&gt;&lt;/a&gt;三、Dom&lt;/h2&gt;&lt;p&gt;文档对象模型（Document Object Model，DOM）是一种用于HTML和XML文档的编程接口。它给文档提供了一种结构化的表示方法，可以改变文档的内容和呈现方式。我们最为关心的是，DOM把网页和脚本以及其他的编程语言联系了起来。DOM属于浏览器，而不是JavaScript语言规范里的规定的核心内容。&lt;/p&gt;
&lt;p&gt;注：一般说的JS让页面动起来泛指JavaScript和Dom&lt;/p&gt;
&lt;h3 id=&quot;1-选择器&quot;&gt;&lt;a href=&quot;#1-选择器&quot; class=&quot;headerlink&quot; title=&quot;1.选择器&quot;&gt;&lt;/a&gt;1.选择器&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;document.getElementById(&amp;apos;id&amp;apos;);
document.getElementsByName(&amp;apos;name&amp;apos;);
document.getElementsByTagName(&amp;apos;tagname&amp;apos;);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-内容&quot;&gt;&lt;a href=&quot;#2-内容&quot; class=&quot;headerlink&quot; title=&quot;2.内容&quot;&gt;&lt;/a&gt;2.内容&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;innerText
innerHTML

var obj = document.getElementById(&amp;apos;nid&amp;apos;)
obj.innerText                       # 获取文本内容
obj.innerText = &amp;quot;hello&amp;quot;             # 设置文本内容
obj.innerHTML                       # 获取HTML内容
obj.innerHTML = &amp;quot;&amp;lt;h1&amp;gt;asd&amp;lt;/h1&amp;gt;&amp;quot;      # 设置HTML内容


特殊的：
    input系列
    textarea标签
    select标签

    value属性操作用户输入和选择的值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-创建标签&quot;&gt;&lt;a href=&quot;#3-创建标签&quot; class=&quot;headerlink&quot; title=&quot;3.创建标签&quot;&gt;&lt;/a&gt;3.创建标签&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;方式一：
    var obj = document.createElement(&amp;apos;a&amp;apos;);
    obj.href = &amp;quot;http://www.apicloud.com&amp;quot;;
    obj.innerText = &amp;quot;APICloud&amp;quot;;

    var container = document.getElementById(&amp;apos;container&amp;apos;);
    //container.appendChild(obj);
    //container.insertBefore(obj, container.firstChild);
    //container.insertBefore(obj, document.getElementById(&amp;apos;hhh&amp;apos;));

方式二：
    var container = document.getElementById(&amp;apos;container&amp;apos;);
    var obj = &amp;quot;&amp;lt;input  type=&amp;apos;text&amp;apos; /&amp;gt;&amp;quot;;
    container.innerHTML = obj;
    // &amp;apos;beforeBegin&amp;apos;, &amp;apos;afterBegin&amp;apos;, &amp;apos;beforeEnd&amp;apos;,  &amp;apos;afterEnd&amp;apos;
    //container.insertAdjacentHTML(&amp;quot;beforeEnd&amp;quot;,obj);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-标签属性&quot;&gt;&lt;a href=&quot;#4-标签属性&quot; class=&quot;headerlink&quot; title=&quot;4.标签属性&quot;&gt;&lt;/a&gt;4.标签属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;var obj = document.getElementById(&amp;apos;container&amp;apos;);
固定属性
    obj.id
    obj.id = &amp;quot;nid&amp;quot;
    obj.className
    obj.style.fontSize = &amp;quot;88px&amp;quot;;

自定义属性
    obj.setAttribute(name,value)
    obj.getAttribute(name)
    obj.removeAttribute(name)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-提交表单&quot;&gt;&lt;a href=&quot;#5-提交表单&quot; class=&quot;headerlink&quot; title=&quot;5.提交表单&quot;&gt;&lt;/a&gt;5.提交表单&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;document.geElementById(&amp;apos;form&amp;apos;).submit()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-事件&quot;&gt;&lt;a href=&quot;#6-事件&quot; class=&quot;headerlink&quot; title=&quot;6.事件&quot;&gt;&lt;/a&gt;6.事件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/aP6MTMY.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;7-其他功能&quot;&gt;&lt;a href=&quot;#7-其他功能&quot; class=&quot;headerlink&quot; title=&quot;7.其他功能&quot;&gt;&lt;/a&gt;7.其他功能&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;console.log()
alert()
confirm()

// URL和刷新
location.href
location.href = &amp;quot;url&amp;quot;  window.location.reload()

// 定时器
setInterval(&amp;quot;alert()&amp;quot;,2000);   
clearInterval(obj)
setTimeout();   
clearTimeout(obj)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;跑马灯

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;欢迎南非波波同志成为本届董事长&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;input type=&amp;quot;button&amp;quot; onclick=&amp;quot;DropInterval();&amp;quot; value=&amp;quot;停止滚动&amp;quot; /&amp;gt;
        &amp;lt;script&amp;gt;
            obj1 = setInterval(&amp;quot;GunDong()&amp;quot;,1000);
            console.log(obj1);
            function DropInterval(){
                   clearInterval(obj1);
            }
            function GunDong(){
                var text = document.title;
                var firstWord = text.charAt(0);
                var subWord = text.substring(1,text.length);
                var newWord = subWord + firstWord;
                document.title = newWord;
            }
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

搜索框

&amp;lt;input type=&amp;quot;text&amp;quot; placeholder=&amp;quot;请输入关键字&amp;quot; id=&amp;quot;search&amp;quot; onfocus=&amp;quot;Focus();&amp;quot; onblur=&amp;quot;Blur();&amp;quot;/&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function Focus(){
        var nid = document.getElementById(&amp;quot;search&amp;quot;);
        var value = nid.placeholder;
        if (value == &amp;quot;请输入关键字&amp;quot;){
            nid.placeholder = &amp;quot;&amp;quot;;
        }
    }

    function Blur(){
        var nid = document.getElementById(&amp;quot;search&amp;quot;);
        var value = nid.placeholder;
        if (!value.trim()){
            nid.placeholder = &amp;quot;请输入关键字&amp;quot;;
        }
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、jQuery&quot;&gt;&lt;a href=&quot;#四、jQuery&quot; class=&quot;headerlink&quot; title=&quot;四、jQuery&quot;&gt;&lt;/a&gt;四、jQuery&lt;/h2&gt;&lt;h3 id=&quot;1-选择器：&quot;&gt;&lt;a href=&quot;#1-选择器：&quot; class=&quot;headerlink&quot; title=&quot;1.选择器：&quot;&gt;&lt;/a&gt;1.选择器：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#id
element
.class
*
selector1,selector2,selectorN
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fhuW9MD.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;div&amp;gt;
           &amp;lt;div id=&amp;quot;n1&amp;quot;&amp;gt;11&amp;lt;/div&amp;gt;
            &amp;lt;div class=&amp;quot;c1&amp;quot;&amp;gt;22&amp;lt;/div&amp;gt;
            &amp;lt;div  class=&amp;quot;c1&amp;quot;&amp;gt;33&amp;lt;/div&amp;gt;
            &amp;lt;a&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;span id=&amp;quot;n2&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;

            &amp;lt;div id=&amp;quot;n3&amp;quot;&amp;gt;
                &amp;lt;div&amp;gt;
                    &amp;lt;div class=&amp;quot;c3&amp;quot;&amp;gt;
                        &amp;lt;span&amp;gt;
                            &amp;lt;a class=&amp;quot;c4&amp;quot;&amp;gt;asdf&amp;lt;/a&amp;gt;
                        &amp;lt;/span&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
                &amp;lt;span&amp;gt;asdf&amp;lt;/span&amp;gt;
            &amp;lt;/div&amp;gt;

        &amp;lt;/div&amp;gt;

        &amp;lt;script src=&amp;quot;jquery-2.2.3.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;script&amp;gt;
            /*
            选择器基础使用
             */
            $(&amp;quot;#n1&amp;quot;).text(&amp;quot;中国好声音&amp;quot;);
            $(&amp;quot;.c1&amp;quot;).text(&amp;quot;欢迎三江同学&amp;quot;);
            $(&amp;quot;.c4&amp;quot;).text(&amp;quot;一不小心挂掉了&amp;quot;);
            $(&amp;quot;#n3 span&amp;quot;).text(&amp;quot;游泳冠军&amp;quot;);

        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-筛选器&quot;&gt;&lt;a href=&quot;#2-筛选器&quot; class=&quot;headerlink&quot; title=&quot;2.筛选器&quot;&gt;&lt;/a&gt;2.筛选器&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/x7Jqi96.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-属性、CSS&quot;&gt;&lt;a href=&quot;#3-属性、CSS&quot; class=&quot;headerlink&quot; title=&quot;3.属性、CSS&quot;&gt;&lt;/a&gt;3.属性、CSS&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/mPoLfMu.png&quot; alt=&quot;&quot;&gt;    &lt;/p&gt;
&lt;h3 id=&quot;4-文档处理&quot;&gt;&lt;a href=&quot;#4-文档处理&quot; class=&quot;headerlink&quot; title=&quot;4.文档处理&quot;&gt;&lt;/a&gt;4.文档处理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/8YcX0EW.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;5-事件&quot;&gt;&lt;a href=&quot;#5-事件&quot; class=&quot;headerlink&quot; title=&quot;5.事件&quot;&gt;&lt;/a&gt;5.事件&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/p53Uf3n.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作业&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;jQuery API文档阅读&lt;/li&gt;
&lt;li&gt;博客实例阅读练习&lt;/li&gt;
&lt;li&gt;列表处理、登录方式&lt;/li&gt;
&lt;li&gt;主机管理列表可编辑&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day13&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5369773.html&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day10</title>
    <link href="http://blog.songqingbo.cn/2016/03/19/s12-20160319-day10/"/>
    <id>http://blog.songqingbo.cn/2016/03/19/s12-20160319-day10/</id>
    <published>2016-03-19T07:30:00.000Z</published>
    <updated>2016-07-07T02:55:01.160Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day09&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5248247.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5248247.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day10&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5286889.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5286889.html
&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、回顾&quot;&gt;&lt;a href=&quot;#一、回顾&quot; class=&quot;headerlink&quot; title=&quot;一、回顾&quot;&gt;&lt;/a&gt;一、回顾&lt;/h2&gt;&lt;h3 id=&quot;1-队列&quot;&gt;&lt;a href=&quot;#1-队列&quot; class=&quot;headerlink&quot; title=&quot;1.    队列&quot;&gt;&lt;/a&gt;1.    队列&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.    队列的作业就是实现多个线程之间数据安全的交互
2.    队列类型：先进先出、后进先出、优先级
3.    queue的数据必须按照顺序进行取出--&amp;gt;处理--&amp;gt;放回。主要作用就是不同进程之间数据的交换，manager可以进行多个进程之间的数据的共享，而且是数据安全的。
4.    生产者-消费者模型：实现程序的松耦合
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-gevent模块：对Greenlet模块的一次封装&quot;&gt;&lt;a href=&quot;#2-gevent模块：对Greenlet模块的一次封装&quot; class=&quot;headerlink&quot; title=&quot;2. gevent模块：对Greenlet模块的一次封装&quot;&gt;&lt;/a&gt;2. gevent模块：对Greenlet模块的一次封装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. gevent里面的socket本身可以实现IO阻塞变成非阻塞
2. monkey.path_all()可以帮助我们实现阻塞变成非阻塞
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-协程&quot;&gt;&lt;a href=&quot;#3-协程&quot; class=&quot;headerlink&quot; title=&quot;3. 协程&quot;&gt;&lt;/a&gt;3. 协程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. 实现单个线程里面的并发
2. 无需线程上下文切换的开销，无需原子操作锁定及同步的开销，方便切换控制流，高并发+高扩展性+低成本
3. 无法利用多核资源，但是可以实现单个进程下面起一个线程，然后一个线程下面实现多个协程并发
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-select&quot;&gt;&lt;a href=&quot;#4-select&quot; class=&quot;headerlink&quot; title=&quot;4. select&quot;&gt;&lt;/a&gt;4. select&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SpEkQHr.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. select 与poll的区别

    select有一个最大文件数的限制1024，文件扫描一个列表是非常低效的；poll没有这个限制
    内核态到用户态的数据copy；Epoll直接调用C语言进行内核态的数据nat到用户态

2.    select代码注释


    __auther__ = &amp;apos;Victor&amp;apos;

    import select
    import socket
    import sys
    import queue

    # 创建一个TCP/IP socket
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setblocking(False)
    # 绑定socket到指定端口
    server_address = (&amp;apos;localhost&amp;apos;, 10000)
    print(sys.stderr, &amp;apos;starting up on %s port %s&amp;apos; % server_address)
    server.bind(server_address)
    # 监听连接的地址
    server.listen(5)
    inputs = [server]
    # Socket的读操作
    outputs = []
    # socket的写操作
    message_queues = {}
    while inputs:
    # Wait for at least one of the sockets to be ready for processing
    print( &amp;apos;\nwaiting for the next event&amp;apos;)
    readable, writable, exceptional = select.select(inputs, outputs, inputs)
    # 监听句柄序列，如果某个发生变化，select的第一个rLest会拿到数据，output只要有数据wLest就能获取到，select的第三个参数inputs用来监测异常，并赋值给exceptional。
    # 监听inputs，outputs，inputs  如果他们的值有变化，就将分别赋值给readable，writable，exceptional。
    for s in readable:
    # 遍历readable的值。
    if s is server:
    connection, client_address = s.accept()
    # 如果s 是server，那么server socket将接收连接。
    print(&amp;apos;new connection from&amp;apos;, client_address)
    # 打印出连接客户端的地址。
    connection.setblocking(False)
    # 设置socket 为非阻塞模式。
    inputs.append(connection)
    # 因为有读操作发生，所以将此连接加入inputs
    message_queues[connection] = queue.Queue()
    # 为每个连接创建一个queue队列。使得每个连接接收到正确的数据。
    else:
    data = s.recv(1024)
    # 如果s不是server，说明客户端连接来了，那么就接受客户端的数据。
    if data:
    # 如果接收到客户端的数据
    print(sys.stderr, &amp;apos;received &amp;quot;%s&amp;quot; from %s&amp;apos; % (data, s.getpeername()) )
    message_queues[s].put(data)
    # 将收到的数据放入队列中
    if s not in outputs:
    outputs.append(s)
    # 将socket客户端的连接加入select的output中，并且用来返回给客户端数据。
    else:
    print(&amp;apos;closing&amp;apos;, client_address, &amp;apos;after reading no data&amp;apos;)
    # 如果没有收到客户端发来的空消息，则说明客户端已经断开连接。
    if s in outputs:
    outputs.remove(s)
    # 既然客户端都断开了，我就不用再给它返回数据了，所以这时候如果这个客户端的连接对象还在outputs列表中，就把它删掉
    inputs.remove(s)
    # inputs中也删除掉
    s.close()
    # 把这个连接关闭掉
    del message_queues[s]
    # 删除此客户端的消息队列

    for s in writable:
    # 遍历output的数据
    try:
    next_msg = message_queues[s].get_nowait()
    except queue.Empty:
    # 获取对应客户端消息队列中的数据，如果队列中的数据为空，从消息队列中移除此客户端连接。
    print(&amp;apos;output queue for&amp;apos;, s.getpeername(), &amp;apos;is empty&amp;apos;)
    outputs.remove(s)
    else:
    print( &amp;apos;sending &amp;quot;%s&amp;quot; to %s&amp;apos; % (next_msg, s.getpeername()))
    s.send(next_msg)
    # 如果消息队列有数据，则发送给客户端。
    for s in exceptional:
    # 处理 &amp;quot;exceptional conditions&amp;quot;
    print(&amp;apos;handling exceptional condition for&amp;apos;, s.getpeername() )
    inputs.remove(s)
    # 取消对出现异常的客户端的监听
    if s in outputs:
    outputs.remove(s)
    # 移除客户端的连接对象。
    s.close()
    # 关闭此socket连接
    del message_queues[s]
    # 删除此消息队列。

    &amp;apos;&amp;apos;&amp;apos;

    在select/poll时代，服务器进程每次都把这100万个连接告诉操作系统(从用户态复制句柄数据结构到内核态)，让操作系统内核去查询这些套接字上是否有事件发生，

    轮询完后，再将句柄数据复制到用户态，让服务器应用程序轮询处理已发生的网络事件，这一过程资源消耗较大，因此，select/poll一般只能处理几千的并发连接。

    epoll的设计和实现与select完全不同。epoll通过在Linux内核中申请一个简易的文件系统(文件系统一般用什么数据结构实现？B+树)。把原先的select/poll调用分成了3个部分：

    1）调用epoll_create()建立一个epoll对象(在epoll文件系统中为这个句柄对象分配资源)

    2）调用epoll_ctl向epoll对象中添加这100万个连接的套接字

    3）调用epoll_wait收集发生的事件的连接

    &amp;apos;&amp;apos;&amp;apos;


3.    epoll代码注释

    __auther__ = &amp;apos;Victor&amp;apos;


    #--------------这是一个epoll的例子--------------


    import socket, select
    # &amp;apos;windows&amp;apos;下不支持&amp;apos;epoll&amp;apos;

    EOL1 = b&amp;apos;\n\n&amp;apos;
    EOL2 = b&amp;apos;\n\r\n&amp;apos;
    response = b&amp;apos;HTTP/1.0 200 OK\r\nDate: Mon, 1 Jan 1996 01:01:01 GMT\r\n&amp;apos;
    response += b&amp;apos;Content-Type: text/plain\r\nContent-Length: 13\r\n\r\n&amp;apos;
    response += b&amp;apos;Hello, world!&amp;apos;

    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    serversocket.bind((&amp;apos;0.0.0.0&amp;apos;, 8080))
    serversocket.listen(1)
    # 建立socket连接。
    serversocket.setblocking(0)
    # 因为socket本身是阻塞的，setblocking（0）使得socket不阻塞

    epoll = select.epoll()
    # 创建一个eopll对象
    epoll.register(serversocket.fileno(), select.EPOLLIN)
    # 在服务器端socket上面注册对读event的关注，一个读event随时会触发服务器端socket去接收一个socket连接。

    try:
       connections = {}; requests = {}; responses = {}
    # 生成3个字典，connection字典是存储文件描述符映射到他们相应的网络连接对象
       while True:
          events = epoll.poll(1)
    # 查询epoll对象，看是否有任何关注的event被触发，参数‘1’表示，会等待一秒来看是否有event发生，如果有任何感兴趣的event发生在这次查询之前，这个查询就会带着这些event的列表立即返回
          for fileno, event in events:
            # event作为一个序列（fileno，event code）的元组返回，fileno是文件描述符的代名词，始终是一个整数。
             if fileno == serversocket.fileno():
                # 如果一个读event在服务器端socket发生，就会有一个新的socket连接可能被创建。
                connection, address = serversocket.accept()
                # 服务器端开始接收连接和客户端地址
                connection.setblocking(0)
                # 设置新的socket为非阻塞模式
                epoll.register(connection.fileno(), select.EPOLLIN)
                # 为新的socket注册对读（EPOLLIN）event的关注
                connections[connection.fileno()] = connection
                requests[connection.fileno()] = b&amp;apos;&amp;apos;
                responses[connection.fileno()] = response
             elif event &amp;amp; select.EPOLLIN:
                requests[fileno] += connections[fileno].recv(1024)
                # 如果发生一个读event，就读取从客户端发过来的数据。
                if EOL1 in requests[fileno] or EOL2 in requests[fileno]:
                   epoll.modify(fileno, select.EPOLLOUT)
                # 一旦完成请求已经收到，就注销对读event的关注，注册对写（EPOLLOUT）event的关注，写event发生的时候，会回复数据给客户端。
                   print(&amp;apos;-&amp;apos;*40 + &amp;apos;\n&amp;apos; + requests[fileno].decode()[:-2])
                # 打印完整的请求，证明虽然与客户端的通信是交错进行的，但是数据可以作为一个整体来组装和处理。
             elif event &amp;amp; select.EPOLLOUT:
                # 如果一个写event在一个客户端socket上面发生，他会接受新的数据以便发送到客户端。
                byteswritten = connections[fileno].send(responses[fileno])
                responses[fileno] = responses[fileno][byteswritten:]
                if len(responses[fileno]) == 0:
                    # 每次发送一部分响应数据，直到完整的响应数据都已经发送给操作系统等待传输给客户端。
                   epoll.modify(fileno, 0)
                # 一旦完整的响应数据发送完成，就不再关注读或者写event。
                   connections[fileno].shutdown(socket.SHUT_RDWR)
                # 如果一个连接显式关闭，那么socket shutdown是可选的，在这里这样使用，是为了让客户端首先关闭。
                # shutdown调用会通知客户端socket没有更多的数据应该被发送或者接收，并会让功能正常的客户端关闭自己的socket连接。
             elif event &amp;amp; select.EPOLLHUP:
                # HUP挂起event表明客户端socket已经断开（即关闭），所以服务器端也需要关闭，没有必要注册对HUP event的关注，在socket上面，他们总是会被epoll对象注册。
                epoll.unregister(fileno)
                # 注销对此socket连接的关注。
                connections[fileno].close()
                # 关闭socket连接。
                del connections[fileno]
    finally:
       epoll.unregister(serversocket.fileno())
    # 去掉已经注册的文件句柄
       epoll.close()
    # 关闭epoll对象
       serversocket.close()
    # 关闭服务器连接
    # 打开的socket连接不需要关闭，因为Python会在程序结束时关闭， 这里的显示关闭是个好的习惯。

    &amp;apos;&amp;apos;&amp;apos;

    首先我们来定义流的概念，一个流可以是文件，socket，pipe等等可以进行I/O操作的内核对象。

        不管是文件，还是套接字，还是管道，我们都可以把他们看作流。

        之后我们来讨论I/O的操作，通过read，我们可以从流中读入数据；通过write，我们可以往流写入数据。现在假定一个情形，
        我们需要从流中读数据，但是流中还没有数据，（典型的例子为，客户端要从socket读如数据，但是服务器还没有把数据传回来），
        这时候该怎么办？

    阻塞：阻塞是个什么概念呢？比如某个时候你在等快递，但是你不知道快递什么时候过来，而且你没有别的事可以干（或者说接下来的事要等快递来了才能做）；
    那么你可以去睡觉了，因为你知道快递把货送来时一定会给你打个电话（假定一定能叫醒你）。

    非阻塞忙轮询：接着上面等快递的例子，如果用忙轮询的方法，那么你需要知道快递员的手机号，然后每分钟给他挂个电话：“你到了没？”

        很明显一般人不会用第二种做法，不仅显很无脑，浪费话费不说，还占用了快递员大量的时间。

        大部分程序也不会用第二种做法，因为第一种方法经济而简单，经济是指消耗很少的CPU时间，如果线程睡眠了，就掉出了系统的调度队列，暂时不会去瓜分CPU宝贵的时间片了。

        为了了解阻塞是如何进行的，我们来讨论缓冲区，以及内核缓冲区，最终把I/O事件解释清楚。缓冲区的引入是为了减少频繁I/O操作而引起频繁的系统调用（你知道它很慢的），
        当你操作一个流时，更多的是以缓冲区为单位进行操作，这是相对于用户空间而言。对于内核来说，也需要缓冲区。

    假设有一个管道，进程A为管道的写入方，Ｂ为管道的读出方。

    假设一开始内核缓冲区是空的，B作为读出方，被阻塞着。然后首先A往管道写入，这时候内核缓冲区由空的状态变到非空状态，内核就会产生一个事件告诉Ｂ该醒来了，
    这个事件姑且称之为“缓冲区非空”。

        但是“缓冲区非空”事件通知B后，B却还没有读出数据；且内核许诺了不能把写入管道中的数据丢掉这个时候，Ａ写入的数据会滞留在内核缓冲区中，如果内核也缓冲区满了，
        B仍未开始读数据，最终内核缓冲区会被填满，这个时候会产生一个I/O事件，告诉进程A，你该等等（阻塞）了，我们把这个事件定义为“缓冲区满”。

    假设后来Ｂ终于开始读数据了，于是内核的缓冲区空了出来，这时候内核会告诉A，内核缓冲区有空位了，你可以从长眠中醒来了，继续写数据了，我们把这个事件叫做“缓冲区非满”

        也许事件Y1已经通知了A，但是A也没有数据写入了，而Ｂ继续读出数据，知道内核缓冲区空了。这个时候内核就告诉B，你需要阻塞了！，我们把这个时间定为“缓冲区空”。

    这四个情形涵盖了四个I/O事件，缓冲区满，缓冲区空，缓冲区非空，缓冲区非满（注都是说的内核缓冲区，且这四个术语都是我生造的，仅为解释其原理而造）。
    这四个I/O事件是进行阻塞同步的根本。（如果不能理解“同步”是什么概念，请学习操作系统的锁，信号量，条件变量等任务同步方面的相关知识）。

        然后我们来说说阻塞I/O的缺点。但是阻塞I/O模式下，一个线程只能处理一个流的I/O事件。如果想要同时处理多个流，要么多进程(fork)，要么多线程(pthread_create)，
        很不幸这两种方法效率都不高。

        于是再来考虑非阻塞忙轮询的I/O方式，我们发现我们可以同时处理多个流了（把一个流从阻塞模式切换到非阻塞模式再此不予讨论）：

    while true {
        for i in stream[]; {
            if i has data
                read until unavailable
        }
    }

        我们只要不停的把所有流从头到尾问一遍，又从头开始。这样就可以处理多个流了，但这样的做法显然不好，因为如果所有的流都没有数据，那么只会白白浪费CPU。
        这里要补充一点，阻塞模式下，内核对于I/O事件的处理是阻塞或者唤醒，而非阻塞模式下则把I/O事件交给其他对象（后文介绍的select以及epoll）处理甚至直接忽略。

        为了避免CPU空转，可以引进了一个代理（一开始有一位叫做select的代理，后来又有一位叫做poll的代理，不过两者的本质是一样的）。这个代理比较厉害，
        可以同时观察许多流的I/O事件，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中醒来，于是我们的程序就会轮询一遍所有的流
        （于是我们可以把“忙”字去掉了）。代码长这样:

    while true {
        select(streams[])
        for i in streams[] {
            if i has data
                read until unavailable
        }
    }

        于是，如果没有I/O事件产生，我们的程序就会阻塞在select处。但是依然有个问题，我们从select那里仅仅知道了，有I/O事件发生了，但却并不知道是那几个流
        （可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。

        但是使用select，我们有O(n)的无差别轮询复杂度，同时处理的流越多，没一次无差别轮询时间就越长。再次

    说了这么多，终于能好好解释epoll了

        epoll可以理解为event poll，不同于忙轮询和无差别轮询，epoll之会把哪个流发生了怎样的I/O事件通知我们。此时我们对这些流的操作都是有意义的。
        （复杂度降低到了O(1)）

        在讨论epoll的实现细节之前，先把epoll的相关操作列出：

          epoll_create 创建一个epoll对象，一般epollfd = epoll_create()

          epoll_ctl （epoll_add/epoll_del的合体），往epoll对象中增加/删除某一个流的某一个事件

    比如

    epoll_ctl(epollfd, EPOLL_CTL_ADD, socket, EPOLLIN);//注册缓冲区非空事件，即有数据流入

    epoll_ctl(epollfd, EPOLL_CTL_DEL, socket, EPOLLOUT);//注册缓冲区非满事件，即流可以被写入

    epoll_wait(epollfd,...)等待直到注册的事件发生

    （注：当对一个非阻塞流的读写发生缓冲区满或缓冲区空，write/read会返回-1，并设置errno=EAGAIN。而epoll只关心缓冲区非满和缓冲区非空事件）。

    一个epoll模式的代码大概的样子是：
    while true {
        active_stream[] = epoll_wait(epollfd)
        for i in active_stream[] {
            read or write till
        }
    }
    &amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、Twsited异步网络框架&quot;&gt;&lt;a href=&quot;#二、Twsited异步网络框架&quot; class=&quot;headerlink&quot; title=&quot;二、Twsited异步网络框架&quot;&gt;&lt;/a&gt;二、Twsited异步网络框架&lt;/h2&gt;&lt;h3 id=&quot;1-事件驱动&quot;&gt;&lt;a href=&quot;#1-事件驱动&quot; class=&quot;headerlink&quot; title=&quot;1.    事件驱动&quot;&gt;&lt;/a&gt;1.    事件驱动&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;将自定义的类和函数注册到事件列表中，事件驱动框架就会自行去列表中获取事件并执行。

第一，注册事件；第二，触发事件
![](http://i.imgur.com/6brDszu.png)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#event_drive.py

#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
&amp;apos;&amp;apos;&amp;apos;
模拟twsited异步网络框架的流程
&amp;apos;&amp;apos;&amp;apos;
#创建一个事件列表
event_list = []

#创建一个事件驱动动作
def run():
    for event in event_list:
        obj = event()
        obj.execute()

#创建事件定义规则，用户将自定义事件注册到事件列表中需要继承此类
class BaseHandler(object):
    &amp;quot;&amp;quot;&amp;quot;
    用户必须继承该类，从而规范所有类的方法（类似于接口的功能）
    &amp;quot;&amp;quot;&amp;quot;
    def execute(self):
        raise Exception(&amp;apos;you must overwrite execute&amp;apos;)


#event_run.py


#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import event_drive

#自定义事件，继承事件驱动自定义类
class MyHandler(event_drive.BaseHandler):

    #重写执行函数
    def execute(self):
        print(&amp;apos;event-drive execute MyHandler&amp;apos;)
class YourHandler(event_drive.BaseHandler):

    def execute(self):
        print(&amp;apos;event-drive ezecute YourHandler&amp;apos;)

event_drive.event_list.append(MyHandler) #将事件注册到事件列表中
event_drive.event_list.append(YourHandler)
event_drive.run()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-Twisted框架&quot;&gt;&lt;a href=&quot;#2-Twisted框架&quot; class=&quot;headerlink&quot; title=&quot;2.    Twisted框架&quot;&gt;&lt;/a&gt;2.    Twisted框架&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Echo_server

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    from twisted.internet import protocol
    from twisted.internet import reactor

    class Echo(protocol.Protocol):
        &amp;apos;&amp;apos;&amp;apos;
        定义一个类，处理客户端传递的数据
        &amp;apos;&amp;apos;&amp;apos;
        def dataReceived(self, data):
            &amp;apos;&amp;apos;&amp;apos;
            一旦接收到客户端传递的数据就要调用该方法
            :param data: 客户端传递过来的数据，python3版本传递的数据需要转换成bytes
            :return: 返回的数据是将客户端传递过来的数据返回给客户端
            &amp;apos;&amp;apos;&amp;apos;
            print(&amp;quot;Client said:&amp;quot;,data)
            self.transport.write(data)

    def main():
        &amp;apos;&amp;apos;&amp;apos;
        主函数，程序执行时直接从该函数调用事件类
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        factory = protocol.ServerFactory() #定义基础工厂类
        factory.protocol = Echo #相当于socketserver中的Handler方法，工厂协议直接引用自定义的Echo类

        reactor.listenTCP(5000,factory) #reactor自动重复去做一件事情。使用listenTCP监听端口
        reactor.run() #运行

    if __name__ == &amp;apos;__main__&amp;apos;:
        main()


Echo_client:

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    from twisted.internet import reactor, protocol


    # a client protocol

    class EchoClient(protocol.Protocol):
        &amp;apos;&amp;apos;&amp;apos;
        客户端Echo事件
        &amp;apos;&amp;apos;&amp;apos;
        def connectionMade(self):
            &amp;apos;&amp;apos;&amp;apos;
            连接建立执行该方法，客户端发送数据
            :return:
            &amp;apos;&amp;apos;&amp;apos;
            self.transport.write(b&amp;quot;hello alex!&amp;quot;)

        def dataReceived(self, data):
            &amp;apos;&amp;apos;&amp;apos;
            客户端接收服务端的数据
            :param data:
            :return:
            &amp;apos;&amp;apos;&amp;apos;
            print(&amp;quot;Server said:&amp;quot;, data)
            self.transport.loseConnection()
        def connectionLost(self, reason):
            &amp;apos;&amp;apos;&amp;apos;
            客户端接收完数据断开连接，主动执行该方法断开连接
            :param reason:
            :return:
            &amp;apos;&amp;apos;&amp;apos;
            print(&amp;quot;connection lost&amp;quot;)

    class EchoFactory(protocol.ClientFactory):
        &amp;apos;&amp;apos;&amp;apos;
        自定义工厂类，继承prorocol.ClientFactory类
        &amp;apos;&amp;apos;&amp;apos;
        protocol = EchoClient #hanld。自己重写了protocol类

        def clientConnectionFailed(self, connector, reason):
            print(&amp;quot;Connection failed - goodbye!&amp;quot;)
            reactor.stop()

        def clientConnectionLost(self, connector, reason):
            print(&amp;quot;Connection lost - goodbye!&amp;quot;)
            reactor.stop()


    # this connects the protocol to a server running on port 8000
    def main():
        f = EchoFactory()
        reactor.connectTCP(&amp;quot;localhost&amp;quot;, 5000, f)
        reactor.run()

    # this only runs if the module was *not* imported
    if __name__ == &amp;apos;__main__&amp;apos;:
        main()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-深入学习&quot;&gt;&lt;a href=&quot;#3-深入学习&quot; class=&quot;headerlink&quot; title=&quot;3.深入学习&quot;&gt;&lt;/a&gt;3.深入学习&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/hanhuili/article/details/9389433&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/hanhuili/article/details/9389433&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://krondo.com/an-introduction-to-asynchronous-programming-and-twisted/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://krondo.com/an-introduction-to-asynchronous-programming-and-twisted/&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&quot;三、非关系型数据库&quot;&gt;&lt;a href=&quot;#三、非关系型数据库&quot; class=&quot;headerlink&quot; title=&quot;三、非关系型数据库&quot;&gt;&lt;/a&gt;三、非关系型数据库&lt;/h3&gt;&lt;h3 id=&quot;1-Redis&quot;&gt;&lt;a href=&quot;#1-Redis&quot; class=&quot;headerlink&quot; title=&quot;1.    Redis&quot;&gt;&lt;/a&gt;1.    Redis&lt;/h3&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5132791.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5132791.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;数据（键值对）存储在内存中，一个独立的内存管理器，可以使多个程序共享数据    

默认是非持久化的，但是可以在配置文件中进行设置

1. redis基础使用

        cli&amp;gt;keys * #查看所有的键
        cli&amp;gt;set name swht ex 5 #设置一个键值对，其有效时间为5秒
        cli&amp;gt;get name #获取键值

2. redis连接

        import redis
        redis_cli = redis.Redis(&amp;quot;localhost&amp;quot;)
        print(redis_cli.get(&amp;apos;name&amp;apos;)) #b&amp;apos;swht&amp;apos;  get方法只能获取字符
3. redis连接池

        import redis
        pool = redis.ConnectionPool(host = &amp;apos;localhost&amp;apos;,port = 6379)
        redis_cli = redis.Redis(connection_pool=pool)
        redis_cli.set(&amp;apos;age&amp;apos;,56)
        print(redis_cli.get(&amp;apos;age&amp;apos;)) #b&amp;apos;56&amp;apos;
4. 操作

    set(name, value, ex=None, px=None, nx=False, xx=False)

        在Redis中设置值，默认，不存在则创建，存在则修改
        参数：
             ex，过期时间（秒）
             px，过期时间（毫秒）
             nx，如果设置为True，则只有name不存在时，当前set操作才执行
             xx，如果设置为True，则只有name存在时，岗前set操作才执行
    setnx(name, value)

        设置值，只有name不存在时，执行设置操作（添加）
    setex(name, value, time)

        # 设置值
        # 参数：
            # time，过期时间（数字秒 或 timedelta对象）
    psetex(name, time_ms, value)

        # 设置值
        # 参数：
            # time_ms，过期时间（数字毫秒 或 timedelta对象）
    mset(*args, **kwargs)

        批量设置值
        如：
            mset(k1=&amp;apos;v1&amp;apos;, k2=&amp;apos;v2&amp;apos;)
            或
            mget({&amp;apos;k1&amp;apos;: &amp;apos;v1&amp;apos;, &amp;apos;k2&amp;apos;: &amp;apos;v2&amp;apos;})
    get(name)

        获取值
    mget(keys, *args)

        批量获取
        如：
            mget(&amp;apos;ylr&amp;apos;, &amp;apos;wupeiqi&amp;apos;)
            或
            r.mget([&amp;apos;ylr&amp;apos;, &amp;apos;wupeiqi&amp;apos;])
    getset(name, value)

        设置新值并获取原来的值
    getrange(key, start, end)


        # 获取子序列（根据字节获取，非字符）
        # 参数：
            # name，Redis 的 name
            # start，起始位置（字节）
            # end，结束位置（字节）
        # 如： &amp;quot;武沛齐&amp;quot; ，0-3表示 &amp;quot;武&amp;quot;
    setrange(name, offset, value)

        # 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）
        # 参数：
            # offset，字符串的索引，字节（一个汉字三个字节）
            # value，要设置的值
    setbit(name, offset, value)    
        # 对name对应值的二进制表示的位进行操作

        # 参数：
            # name，redis的name
            # offset，位的索引（将值变换成二进制后再进行索引）
            # value，值只能是 1 或 0

        # 注：如果在Redis中有一个对应： n1 = &amp;quot;foo&amp;quot;，
                那么字符串foo的二进制表示为：01100110 01101111 01101111
            所以，如果执行 setbit(&amp;apos;n1&amp;apos;, 7, 1)，则就会将第7位设置为1，
                那么最终二进制则变成 01100111 01101111 01101111，即：&amp;quot;goo&amp;quot;

        # 扩展，转换二进制表示：

            # source = &amp;quot;武沛齐&amp;quot;
            source = &amp;quot;foo&amp;quot;

            for i in source:
                num = ord(i)
                print bin(num).replace(&amp;apos;b&amp;apos;,&amp;apos;&amp;apos;)

            特别的，如果source是汉字 &amp;quot;武沛齐&amp;quot;怎么办？
            答：对于utf-8，每一个汉字占 3 个字节，那么 &amp;quot;武沛齐&amp;quot; 则有 9个字节
               对于汉字，for循环时候会按照 字节 迭代，那么在迭代时，将每一个字节转换 十进制数，然后再将十进制数转换成二进制    
    假定统计UV，使用setbit可以进行相应UV数统计。

        #!/usr/local/env python3
        &amp;apos;&amp;apos;&amp;apos;
        Author:@南非波波
        Blog:http://www.cnblogs.com/songqingbo/
        E-mail:qingbo.song@gmail.com
        &amp;apos;&amp;apos;&amp;apos;
        import redis

        pool = redis.ConnectionPool(host = &amp;apos;localhost&amp;apos;,port = 6379)
        redis_cli = redis.Redis(connection_pool=pool)
        redis_cli.setbit(&amp;apos;ip&amp;apos;,5,1)
        redis_cli.setbit(&amp;apos;ip&amp;apos;,45,1)
        redis_cli.setbit(&amp;apos;ip&amp;apos;,15,1)
        redis_cli.setbit(&amp;apos;ip&amp;apos;,45,1)
        print(&amp;quot;uv_count:&amp;quot;,redis_cli.bitcount(&amp;apos;ip&amp;apos;))    
    getbit(name, offset)


        # 获取name对应的值的二进制表示中的某位的值 （0或1）
        bitcount(key, start=None, end=None)

        # 获取name对应的值的二进制表示中 1 的个数
        # 参数：
            # key，Redis的name
            # start，位起始位置
            # end，位结束位置
    bitop(operation, dest, *keys)

        # 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值

        # 参数：
            # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）
            # dest, 新的Redis的name
            # *keys,要查找的Redis的name

        # 如：
            bitop(&amp;quot;AND&amp;quot;, &amp;apos;new_name&amp;apos;, &amp;apos;n1&amp;apos;, &amp;apos;n2&amp;apos;, &amp;apos;n3&amp;apos;)
            # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中
    strlen(name)

        # 返回name对应值的字节长度（一个汉字3个字节）
    incr(self, name, amount=1)

        做pv统计比较有用
        # 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。

        # 参数：
            # name,Redis的name
            # amount,自增数（必须是整数）

        # 注：同incrby
    incrbyfloat(self, name, amount=1.0)

        # 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。

        # 参数：
            # name,Redis的name
            # amount,自增数（浮点型）
    decr(self, name, amount=1)

        # 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。

        # 参数：
            # name,Redis的name
            # amount,自减数（整数）
    append(key, value)

        # 在redis name对应的值后面追加内容

        # 参数：
            key, redis的name
            value, 要追加的字符串        

5. Hash操作

    hset(name, key, value)

        # name对应的hash中设置一个键值对（不存在，则创建；否则，修改）

        # 参数：
            # name，redis的name
            # key，name对应的hash中的key
            # value，name对应的hash中的value

        # 注：
            # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）
    hmset(name, mapping)

        # 在name对应的hash中批量设置键值对

        # 参数：
            # name，redis的name
            # mapping，字典，如：{&amp;apos;k1&amp;apos;:&amp;apos;v1&amp;apos;, &amp;apos;k2&amp;apos;: &amp;apos;v2&amp;apos;}

        # 如：
            # r.hmset(&amp;apos;xx&amp;apos;, {&amp;apos;k1&amp;apos;:&amp;apos;v1&amp;apos;, &amp;apos;k2&amp;apos;: &amp;apos;v2&amp;apos;})
    hget(name,key)

        # 在name对应的hash中获取根据key获取value
        hmget(name, keys, *args)

        # 在name对应的hash中获取多个key的值

        # 参数：
            # name，reids对应的name
            # keys，要获取key集合，如：[&amp;apos;k1&amp;apos;, &amp;apos;k2&amp;apos;, &amp;apos;k3&amp;apos;]
            # *args，要获取的key，如：k1,k2,k3

        # 如：
            # r.mget(&amp;apos;xx&amp;apos;, [&amp;apos;k1&amp;apos;, &amp;apos;k2&amp;apos;])
            # 或
            # print r.hmget(&amp;apos;xx&amp;apos;, &amp;apos;k1&amp;apos;, &amp;apos;k2&amp;apos;)
    hgetall(name)

        获取name对应hash的所有键值
    hlen(name)

        # 获取name对应的hash中键值对的个数
    hkeys(name)

        # 获取name对应的hash中所有的key的值
    hvals(name)

        # 获取name对应的hash中所有的value的值
    hexists(name, key)

        # 检查name对应的hash是否存在当前传入的key
    hdel(name,*keys)

        # 将name对应的hash中指定key的键值对删除
    hincrby(name, key, amount=1)

        # 自增name对应的hash中的指定key的值，不存在则创建key=amount
        # 参数：
            # name，redis中的name
            # key， hash对应的key
            # amount，自增数（整数）
    hincrbyfloat(name, key, amount=1.0)

        # 自增name对应的hash中的指定key的值，不存在则创建key=amount

        # 参数：
            # name，redis中的name
            # key， hash对应的key
            # amount，自增数（浮点数）

        # 自增name对应的hash中的指定key的值，不存在则创建key=amount
    hscan(name, cursor=0, match=None, count=None)

        # 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆

        # 参数：
            # name，redis的name
            # cursor，游标（基于游标分批取获取数据）
            # match，匹配指定key，默认None 表示所有的key
            # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数

        # 如：
            # 第一次：cursor1, data1 = r.hscan(&amp;apos;xx&amp;apos;, cursor=0, match=None, count=None)
            # 第二次：cursor2, data1 = r.hscan(&amp;apos;xx&amp;apos;, cursor=cursor1, match=None, count=None)
            # ...
            # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕
    hscan_iter(name, match=None, count=None)

        # 利用yield封装hscan创建生成器，实现分批去redis中获取数据

        # 参数：
            # match，匹配指定key，默认None 表示所有的key
            # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数

        # 如：
            # for item in r.hscan_iter(&amp;apos;xx&amp;apos;):
            #     print item
6. List操作

    lpush(name,values)

        # 在name对应的list中添加元素，每个新的元素都添加到列表的最左边

        # 如：
            # r.lpush(&amp;apos;oo&amp;apos;, 11,22,33)
            # 保存顺序为: 33,22,11

        # 扩展：
            # rpush(name, values) 表示从右向左操作
    lpushx(name,value)

        # 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边

        # 更多：
            # rpushx(name, value) 表示从右向左操作
    llen(name)

        # name对应的list元素的个数
    linsert(name, where, refvalue, value))

        # 在name对应的列表的某一个值前或后插入一个新值

        # 参数：
            # name，redis的name
            # where，BEFORE或AFTER
            # refvalue，标杆值，即：在它前后插入数据
            # value，要插入的数据
    r.lset(name, index, value)

        # 对name对应的list中的某一个索引位置重新赋值

        # 参数：
            # name，redis的name
            # index，list的索引位置
            # value，要设置的值
    r.lrem(name, value, num)

        # 在name对应的list中删除指定的值

        # 参数：
            # name，redis的name
            # value，要删除的值
            # num，  num=0，删除列表中所有的指定值；
                   # num=2,从前到后，删除2个；
                   # num=-2,从后向前，删除2个
    lpop(name)

        # 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素

        # 更多：
            # rpop(name) 表示从右向左操作
    lindex(name, index)

        在name对应的列表中根据索引获取列表元素
    lrange(name, start, end)

        # 在name对应的列表分片获取数据
        # 参数：
            # name，redis的name
            # start，索引的起始位置
            # end，索引结束位置
    ltrim(name, start, end)

        # 在name对应的列表中移除没有在start-end索引之间的值
        # 参数：
            # name，redis的name
            # start，索引的起始位置
            # end，索引结束位置
    rpoplpush(src, dst)

        # 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边
        # 参数：
            # src，要取数据的列表的name
            # dst，要添加数据的列表的name
    blpop(keys, timeout)

        # 将多个列表排列，按照从左到右去pop对应列表的元素

        # 参数：
            # keys，redis的name的集合
            # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞

        # 更多：
            # r.brpop(keys, timeout)，从右向左获取数据
    brpoplpush(src, dst, timeout=0)

        # 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧

        # 参数：
            # src，取出并要移除元素的列表对应的name
            # dst，要插入元素的列表对应的name
            # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞
    自定义增量迭代

        # 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：
            # 1、获取name对应的所有列表
            # 2、循环列表
        # 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：

        def list_iter(name):
            &amp;quot;&amp;quot;&amp;quot;
            自定义redis列表增量迭代
            :param name: redis中的name，即：迭代name对应的列表
            :return: yield 返回 列表元素
            &amp;quot;&amp;quot;&amp;quot;
            list_count = r.llen(name)
            for index in xrange(list_count):
                yield r.lindex(name, index)

        # 使用
        for item in list_iter(&amp;apos;pp&amp;apos;):
            print item
7. Set操作，Set集合就是不允许重复的列表

    sadd(name,values)

        # name对应的集合中添加元素
    scard(name)

        获取name对应的集合中元素个数
    sdiff(keys, *args)

        在第一个name对应的集合中且不在其他name对应的集合的元素集合
    sdiffstore(dest, keys, *args)

        # 获取第一个name对应的集合中且不在其他name对应的集合，再将其新加入到dest对应的集合中
    sinter(keys, *args)

        # 获取多一个name对应集合的并集
    sinterstore(dest, keys, *args)

        # 获取多一个name对应集合的并集，再讲其加入到dest对应的集合中
    sismember(name, value)

        # 检查value是否是name对应的集合的成员
    smembers(name)

        # 获取name对应的集合的所有成员
    smove(src, dst, value)

        # 将某个成员从一个集合中移动到另外一个集合
    spop(name)

        # 从集合的右侧（尾部）移除一个成员，并将其返回
    srandmember(name, numbers)

        # 从name对应的集合中随机获取 numbers 个元素
    srem(name, values)

        # 在name对应的集合中删除某些值
    sunion(keys, *args)

        # 获取多一个name对应的集合的并集
    sunionstore(dest,keys, *args)

        # 获取多一个name对应的集合的并集，并将结果保存到dest对应的集合中
    sscan(name, cursor=0, match=None, count=None)
    sscan_iter(name, match=None, count=None)

        # 同字符串的操作，用于增量迭代分批获取元素，避免内存消耗太大


8. 有序集合，在集合的基础上，为每元素排序；元素的排序需要根据另外一个值来进行比较，所以，对于有序集合，每一个元素有两个值，即：值和分数，分数专门用来做排序。

    zadd(name, *args, **kwargs)

        # 在name对应的有序集合中添加元素
        # 如：
             # zadd(&amp;apos;zz&amp;apos;, &amp;apos;n1&amp;apos;, 1, &amp;apos;n2&amp;apos;, 2)
             # 或
             # zadd(&amp;apos;zz&amp;apos;, n1=11, n2=22)
    zcard(name)

        # 获取name对应的有序集合元素的数量
    zcount(name, min, max)

        # 获取name对应的有序集合中分数 在 [min,max] 之间的个数
    zincrby(name, value, amount)

        # 自增name对应的有序集合的 name 对应的分数
    r.zrange( name, start, end, desc=False, withscores=False, score_cast_func=float)

        # 按照索引范围获取name对应的有序集合的元素

        # 参数：
            # name，redis的name
            # start，有序集合索引起始位置（非分数）
            # end，有序集合索引结束位置（非分数）
            # desc，排序规则，默认按照分数从小到大排序
            # withscores，是否获取元素的分数，默认只获取元素的值
            # score_cast_func，对分数进行数据转换的函数

        # 更多：
            # 从大到小排序
            # zrevrange(name, start, end, withscores=False, score_cast_func=float)

            # 按照分数范围获取name对应的有序集合的元素
            # zrangebyscore(name, min, max, start=None, num=None, withscores=False, score_cast_func=float)
            # 从大到小排序
            # zrevrangebyscore(name, max, min, start=None, num=None, withscores=False, score_cast_func=float)
    zrank(name, value)

        # 获取某个值在 name对应的有序集合中的排行（从 0 开始）

        # 更多：
            # zrevrank(name, value)，从大到小排序
    zrangebylex(name, min, max, start=None, num=None)

        # 当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的 值 （lexicographical ordering）来进行排序，而这个命令则可以返回给定的有序集合键 key 中， 元素的值介于 min 和 max 之间的成员
        # 对集合中的每个成员进行逐个字节的对比（byte-by-byte compare）， 并按照从低到高的顺序， 返回排序后的集合成员。 如果两个字符串有一部分内容是相同的话， 那么命令会认为较长的字符串比较短的字符串要大

        # 参数：
            # name，redis的name
            # min，左区间（值）。 + 表示正无限； - 表示负无限； ( 表示开区间； [ 则表示闭区间
            # min，右区间（值）
            # start，对结果进行分片处理，索引位置
            # num，对结果进行分片处理，索引后面的num个元素

        # 如：
            # ZADD myzset 0 aa 0 ba 0 ca 0 da 0 ea 0 fa 0 ga
            # r.zrangebylex(&amp;apos;myzset&amp;apos;, &amp;quot;-&amp;quot;, &amp;quot;[ca&amp;quot;) 结果为：[&amp;apos;aa&amp;apos;, &amp;apos;ba&amp;apos;, &amp;apos;ca&amp;apos;]

        # 更多：
            # 从大到小排序
            # zrevrangebylex(name, max, min, start=None, num=None)
    zrem(name, values)

        # 删除name对应的有序集合中值是values的成员

        # 如：zrem(&amp;apos;zz&amp;apos;, [&amp;apos;s1&amp;apos;, &amp;apos;s2&amp;apos;])
    zremrangebyrank(name, min, max)

        # 根据排行范围删除
    zremrangebyscore(name, min, max)

        # 根据分数范围删除
    zremrangebylex(name, min, max)

        # 根据值返回删除
    zscore(name, value)

        # 获取name对应有序集合中 value 对应的分数
    zinterstore(dest, keys, aggregate=None)

        # 获取两个有序集合的交集，如果遇到相同值不同分数，则按照aggregate进行操作
        # aggregate的值为:  SUM  MIN  MAX
    zunionstore(dest, keys, aggregate=None)

        # 获取两个有序集合的并集，如果遇到相同值不同分数，则按照aggregate进行操作
        # aggregate的值为:  SUM  MIN  MAX
    zscan(name, cursor=0, match=None, count=None, score_cast_func=float)
    zscan_iter(name, match=None, count=None,score_cast_func=float)

        # 同字符串相似，相较于字符串新增score_cast_func，用来对分数进行操作

　　9. redis的发布与订阅

基础类：

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import redis


    class RedisHelper:

        def __init__(self):
            self.__conn = redis.Redis(host=&amp;apos;localhost&amp;apos;,port=6379)
            self.chan_sub = &amp;apos;fm104.5&amp;apos;
            self.chan_pub = &amp;apos;fm104.5&amp;apos;

        def public(self, msg):
            self.__conn.publish(self.chan_pub, msg)
            return True

        def subscribe(self):
            pub = self.__conn.pubsub()
            pub.subscribe(self.chan_sub)
            pub.parse_response()
            return pub

redis_sub.py

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    from RedisHelper import RedisHelper

    obj = RedisHelper()
    redis_sub = obj.subscribe()

    while True:
        msg= redis_sub.parse_response()
        print(msg)

redis_pub.py

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    from RedisHelper import RedisHelper

    obj = RedisHelper()
    obj.public(&amp;apos;hello&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-memcached&quot;&gt;&lt;a href=&quot;#2-memcached&quot; class=&quot;headerlink&quot; title=&quot;2.    memcached&quot;&gt;&lt;/a&gt;2.    memcached&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;非持久化轻量级缓存，使用第三方工具可以实现数据的持久化存储
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-mongodb&quot;&gt;&lt;a href=&quot;#3-mongodb&quot; class=&quot;headerlink&quot; title=&quot;3.    mongodb&quot;&gt;&lt;/a&gt;3.    mongodb&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;天生的数据持久化，默认将数据持久化存储在本地磁盘。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、消息队列rabbitmq&quot;&gt;&lt;a href=&quot;#四、消息队列rabbitmq&quot; class=&quot;headerlink&quot; title=&quot;四、消息队列rabbitmq&quot;&gt;&lt;/a&gt;四、消息队列rabbitmq&lt;/h2&gt;&lt;p&gt;通信模式：&lt;/p&gt;
&lt;h3 id=&quot;1-简单生产者消费者模型&quot;&gt;&lt;a href=&quot;#1-简单生产者消费者模型&quot; class=&quot;headerlink&quot; title=&quot;1. 简单生产者消费者模型&quot;&gt;&lt;/a&gt;1. 简单生产者消费者模型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;rabbit_send

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import pika
    #与消息队列建立一个连接
    connection = pika.BlockingConnection(pika.ConnectionParameters(
                   &amp;apos;localhost&amp;apos;))
    #创建一个管道
    channel = connection.channel()

    #在管道中声明一个名称为&amp;apos;name&amp;apos;的队列
    channel.queue_declare(queue=&amp;apos;name&amp;apos;)

    #一个消息不能直接发送给消息队列，需要通过一个路由器进行转发，这个路由器就是由exchange进行设置
    channel.basic_publish(exchange=&amp;apos;&amp;apos;, #路由器
                          routing_key=&amp;apos;name&amp;apos;, #队列名称
                          body=&amp;apos;swht&amp;apos;) #消息
    print(&amp;quot; [swht] Sent a message&amp;quot;)
    connection.close()

rabbit_recive

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import pika

    #与消息队列服务器建立连接
    connection = pika.BlockingConnection(pika.ConnectionParameters(
                   &amp;apos;localhost&amp;apos;))
    #创建一个管道
    channel = connection.channel()
    #消费者声明一个队列，为了防止生产者还没有启动没有完成创建队列时代码出错的问题。如果队列已存在，则忽略该操作，否则则创建队列
    channel.queue_declare(queue=&amp;apos;name&amp;apos;)

    def callback(ch, method, properties, body):
        print(&amp;quot; [x] Received %r&amp;quot; % body)

    channel.basic_consume(callback,
                          queue=&amp;apos;name&amp;apos;,
                          no_ack=True) #接收消息不进行确认

    print(&amp;apos; [*] Waiting for messages. To exit press CTRL+C&amp;apos;)
    channel.start_consuming()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-消息持久化&quot;&gt;&lt;a href=&quot;#2-消息持久化&quot; class=&quot;headerlink&quot; title=&quot;2. 消息持久化&quot;&gt;&lt;/a&gt;2. 消息持久化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;    channel.queue_declare(queue=&amp;apos;name&amp;apos;,durable=True)
已经存在的队列是不能再进行持久化设置的，所以在只有创建队列的时候设置持久化选项
    basc_ack = (delivery_tag= method.delivry_tag)

查看当前所有的queue  XX
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-消息公平分发&quot;&gt;&lt;a href=&quot;#3-消息公平分发&quot; class=&quot;headerlink&quot; title=&quot;3. 消息公平分发&quot;&gt;&lt;/a&gt;3. 消息公平分发&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/qBwPkju.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;只在消费者添加
channel.basic_qos(prefetch_count=1)

示例代码：

rabbit_slb_send.py
    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import pika

    connection = pika.BlockingConnection(pika.ConnectionParameters(
                   &amp;apos;192.168.137.6&amp;apos;))
    channel = connection.channel()

    #声明queue
    channel.queue_declare(queue=&amp;apos;task_queue&amp;apos;)

    #n RabbitMQ a message can never be sent directly to the queue, it always needs to go through an exchange.
    import sys

    message = &amp;apos; &amp;apos;.join(sys.argv[1:]) or &amp;quot;Hello World!&amp;quot;
    channel.basic_publish(exchange=&amp;apos;&amp;apos;,
                          routing_key=&amp;apos;task_queue&amp;apos;,
                          body=message,
                          properties=pika.BasicProperties(
                          delivery_mode = 2, # make message persistent
                          ))
    print(&amp;quot; [x] Sent %r&amp;quot; % message)
    connection.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-exchange路由&quot;&gt;&lt;a href=&quot;#4-exchange路由&quot; class=&quot;headerlink&quot; title=&quot;4. exchange路由&quot;&gt;&lt;/a&gt;4. exchange路由&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/MFX1LTo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;publisher.py

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import pika
    import sys

    connection = pika.BlockingConnection(pika.ConnectionParameters(
            host=&amp;apos;localhost&amp;apos;))
    channel = connection.channel()

    channel.exchange_declare(exchange=&amp;apos;logs&amp;apos;,
                             type=&amp;apos;fanout&amp;apos;)

    message = &amp;apos; &amp;apos;.join(sys.argv[1:]) or &amp;quot;info: Hello World!&amp;quot;
    channel.basic_publish(exchange=&amp;apos;logs&amp;apos;,
                          routing_key=&amp;apos;&amp;apos;,
                          body=message)
    print(&amp;quot; [x] Sent %r&amp;quot; % message)
    connection.close()

subscriber.py

    import pika

    connection = pika.BlockingConnection(pika.ConnectionParameters(
            host=&amp;apos;localhost&amp;apos;))
    channel = connection.channel()

    channel.exchange_declare(exchange=&amp;apos;logs&amp;apos;,
                             type=&amp;apos;fanout&amp;apos;)

    result = channel.queue_declare(exclusive=True) #不指定queue名字,rabbit会随机分配一个名字,exclusive=True会在使用此queue的消费者断开后,自动将queue删除
    queue_name = result.method.queue

    channel.queue_bind(exchange=&amp;apos;logs&amp;apos;,
                       queue=queue_name)

    print(&amp;apos; [*] Waiting for logs. To exit press CTRL+C&amp;apos;)

    def callback(ch, method, properties, body):
        print(&amp;quot; [x] %r&amp;quot; % body)

    channel.basic_consume(callback,
                          queue=queue_name,
                          no_ack=True)

    channel.start_consuming()
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day09&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5248247.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day09</title>
    <link href="http://blog.songqingbo.cn/2016/03/12/s12-20160312-day09/"/>
    <id>http://blog.songqingbo.cn/2016/03/12/s12-20160312-day09/</id>
    <published>2016-03-12T07:30:00.000Z</published>
    <updated>2016-07-07T03:01:23.952Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day08&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5227251.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5227251.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day09&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5248247.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5248247.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###推荐电影###&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;权利的游戏:冰与火之歌&amp;gt;  &amp;lt;纸牌屋&amp;gt; &amp;lt;绝命毒师&amp;gt;
《林大看美国》
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;一、回顾进程、线程&quot;&gt;&lt;a href=&quot;#一、回顾进程、线程&quot; class=&quot;headerlink&quot; title=&quot;一、回顾进程、线程&quot;&gt;&lt;/a&gt;一、回顾进程、线程&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;python调用C的原生线程
GIL(全局解释器)防止数据被修改异常。使用线程锁控制同时仅有一个线程对数据有操作权限
全局解释器限制的是原生C线程，
python同一时刻只有一个线程
python会处理不同cpu核之间的进程切换
父进程与子进程之间默认不能共享数据
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取线程的数据&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import time,threading

data = [] #列表是一个安全的内存空间，可以不用加线程锁
def run(n):
    &amp;apos;&amp;apos;&amp;apos;
    定义一个run方法，返回的n的n次方
    :param n:
    :return:
    &amp;apos;&amp;apos;&amp;apos;
    data.append(n**n)
    return n**n
#创建一个多线程
t = threading.Thread(target=run,args=[8,])
t.start()
t.join() #起阻塞作用，让主进程等待线程执行完再执行主进程  默认无限期的等待，添加一个超时时间timeout=3.在守护线程下面是不好使的
print(data)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、-队列&quot;&gt;&lt;a href=&quot;#二、-队列&quot; class=&quot;headerlink&quot; title=&quot;二、 队列&quot;&gt;&lt;/a&gt;二、 队列&lt;/h2&gt;&lt;h3 id=&quot;1-先进先出&quot;&gt;&lt;a href=&quot;#1-先进先出&quot; class=&quot;headerlink&quot; title=&quot;1.    先进先出&quot;&gt;&lt;/a&gt;1.    先进先出&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;python队列queue默认的是先进先出。
import queue
Queue = queue.Queue(maxsize=5)
Queue.put((2,[&amp;quot;swht&amp;quot;,&amp;quot;shen&amp;quot;]))
Queue.put((5,{&amp;quot;name&amp;quot;:&amp;quot;swht&amp;quot;}))
Queue.put((1,&amp;quot;sdsd&amp;quot;),timeout=2)
for i in range(Queue._qsize()):
    print(&amp;quot;data%s:%s&amp;quot; % (i,Queue.get()))
返回结果：
data0:(2, [&amp;apos;swht&amp;apos;, &amp;apos;shen&amp;apos;])
data1:(5, {&amp;apos;name&amp;apos;: &amp;apos;swht&amp;apos;})
data2:(1, &amp;apos;sdsd&amp;apos;)    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-后进先出&quot;&gt;&lt;a href=&quot;#2-后进先出&quot; class=&quot;headerlink&quot; title=&quot;2.    后进先出&quot;&gt;&lt;/a&gt;2.    后进先出&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;python队列支持后面进去的消息最先被取出。
    python队列queue默认的是先进先出。
import queue
Queue = queue.LifoQueue(maxsize=5)
Queue.put((2,[&amp;quot;swht&amp;quot;,&amp;quot;shen&amp;quot;]))
Queue.put((5,{&amp;quot;name&amp;quot;:&amp;quot;swht&amp;quot;}))
Queue.put((1,&amp;quot;sdsd&amp;quot;),timeout=2)
for i in range(Queue._qsize()):
    print(&amp;quot;data%s:%s&amp;quot; % (i,Queue.get()))
返回结果：
data0:(1, &amp;apos;sdsd&amp;apos;)
data1:(5, {&amp;apos;name&amp;apos;: &amp;apos;swht&amp;apos;})
data2:(2, [&amp;apos;swht&amp;apos;, &amp;apos;shen&amp;apos;])
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-按照优先级&quot;&gt;&lt;a href=&quot;#3-按照优先级&quot; class=&quot;headerlink&quot; title=&quot;3.    按照优先级&quot;&gt;&lt;/a&gt;3.    按照优先级&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;python queue支持设置优先级，取消息可以安装优先级顺序取出消息
import queue
Queue = queue.PriorityQueue(maxsize=5)
Queue.put((2,[&amp;quot;swht&amp;quot;,&amp;quot;shen&amp;quot;]))
Queue.put((5,{&amp;quot;name&amp;quot;:&amp;quot;swht&amp;quot;}))
Queue.put((1,&amp;quot;sdsd&amp;quot;),timeout=2)
for i in range(Queue._qsize()):
    print(&amp;quot;data%s:%s&amp;quot; % (i,Queue.get()))
返回结果：
data0:(1, &amp;apos;sdsd&amp;apos;)
data1:(2, [&amp;apos;swht&amp;apos;, &amp;apos;shen&amp;apos;])
data2:(5, {&amp;apos;name&amp;apos;: &amp;apos;swht&amp;apos;})
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;生产者-消费者模型：&quot;&gt;&lt;a href=&quot;#生产者-消费者模型：&quot; class=&quot;headerlink&quot; title=&quot;生产者-消费者模型：&quot;&gt;&lt;/a&gt;生产者-消费者模型：&lt;/h3&gt;&lt;h4 id=&quot;1-一对一：&quot;&gt;&lt;a href=&quot;#1-一对一：&quot; class=&quot;headerlink&quot; title=&quot;1.一对一：&quot;&gt;&lt;/a&gt;1.一对一：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;import threading,queue,time
def consumer(n):
&amp;apos;&amp;apos;&amp;apos;
消费者，消费生产者产生的消息、数据
:param n: 消费者标志
:return:
&amp;apos;&amp;apos;&amp;apos;
while True:
print(&amp;quot;\033[32;1m消费者[%s]\033[0m 获取消息 %s&amp;quot; % (n,q.get()))
time.sleep(1)
q.task_done() #消费者等待生产者生产消息

def prodeucer(n):
&amp;apos;&amp;apos;&amp;apos;
生产者，生产消息、数据
:param n: 生产者标志
:return:
&amp;apos;&amp;apos;&amp;apos;
count = 1
while True:
print(&amp;quot;\033[31;1m生产者[%s]\033[0m 生产消息 %s&amp;quot; % (n,count))
q.put(count)
count += 1
q.join() #生产者阻塞
print(&amp;quot;==================&amp;quot;) #发出信号：消息已经生产

q = queue.Queue()
c1 = threading.Thread(target=consumer,args=[1,])

p1 = threading.Thread(target=prodeucer,args=[&amp;quot;swht&amp;quot;,])

c1.start()
p1.start()

结果：

生产者[swht] 生产消息 1
消费者[1] 获取消息 1
==================
生产者[swht] 生产消息 2
消费者[1] 获取消息 2
==================
生产者[swht] 生产消息 3
消费者[1] 获取消息 3
==================
生产者[swht] 生产消息 4
消费者[1] 获取消息 4
==================
生产者[swht] 生产消息 5
消费者[1] 获取消息 5
==================
生产者[swht] 生产消息 6
消费者[1] 获取消息 6
==================
生产者[swht] 生产消息 7
消费者[1] 获取消息 7
==================
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-一对多：&quot;&gt;&lt;a href=&quot;#2-一对多：&quot; class=&quot;headerlink&quot; title=&quot;2.一对多：&quot;&gt;&lt;/a&gt;2.一对多：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;import threading,queue,time
def consumer(n):
    &amp;apos;&amp;apos;&amp;apos;
    消费者，消费生产者产生的消息、数据
    :param n: 消费者标志
    :return:
    &amp;apos;&amp;apos;&amp;apos;
    while True:
        print(&amp;quot;\033[32;1m消费者[%s]\033[0m 获取消息 %s&amp;quot; % (n,q.get()))
        time.sleep(1)
        q.task_done() #消费者等待生产者生产消息

def prodeucer(n):
    &amp;apos;&amp;apos;&amp;apos;
    生产者，生产消息、数据
    :param n: 生产者标志
    :return:
    &amp;apos;&amp;apos;&amp;apos;
    count = 1
    while True:
        print(&amp;quot;\033[31;1m生产者[%s]\033[0m 生产消息 %s&amp;quot; % (n,count))
        q.put(count)
        count += 1
        q.join() #生产者阻塞
        print(&amp;quot;==================&amp;quot;) #发出信号：消息已经生产

q = queue.Queue()
c1 = threading.Thread(target=consumer,args=[1,])
c2 = threading.Thread(target=consumer,args=[2,])
c3 = threading.Thread(target=consumer,args=[3,])
p1 = threading.Thread(target=prodeucer,args=[&amp;quot;swht&amp;quot;,])

c1.start()
c2.start()
c3.start()
p1.start()

结果：

生产者[swht] 生产消息 1
消费者[1] 获取消息 1
==================
生产者[swht] 生产消息 2
消费者[2] 获取消息 2
==================
生产者[swht] 生产消息 3
消费者[3] 获取消息 3
==================
生产者[swht] 生产消息 4
消费者[1] 获取消息 4
==================
生产者[swht] 生产消息 5
消费者[2] 获取消息 5
==================
生产者[swht] 生产消息 6
消费者[3] 获取消息 6
==================
生产者[swht] 生产消息 7
消费者[1] 获取消息 7
==================
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;3-多对多：&quot;&gt;&lt;a href=&quot;#3-多对多：&quot; class=&quot;headerlink&quot; title=&quot;3.多对多：&quot;&gt;&lt;/a&gt;3.多对多：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;import threading,queue,time
def consumer(n):
    &amp;apos;&amp;apos;&amp;apos;
    消费者，消费生产者产生的消息、数据
    :param n: 消费者标志
    :return:
    &amp;apos;&amp;apos;&amp;apos;
    while True:
        print(&amp;quot;\033[32;1m消费者[%s]\033[0m 获取消息 %s&amp;quot; % (n,q.get()))
        time.sleep(1)
        q.task_done() #消费者等待生产者生产消息

def prodeucer(n):
    &amp;apos;&amp;apos;&amp;apos;
    生产者，生产消息、数据
    :param n: 生产者标志
    :return:
    &amp;apos;&amp;apos;&amp;apos;
    count = 1
    while True:
        print(&amp;quot;\033[31;1m生产者[%s]\033[0m 生产消息 %s&amp;quot; % (n,count))
        q.put(count)
        count += 1
        q.join() #生产者阻塞
        print(&amp;quot;==================&amp;quot;) #发出信号：消息已经生产

q = queue.Queue()
c1 = threading.Thread(target=consumer,args=[1,])
c2 = threading.Thread(target=consumer,args=[2,])
c3 = threading.Thread(target=consumer,args=[3,])
p1 = threading.Thread(target=prodeucer,args=[&amp;quot;swht&amp;quot;,])
p2 = threading.Thread(target=prodeucer,args=[&amp;quot;shen&amp;quot;,])
p3 = threading.Thread(target=prodeucer,args=[&amp;quot;alex&amp;quot;,])

c1.start()
c2.start()
c3.start()
p1.start()
p2.start()
p3.start()

结果：

生产者[swht] 生产消息 1
生产者[shen] 生产消息 1
消费者[1] 获取消息 1
生产者[alex] 生产消息 1
消费者[2] 获取消息 1
消费者[3] 获取消息 1
==================
生产者[swht] 生产消息 2
消费者[1] 获取消息 2
==================
生产者[swht] 生产消息 3
消费者[2] 获取消息 3
==================
生产者[swht] 生产消息 4
消费者[3] 获取消息 4
==================
生产者[alex] 生产消息 2
消费者[1] 获取消息 2
==================
生产者[swht] 生产消息 5
==================
生产者[shen] 生产消息 2
消费者[2] 获取消息 2
消费者[3] 获取消息 5
==================
生产者[swht] 生产消息 6
==================
生产者[shen] 生产消息 3
消费者[1] 获取消息 3
消费者[3] 获取消息 6
==================
生产者[shen] 生产消息 4
消费者[2] 获取消息 4
==================
生产者[shen] 生产消息 5
消费者[1] 获取消息 5
==================
生产者[shen] 生产消息 6
消费者[3] 获取消息 6
==================
生产者[shen] 生产消息 7
消费者[2] 获取消息 7
==================
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、协程&quot;&gt;&lt;a href=&quot;#三、协程&quot; class=&quot;headerlink&quot; title=&quot;三、协程&quot;&gt;&lt;/a&gt;三、协程&lt;/h2&gt;&lt;p&gt;协程是一种用户态的轻量级线程。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此：协程能保留上一次调用时的状态（即所有局部状态的一个特定组合），每次过程重入时，就相当于进入上一次调用的状态，换种说法：进入上一次离开时所处逻辑流的位置。&lt;/p&gt;
&lt;p&gt;通过协程进行线程内切换，虽然还是串行的执行，但是因为切换速度快，可以达到一种并发的效果。用户自行控制&lt;/p&gt;
&lt;p&gt;协程的好处：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;无需线程上下文切换的开销
无需原子操作锁定及同步的开销
方便切换控制流，简化编程模型
高并发+高扩展性+低成本：一个CPU支持上万的协程都不是问题。所以很适合用于高并发处理。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;缺点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;无法利用多核资源：协程的本质是个单线程,它不能同时将 单个CPU 的多个核用上,协程需要和进程配合才能运行在多CPU上.当然我们日常所编写的绝大部分应用都没有这个必要，除非是cpu密集型应用。
进行阻塞（Blocking）操作（如IO时）会阻塞掉整个程序
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过&lt;strong&gt;yeild&lt;/strong&gt;简单模拟协程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import time
import queue
def consumer(name):
    print(&amp;quot;---&amp;gt;starting eating baozi...&amp;quot;)
    while True:
        new_baozi = yield
        print(&amp;quot;[%s] is eating baozi %s&amp;quot; % (name,new_baozi))
        #time.sleep(1)

def producer():

    r = con.__next__()
    r = con2.__next__()
    n = 0
    while n &amp;lt; 5:
        n +=1
        con.send(n)
        con2.send(n)
        print(&amp;quot;\033[32;1m[producer]\033[0m is making baozi %s&amp;quot; %n )


if __name__ == &amp;apos;__main__&amp;apos;:
    con = consumer(&amp;quot;c1&amp;quot;)
    con2 = consumer(&amp;quot;c2&amp;quot;)
    p = producer()

&amp;apos;&amp;apos;&amp;apos;    
结果：
---&amp;gt;starting eating baozi...
---&amp;gt;starting eating baozi...
[c1] is eating baozi 1
[c2] is eating baozi 1
[producer] is making baozi 1
[c1] is eating baozi 2
[c2] is eating baozi 2
[producer] is making baozi 2
[c1] is eating baozi 3
[c2] is eating baozi 3
[producer] is making baozi 3
[c1] is eating baozi 4
[c2] is eating baozi 4
[producer] is making baozi 4
[c1] is eating baozi 5
[c2] is eating baozi 5
[producer] is making baozi 5
&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;greenlet模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;greenlet模块可以简单的实现协程之间的切换&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from greenlet import greenlet
def test1():
    print(12)
    gr2.switch()
    print(34)
    gr2.switch()
def test2():
    print(56)
    gr1.switch()
    print(78)

gr1 = greenlet(test1)
gr2 = greenlet(test2)
gr1.switch()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;gevent模块&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gevent 是一个第三方库，可以轻松通过gevent实现并发同步或异步编程，在gevent中用到的主要模式是Greenlet, 它是以C扩展模块形式接入Python的轻量级协程。 Greenlet全部运行在主程序操作系统进程的内部，但它们被协作式地调度。&lt;/p&gt;
&lt;p&gt;gevent模块实现协程在遇到IO阻塞时进行切换的功能。避免了协程的致命缺点：一个协程阻塞，整个线程宕掉&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import gevent

def foo():
    print(&amp;apos;\033[32;1mRunning in foo\033[0m&amp;apos;)
    gevent.sleep(1)
    print(&amp;apos;\033[32;1mExplicit context switch to foo again\033[0m&amp;apos;)

def bar():
    print(&amp;apos;Explicit context to bar&amp;apos;)
    gevent.sleep(1)
    print(&amp;apos;Implicit context switch back to bar&amp;apos;)

def exe():
    print(&amp;apos;\033[31;1mExplicit context to bar\033[0m&amp;apos;)
    gevent.sleep(1)
    print(&amp;apos;\033[31;1mImplicit context switch back to bar\033[0m&amp;apos;)

gevent.joinall([
    gevent.spawn(foo),
    gevent.spawn(bar),
    gevent.spawn(exe),
])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;附注：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gevent模块安装：
1. windows环境：

    使用pip进行安装：pip2 install gevent 
                   pip3 install gevent

2. Linux环境：

    使用pip进行安装：pip2 install gevent 
                      pip3 install gevent
    使用源码包编译安装：
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、select、poll、epoll多路IO阻塞&quot;&gt;&lt;a href=&quot;#四、select、poll、epoll多路IO阻塞&quot; class=&quot;headerlink&quot; title=&quot;四、select、poll、epoll多路IO阻塞&quot;&gt;&lt;/a&gt;四、select、poll、epoll多路IO阻塞&lt;/h2&gt;&lt;h3 id=&quot;1-select&quot;&gt;&lt;a href=&quot;#1-select&quot; class=&quot;headerlink&quot; title=&quot;1.select&quot;&gt;&lt;/a&gt;1.select&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点，事实上从现在看来，这也是它所剩不多的优点之一。

select的一个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，不过可以通过修改宏定义甚至重新编译内核的方式提升这一限制。

select()所维护的存储大量文件描述符的数据结构，随着文件描述符数量的增大，其复制的开销也线性增长。同时，由于网络响应时间的延迟使得大量TCP连接处于非活跃状态，但调用select()会对所有socket进行一次线性扫描，所以这也浪费了一定的开销。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-poll&quot;&gt;&lt;a href=&quot;#2-poll&quot; class=&quot;headerlink&quot; title=&quot;2.poll&quot;&gt;&lt;/a&gt;2.poll&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;poll和select同样存在一个缺点就是，包含大量文件描述符的数组被整体复制于用户态和内核的地址空间之间，而不论这些文件描述符是否就绪，它的开销随着文件描述符数量的增加而线性增大。

select()和poll()将就绪的文件描述符告诉进程后，如果进程没有对其进行IO操作，那么下次调用select()和poll()的时候将再次报告这些文件描述符，所以它们一般不会丢失就绪的消息，这种方式称为水平触发（Level Triggered）。    
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-epoll&quot;&gt;&lt;a href=&quot;#3-epoll&quot; class=&quot;headerlink&quot; title=&quot;3.epoll&quot;&gt;&lt;/a&gt;3.epoll&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;epoll可以同时支持水平触发和边缘触发（Edge Triggered，只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，那么它将不会再次告知，这种方式称为边缘触发），理论上边缘触发的性能要更高一些，但是代码实现相当复杂。

epoll同样只告知那些就绪的文件描述符，而且当我们调用epoll_wait()获得就绪文件描述符时，返回的不是实际的描述符，而是一个代表就绪描述符数量的值，你只需要去epoll指定的一个数组中依次取得相应数量的文件描述符即可，这里也使用了内存映射（mmap）技术，这样便彻底省掉了这些文件描述符在系统调用时复制的开销。

另一个本质的改进在于epoll采用基于事件的就绪通知方式。在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;select示例：&quot;&gt;&lt;a href=&quot;#select示例：&quot; class=&quot;headerlink&quot; title=&quot;select示例：&quot;&gt;&lt;/a&gt;select示例：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;server端

#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
&amp;apos;&amp;apos;&amp;apos;
通过echo server例子了解select 是如何通过单进程实现同时处理多个非阻塞的socket连接
&amp;apos;&amp;apos;&amp;apos;

import select
import socket
import sys
import queue

# 创建一个TCP/IP socket
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setblocking(False) #设置非阻塞 ==&amp;gt;server.setblocking(0)

# 绑定端口和ip地址
server_address = (&amp;apos;localhost&amp;apos;, 10000)
print(sys.stderr, &amp;apos;starting up on %s port %s&amp;apos; % server_address) #
# print &amp;gt;&amp;gt; sys.stderr,&amp;apos;starting up on %s port %s&amp;apos; % server_address
server.bind(server_address)

# 监听连接，允许同时有5个链接
server.listen(5)
#select()方法接收并监控3个通信列表
#1.所有的输入数据，即外部发过来的数据；
#2.监控和监听所要发出去的数据；
#3.监控错误信息
# 创建输入列表将输入的信息传递给select()
inputs = [ server ]

# 创建输出列表将输出的信息传递给select()
outputs = [ ]

#创建一个缓存队列，用来存储每个连接的输入或输出的数据，然后由select去出来再发出去。
message_queues = {}
#程序的主循环，当调用select()时会阻塞和等待直到新的连接和数据进来
while inputs:

    # Wait for at least one of the sockets to be ready for processing
    print( &amp;apos;\nwaiting for the next event&amp;apos;)
    #readable 代表socket连接有数据可以接收(resv)
    #writable 代表socket连接有可以进行发送(send)的数据
    #exceptional 存放连接通信出现的error错误信息。这里使用inputs信息代替
    readable, writable, exceptional = select.select(inputs, outputs, inputs)
    # Handle inputs
    #readsble list中可以有3种可能状态，第一种是如果这个socket是main&amp;quot;server&amp;quot; socket,它负责监听客户端的连接，
    for s in readable:
        # 如果这个main server socket出现在readable里，那代表这是server端已经ready来接收一个新的连接进来了
        if s is server:
            # A &amp;quot;readable&amp;quot; server socket is ready to accept a connection
            connection, client_address = s.accept() #接收一个新的连接
            print(&amp;apos;new connection from&amp;apos;, client_address) #打印客户端连接的地址
            connection.setblocking(False) #设置成非阻塞状态
            inputs.append(connection) #将链接添加到inputs链表中

            # Give the connection a queue for data we want to send
            message_queues[connection] = queue.Queue()
        #这种情况是这个socket是已经建立了的连接，它把数据发了过来，这个时候就可以通过recv()来接收它发过来的数据，
        # 然后把接收到的数据放到queue里，这样就可以把接收到的数据再传回给客户端了。
        else:
            data = s.recv(1024) #接收客户端传递的数据
            if data: #如果接收的数据不为空
                # A readable client socket has data
                print(sys.stderr, &amp;apos;received &amp;quot;%s&amp;quot; from %s&amp;apos; % (data, s.getpeername()) )
                message_queues[s].put(data) #从缓存队列里获取数据然后将其传递给客户端
                # 如果连接不在发送列表中，则将其添加到发送列表中
                if s not in outputs:
                    outputs.append(s)
            else: #如果接收的数据为空
                # Interpret empty result as closed connection
                print(&amp;apos;closing&amp;apos;, client_address, &amp;apos;after reading no data&amp;apos;)
                # Stop listening for input on the connection
                #停止监听这个连接
                # 这种情况就是这个客户端已经断开了，所以你再通过recv()接收到的数据就为空了，
                # 所以这个时候你就可以把这个跟客户端的连接关闭了。
                if s in outputs:
                    outputs.remove(s)  #既然客户端都断开了，我就不用再给它返回数据了，所以这时候如果这个客户端的连接对象还在outputs列表中，就把它删掉
                inputs.remove(s)    #inputs中也删除掉
                s.close()           #把这个连接关闭掉

                # Remove message queue
                del message_queues[s]
    # 对于writable list中的socket，也有几种状态，如果这个客户端连接在跟它对应的queue里有数据，就把这个数据取出来再发回给这个客户端，否则就把这个连接从output list中移除，
    # 这样下一次循环select()调用时检测到outputs list中没有这个连接，那就会认为这个连接还处于非活动状态
    for s in writable:
        try:
            next_msg = message_queues[s].get_nowait() #获取信息不阻塞等待
        except queue.Empty:
            # No messages waiting so stop checking for writability.
            print(&amp;apos;output queue for&amp;apos;, s.getpeername(), &amp;apos;is empty&amp;apos;)
            outputs.remove(s) #队列为空，则从发送列表中删除连接
        else:
            print( &amp;apos;sending &amp;quot;%s&amp;quot; to %s&amp;apos; % (next_msg, s.getpeername()))
            s.send(next_msg) #当从队列中获取到信息时将其发送给客户端
    #果在跟某个socket连接通信过程中出了错误，就把这个连接对象在inputs\outputs\message_queue中都删除，
    # 再把连接关闭掉
    for s in exceptional:
        print(&amp;apos;handling exceptional condition for&amp;apos;, s.getpeername() )
        # Stop listening for input on the connection
        inputs.remove(s)
        if s in outputs:
            outputs.remove(s)
        s.close()

        # Remove message queue
        del message_queues[s]

client端
#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import socket
import sys

messages = [ &amp;apos;This is the message. &amp;apos;,
             &amp;apos;It will be sent &amp;apos;,
             &amp;apos;in parts.&amp;apos;,
             ]
server_address = (&amp;apos;localhost&amp;apos;, 10000)

# Create a TCP/IP socket
socks = [ socket.socket(socket.AF_INET, socket.SOCK_STREAM),
          socket.socket(socket.AF_INET, socket.SOCK_STREAM),
          ]

# Connect the socket to the port where the server is listening
print(sys.stderr, &amp;apos;connecting to %s port %s&amp;apos; % server_address)
for s in socks:
    s.connect(server_address)

for message in messages:

    # Send messages on both sockets
    for s in socks:
        print(sys.stderr, &amp;apos;%s: sending &amp;quot;%s&amp;quot;&amp;apos; % (s.getsockname(), message))
        s.send(bytes(message,&amp;apos;utf8&amp;apos;))

    # Read responses on both sockets
    for s in socks:
        data = s.recv(1024)
        print(sys.stderr, &amp;apos;%s: received &amp;quot;%s&amp;quot;&amp;apos; % (s.getsockname(), data))
        if not data:
            print(sys.stderr, &amp;apos;closing socket&amp;apos;, s.getsockname())
            s.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;五、堡垒机模块&quot;&gt;&lt;a href=&quot;#五、堡垒机模块&quot; class=&quot;headerlink&quot; title=&quot;五、堡垒机模块&quot;&gt;&lt;/a&gt;五、堡垒机模块&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5095821.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5095821.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-模块安装：&quot;&gt;&lt;a href=&quot;#1-模块安装：&quot; class=&quot;headerlink&quot; title=&quot;1.模块安装：&quot;&gt;&lt;/a&gt;1.模块安装：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;pip2 install paramiko

pip3 install paramiko  
 #win下python3安装paramiko模块涉及到编译工具的问题没有安装成功，在Linux环境下面测试下面的代码正常。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-示例代码&quot;&gt;&lt;a href=&quot;#2-示例代码&quot; class=&quot;headerlink&quot; title=&quot;2.示例代码&quot;&gt;&lt;/a&gt;2.示例代码&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import paramiko
&amp;apos;&amp;apos;&amp;apos;
基于用户名密码连接
&amp;apos;&amp;apos;&amp;apos;
# 创建SSH对象
ssh = paramiko.SSHClient()
# 允许连接不在know_hosts文件中的主机
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
# 连接服务器
ssh.connect(hostname=&amp;apos;192.168.137.5&amp;apos;, port=22, username=&amp;apos;root&amp;apos;, password=&amp;apos;shen1234&amp;apos;)

# 执行命令
stdin, stdout, stderr = ssh.exec_command(&amp;apos;df -h&amp;apos;)
# 获取命令结果
result = stdout.read()
#打印结果
print(result.decode())
# 关闭连接
ssh.close()

import paramiko

transport = paramiko.Transport((&amp;apos;192.168.137.5&amp;apos;, 22))
transport.connect(username=&amp;apos;root&amp;apos;, password=&amp;apos;shen1234&amp;apos;)

ssh = paramiko.SSHClient()
ssh._transport = transport

stdin, stdout, stderr = ssh.exec_command(&amp;apos;ifconfig&amp;apos;)
print(stdout.read().decode())

transport.close()

import paramiko

def ssh_connet(host,user,shell):
    &amp;apos;&amp;apos;&amp;apos;
    实现ssh远程登录服务器进行相关操作
    :param host: 远程服务器地址和端口号 host_ip:port
    :param user: 远程服务器用户名密码 user:passwd
    :parm shell: 需要执行的shell命令
    :return: 返回用户执行shell命令的
    &amp;apos;&amp;apos;&amp;apos;
    host = host.split(&amp;quot;:&amp;quot;)
    user = user.split(&amp;quot;:&amp;quot;)
    transport = paramiko.Transport((host[0], int(host[1])))
    transport.connect(username=user[0], password=user[1])
    ssh = paramiko.SSHClient()
    ssh._transport = transport
    stdin, stdout, stderr = ssh.exec_command(shell)
    reaults = stdout.read().decode()
    transport.close()
    return reaults
print(ssh_connet(&amp;quot;192.168.137.5:22&amp;quot;,&amp;quot;root:shen1234&amp;quot;,&amp;quot;df -h&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;基于公钥密钥连接：&quot;&gt;&lt;a href=&quot;#基于公钥密钥连接：&quot; class=&quot;headerlink&quot; title=&quot;基于公钥密钥连接：&quot;&gt;&lt;/a&gt;基于公钥密钥连接：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import paramiko

def ssh_connet(host,user,private_key,shell):
    &amp;apos;&amp;apos;&amp;apos;
    实现ssh远程登录服务器进行相关操作
    :param host: 远程服务器地址和端口号 host_ip:port
    :param user: 远程服务器用户名密码 user:passwd
    :param private_key: 基于公钥的形式登录
    :parm shell: 需要执行的shell命令
    :return: 返回用户执行shell命令的
    &amp;apos;&amp;apos;&amp;apos;
    host = host.split(&amp;quot;:&amp;quot;)
    transport = paramiko.Transport((host[0], int(host[1])))
    transport.connect(username=user[0], key=private_key)
    ssh = paramiko.SSHClient()
    ssh._transport = transport
    stdin, stdout, stderr = ssh.exec_command(shell)
    reaults = stdout.read().decode()
    transport.close()
    return reaults
private_key = paramiko.RSAKey.from_private_key_file(&amp;apos;/home/auto/.ssh/id_rsa&amp;apos;)
print(ssh_connet(&amp;quot;192.168.137.5:22&amp;quot;,&amp;quot;root&amp;quot;,private_key,&amp;quot;df -h&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;六、mysql操作模块&quot;&gt;&lt;a href=&quot;#六、mysql操作模块&quot; class=&quot;headerlink&quot; title=&quot;六、mysql操作模块&quot;&gt;&lt;/a&gt;六、mysql操作模块&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;rollback()事务回滚
excutemany()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;作业：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.    select（）代码，注释
2.    主机批量管理工具
    1.    saltstack文档阅读（常用架构弄清楚）
    2.    修改主机批量管理工具的架构
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day08&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5227251.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day08</title>
    <link href="http://blog.songqingbo.cn/2016/03/05/s12-20160305-day08/"/>
    <id>http://blog.songqingbo.cn/2016/03/05/s12-20160305-day08/</id>
    <published>2016-03-05T07:30:00.000Z</published>
    <updated>2016-07-07T03:07:16.544Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day07&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5213184.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5213184.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day08&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5227251.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5227251.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;###推荐电影###&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;绝美之城  上帝之城 | 千与千寻  龙猫 卡尔的移动城堡
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过实例私有变量，需要将在类中封装一个方法，该方法返回私有变量的值&lt;/p&gt;
&lt;h2 id=&quot;一、socket深入&quot;&gt;&lt;a href=&quot;#一、socket深入&quot; class=&quot;headerlink&quot; title=&quot;一、socket深入&quot;&gt;&lt;/a&gt;一、socket深入&lt;/h2&gt;&lt;h3 id=&quot;1-概念&quot;&gt;&lt;a href=&quot;#1-概念&quot; class=&quot;headerlink&quot; title=&quot;1.概念&quot;&gt;&lt;/a&gt;1.概念&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Unix的进程通信机制。一个完整的socket有一个本地唯一的socket号，由操作系统分配。socket是面向客户/服务器模型而设计的，针对客户和服务器程序提供不同的socket系统调用。socket利用客户/服务器模式巧妙的解决了进程之间建立通信连接的问题。

套接字（socket）是通信的基石，是支持TCP/IP协议的网络通信的基本操作单元。它是网络通信过程中端点的抽象表示，包含进行网络通信必须的五种信息：连接使用的协议，本地主机的IP地址，本地进程的协议端口，远地主机的IP地址，远地进程的协议端口。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-地址簇&quot;&gt;&lt;a href=&quot;#2-地址簇&quot; class=&quot;headerlink&quot; title=&quot;2.地址簇&quot;&gt;&lt;/a&gt;2.地址簇&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;socket.AF_UNIX unix本机进程间通信 
socket.AF_INET　使用IPV4地址协议进行进程间通信
socket.AF_INET6  使用IPV6地址协议进行进程间通信
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-套接字类型&quot;&gt;&lt;a href=&quot;#3-套接字类型&quot; class=&quot;headerlink&quot; title=&quot;3.套接字类型&quot;&gt;&lt;/a&gt;3.套接字类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;socket.SOCK_STREAM  #使用tcp协议
socket.SOCK_DGRAM   #使用udp协议
socket.SOCK_RAW     #原始套接字，普通的套接字无法处理ICMP、IFMP等网络报文，而SOCK_RAM可以。其次SOCK_RAM也可以处理特殊的IPV4报文,此外，利用原始套接字可以通过IP_HDRINCL套接字选项由用户构造IP头。
socket.SOCK_RDM    #是一种可靠的UDP形式，即保证交付数据报但不保证顺序。SOCK_RAW用来提供对原始协议的低级访问，在需要执行某些特殊操作时使用，如发送ICMP报文。SOCK_RAW通常仅限于高级用户或管理员运行的程序使用。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-socket方法&quot;&gt;&lt;a href=&quot;#4-socket方法&quot; class=&quot;headerlink&quot; title=&quot;4.socket方法&quot;&gt;&lt;/a&gt;4.socket方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. socket.socket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None)
2. socket.socketpair([family[, type[, proto]]])
3. socket.create_connection(address[, timeout[, source_address]])
4. socket.getaddrinfo(host, port, family=0, type=0, proto=0, flags=0) 
    获取要连接的对端主机地址
5. sk.bind(address) 
    将套接字绑定到地址，地址的格式取决于地址簇。在AF_INET下，以元组(host.port)的形式表示地址。
6. sk.listen(backlog) 
    开始监听传入的连接，backlog指定在拒绝连接之前，可以挂起的最大连接数量。backlog等于5，表示内核已经连接到连接请求，但服务器还没有调用accept进行处理的连接个数最大为5.这个值根据内核和服务器物理配置进行设置。
7. sk.setblocking(bool) 
    是否阻塞（默认True），如果设置为False，那么accept和recv时一旦无数据则报错。
8. sk.accept() 
    接受连接并返回（conn,address）,其中conn是新的套接字对象，可以用来接收和发送数据，address是连接客户端的地址。接收TCP客户的连接（阻塞式）等待连接的到来。
9. sk.connect(address)
    连接到address处的套接字。一般，address的格式为元组（hostname,port），如果连接出错，返回socket.err错误。
10. sk.connect_ex(address)
    同上，只是会有返回值，连接成功时返回0，连接失败时会返回编码，例如：10061
11. sk.close()
    关闭套接字
12. sk.recv(bufsize[,flag])
    接收套接字的数据，数据以字符串形式返回。bufsize指定最多可以接收的数量，建议不要超过1024*8。flag提供有关消息的其他信息。通常可以忽略。
13. sk.recvfrom(bufsize[.flag])
    与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址
14. sk.send(string[,flag])
    将string中的数据发送到连接的套接字，返回值是要发送的字节数量，该数量可能小于string的字节大小，即：可能未壮指定内容全部发送
15. sk.sendall(string[,flag])
    将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则跑出异常。内部通过递归调用send将所有内容发送出去。
16.    sk.sendto(string[,flag],address)
    将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。该函数主要用于UDP协议。
17. sk.settimeout(timeout)
    设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如 client 连接最多等待5s ）
18. sk.getpeername()
    返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）
19.    sk.getsockname()
    返回套接字自己的地址，通常在是一个元组（ipaddr,port）
20. socket.gethostname()
    获取程序运行所在计算机的主机名
21.    gethostbyname(name) 
    尝试将给定的主机名解释为一个IP地址。首先将检查当前计算机是否能够解释。如果不能，一个解释请求将发送给一个远程的DNS服务器（远程的DNS服务器 还可能将解释请求转发给另一个DNS服务器，直到该请求可以被处理）。gethostbyname函数返回这个IP地址或在查找失败后引发一个异常。例如： socket.gethostbyname(&amp;apos;www.apicloud.com&amp;apos;)
    扩展形式：socket.gethostbyname_ex(&amp;apos;www.apicloud.com&amp;apos;)
    (&amp;apos;98e86f98d416f10c.7cname.com&amp;apos;, [&amp;apos;www.apicloud.com&amp;apos;], [&amp;apos;117.25.140.17&amp;apos;])
    它返回一个包含三个元素的元组，分别是给定地址的主要的主机名、同一IP地址的可选的主机名的一个列表、关于同一主机的同一接口的其它IP地址的一个列表（列表可能都是空的）。
22. gethostbyaddr(address)
    函数的作用与gethostbyname_ex相同，只是你提供给它的参数是一个IP地址字符串。
    socket.gethostbyaddr(&amp;apos;202.165.102.205&amp;apos;)
    (&amp;apos;homepage.vip.cnb.yahoo.com&amp;apos;, [&amp;apos;www.yahoo.com.cn&amp;apos;], [&amp;apos;202.165.102.205&amp;apos;])
23.    getservbyname(service,protocol)
    函数要求一个服务名（如&amp;apos;telnet&amp;apos;或&amp;apos;ftp&amp;apos;）和一个协议（如&amp;apos;tcp&amp;apos;或&amp;apos;udp&amp;apos;），返回服务所使用的端口号：
    &amp;gt;&amp;gt;&amp;gt; socket.getservbyname(&amp;apos;http&amp;apos;,&amp;apos;tcp&amp;apos;)
    80
    &amp;gt;&amp;gt;&amp;gt; socket.getservbyname(&amp;apos;https&amp;apos;,&amp;apos;tcp&amp;apos;)
    443
    &amp;gt;&amp;gt;&amp;gt; socket.getservbyname(&amp;apos;telnet&amp;apos;,&amp;apos;tcp&amp;apos;)
24.    sk.fileno()
    套接字的文件描述符
    socket.sendfile(file, offset=0, count=None)
    发送文件 ，但目前多数情况下并无什么卵用
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、socketserver&quot;&gt;&lt;a href=&quot;#二、socketserver&quot; class=&quot;headerlink&quot; title=&quot;二、socketserver&quot;&gt;&lt;/a&gt;二、socketserver&lt;/h2&gt;&lt;p&gt;参考链接：&lt;a href=&quot;http://my.oschina.net/u/1433482/blog/190612&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://my.oschina.net/u/1433482/blog/190612&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SocketServer简化了网络服务器的编写。它有4个类：TCPServer，UDPServer，UnixStreamServer，UnixDatagramServer。这4个类是同步进行处理的，另外通过ForkingMixIn和ThreadingMixIn类来支持异步。&lt;/p&gt;
&lt;h3 id=&quot;创建服务器的步骤&quot;&gt;&lt;a href=&quot;#创建服务器的步骤&quot; class=&quot;headerlink&quot; title=&quot;创建服务器的步骤&quot;&gt;&lt;/a&gt;创建服务器的步骤&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;首先，你必须创建一个请求处理类，它是BaseRequestHandler的子类并重载其handle()方法。其次，你必须实例化一个服务器类，传入服务器的地址和请求处理程序类。最后，调用handle_request()(一般是调用其他事件循环或者使用select())或serve_forever()。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;服务器类型&quot;&gt;&lt;a href=&quot;#服务器类型&quot; class=&quot;headerlink&quot; title=&quot;服务器类型&quot;&gt;&lt;/a&gt;服务器类型&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;5种类型：BaseServer，TCPServer，UnixStreamServer，UDPServer，UnixDatagramServer。 注意：BaseServer不直接对外服务。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;服务器对象&quot;&gt;&lt;a href=&quot;#服务器对象&quot; class=&quot;headerlink&quot; title=&quot;服务器对象&quot;&gt;&lt;/a&gt;服务器对象&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;class SocketServer.BaseServer：这是模块中的所有服务器对象的超类。它定义了接口，如下所述，但是大多数的方法不实现，在子类中进行细化。

BaseServer.fileno()：返回服务器监听套接字的整数文件描述符。通常用来传递给select.select(), 以允许一个进程监视多个服务器。

BaseServer.handle_request()：处理单个请求。处理顺序：get_request(), verify_request(), process_request()。如果用户提供handle()方法抛出异常，将调用服务器的handle_error()方法。如果self.timeout内没有请求收到， 将调用handle_timeout()并返回handle_request()。

BaseServer.serve_forever(poll_interval=0.5): 处理请求，直到一个明确的shutdown()请求。每poll_interval秒轮询一次shutdown。忽略self.timeout。如果你需要做周期性的任务，建议放置在其他线程。

BaseServer.shutdown()：告诉serve_forever()循环停止并等待其停止。python2.6版本。

BaseServer.address_family: 地址家族，比如socket.AF_INET和socket.AF_UNIX。

BaseServer.RequestHandlerClass：用户提供的请求处理类，这个类为每个请求创建实例。

BaseServer.server_address：服务器侦听的地址。格式根据协议家族地址的各不相同，请参阅socket模块的文档。

BaseServer.socketSocket：服务器上侦听传入的请求socket对象的服务器。

服务器类支持下面的类变量：

BaseServer.allow_reuse_address：服务器是否允许地址的重用。默认为false ，并且可在子类中更改。

BaseServer.request_queue_size

请求队列的大小。如果单个请求需要很长的时间来处理，服务器忙时请求被放置到队列中，最多可以放request_queue_size个。一旦队列已满，来自客户端的请求将得到 “Connection denied”错误。默认值通常为5 ，但可以被子类覆盖。

BaseServer.socket_type：服务器使用的套接字类型; socket.SOCK_STREAM和socket.SOCK_DGRAM等。

BaseServer.timeout：超时时间，以秒为单位，或 None表示没有超时。如果handle_request()在timeout内没有收到请求，将调用handle_timeout()。

下面方法可以被子类重载，它们对服务器对象的外部用户没有影响。

BaseServer.finish_request()：实际处理RequestHandlerClass发起的请求并调用其handle()方法。 常用。

BaseServer.get_request()：接受socket请求，并返回二元组包含要用于与客户端通信的新socket对象，以及客户端的地址。

BaseServer.handle_error(request, client_address)：如果RequestHandlerClass的handle()方法抛出异常时调用。默认操作是打印traceback到标准输出，并继续处理其他请求。

BaseServer.handle_timeout()：超时处理。默认对于forking服务器是收集退出的子进程状态，threading服务器则什么都不做。

BaseServer.process_request(request, client_address) :调用finish_request()创建RequestHandlerClass的实例。如果需要，此功能可以创建新的进程或线程来处理请求,ForkingMixIn和ThreadingMixIn类做到这点。常用。

BaseServer.server_activate()：通过服务器的构造函数来激活服务器。默认的行为只是监听服务器套接字。可重载。

BaseServer.server_bind()：通过服务器的构造函数中调用绑定socket到所需的地址。可重载。

BaseServer.verify_request(request, client_address)：返回一个布尔值，如果该值为True ，则该请求将被处理，反之请求将被拒绝。此功能可以重写来实现对服务器的访问控制。默认的实现始终返回True。client_address可以限定客户端，比如只处理指定ip区间的请求。 常用。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;请求处理器&quot;&gt;&lt;a href=&quot;#请求处理器&quot; class=&quot;headerlink&quot; title=&quot;请求处理器&quot;&gt;&lt;/a&gt;请求处理器&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;处理器接收数据并决定如何操作。它负责在socket层之上实现协议（i.e., HTTP, XML-RPC, or AMQP)，读取数据，处理并写反应。可以重载的方法如下：

setup(): 准备请求处理. 默认什么都不做，StreamRequestHandler中会创建文件类似的对象以读写socket.

handle(): 处理请求。解析传入的请求，处理数据，并发送响应。默认什么都不做。常用变量：self.request，self.client_address，self.server。

finish(): 环境清理。默认什么都不做，如果setup产生异常，不会执行finish。

通常只需要重载handle。self.request的类型和数据报或流的服务不同。对于流服务，self.request是socket 对象；对于数据报服务，self.request是字符串和socket 。可以在子类StreamRequestHandler或DatagramRequestHandler中重载，重写setup()和finish() ，并提供self.rfile和self.wfile属性。 self.rfile和self.wfile可以读取或写入，以获得请求数据或将数据返回到客户端。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;示例代码&quot;&gt;&lt;a href=&quot;#示例代码&quot; class=&quot;headerlink&quot; title=&quot;示例代码&quot;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.server

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import socketserver

    class MyHandleServer(socketserver.BaseRequestHandler):
        &amp;apos;&amp;apos;&amp;apos;
        定义一个测试socketserver类
        &amp;apos;&amp;apos;&amp;apos;
        def handle(self):
            &amp;apos;&amp;apos;&amp;apos;
            定义一个函数，用来处理每个客户端发来的请求
            :return:
            &amp;apos;&amp;apos;&amp;apos;
            print(&amp;quot;新建立一个连接：&amp;quot;,self.client_address)
            while True:
                try:
                    client_data = self.request.recv(1024)
                    if not client_data:
                        print(&amp;quot;客户端发送的数据为空,主动断开!&amp;quot;,self.client_address)
                        break
                    print(&amp;quot;客户端发来的请求:&amp;quot;,client_data.decode())
                    self.request.send(client_data)
                except ConnectionResetError:
                    print(&amp;quot;客户端主动断开!&amp;quot;,self.client_address)
                    break

    if __name__ == &amp;quot;__main__&amp;quot;:
        HOST,PORT = &amp;quot;127.0.0.1&amp;quot;,5000
        server = socketserver.ThreadingTCPServer((HOST,PORT),MyHandleServer)
        server.serve_forever()


2.client

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    import socket

    ip_port = (&amp;quot;127.0.0.1&amp;quot;,5000)

    sk = socket.socket()
    sk.connect(ip_port)
    while True:
        msg = input(&amp;quot;&amp;gt;&amp;gt;:&amp;quot;).strip()
        if not msg:
            break
        sk.sendall(bytes(msg,&amp;quot;utf8&amp;quot;))
        server_reply = sk.recv(1024)
        print(&amp;quot;服务端返回:&amp;quot;,str(server_reply,&amp;quot;utf8&amp;quot;))
    sk.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、异常处理&quot;&gt;&lt;a href=&quot;#三、异常处理&quot; class=&quot;headerlink&quot; title=&quot;三、异常处理&quot;&gt;&lt;/a&gt;三、异常处理&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5017742.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5017742.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-异常基础-python3的写法&quot;&gt;&lt;a href=&quot;#1-异常基础-python3的写法&quot; class=&quot;headerlink&quot; title=&quot;1.异常基础(python3的写法)&quot;&gt;&lt;/a&gt;1.异常基础(python3的写法)&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;在编程过程中为了增加友好性，在程序出现bug时一般不会将错误信息显示给用户，而是显示一个提示的页面，通俗来说就是不让用户看见代码出错的页面

    try:
        pass
    except Exception as ex:
        pass
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-异常种类&quot;&gt;&lt;a href=&quot;#2-异常种类&quot; class=&quot;headerlink&quot; title=&quot;2.异常种类&quot;&gt;&lt;/a&gt;2.异常种类&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;常用异常：

    AttributeError 试图访问一个对象没有的树形，比如foo.x，但是foo没有属性x
    IOError 输入/输出异常；基本上是无法打开文件
    ImportError 无法引入模块或包；基本上是路径问题或名称错误
    IndentationError 语法错误（的子类） ；代码没有正确对齐
    IndexError 下标索引超出序列边界，比如当x只有三个元素，却试图访问x[5]
    KeyError 试图访问字典里不存在的键
    KeyboardInterrupt Ctrl+C被按下
    NameError 使用一个还未被赋予对象的变量
    SyntaxError Python代码非法，代码不能编译(个人认为这是语法错误，写错了）
    TypeError 传入对象类型与要求的不符合
    UnboundLocalError 试图访问一个还未被设置的局部变量，基本上是由于另有一个同名的全局变量，
    导致你以为正在访问它
    ValueError 传入一个调用者不期望的值，即使值的类型是正确的
更多种类：

    ArithmeticError
    AssertionError
    AttributeError
    BaseException
    BufferError
    BytesWarning
    DeprecationWarning
    EnvironmentError
    EOFError
    Exception  #捕获一般的所有异常
    FloatingPointError
    FutureWarning
    GeneratorExit
    ImportError  #捕获导入模块异常
    ImportWarning
    IndentationError
    IndexError  #捕获索引异常
    IOError  #捕获IO异常
    KeyboardInterrupt  #捕获键盘组合键异常
    KeyError
    LookupError
    MemoryError
    NameError
    NotImplementedError
    OSError
    OverflowError
    PendingDeprecationWarning
    ReferenceError
    RuntimeError
    RuntimeWarning
    StandardError
    StopIteration
    SyntaxError
    SyntaxWarning
    SystemError
    SystemExit
    TabError
    TypeError
    UnboundLocalError
    UnicodeDecodeError
    UnicodeEncodeError
    UnicodeError
    UnicodeTranslateError
    UnicodeWarning
    UserWarning
    ValueError
    Warning
    ZeroDivisionError
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-自定义异常类&quot;&gt;&lt;a href=&quot;#3-自定义异常类&quot; class=&quot;headerlink&quot; title=&quot;3.自定义异常类&quot;&gt;&lt;/a&gt;3.自定义异常类&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
class SwhtError(Exception):
    &amp;apos;&amp;apos;&amp;apos;
    自定义异常
    &amp;apos;&amp;apos;&amp;apos;
    def __init__(self,msg):
        &amp;apos;&amp;apos;&amp;apos;
        初始化函数
        :param msg:用户输入message
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        self.message = msg

    def __str__(self): #名称可以自行定义，只是通过该方法返回message的值
        &amp;apos;&amp;apos;&amp;apos;
        返回用户输入的信息
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        return self.message

try:
    raise SwhtError(&amp;quot;这是一个致命的错误！&amp;quot;)
except Exception as e:
    print(&amp;quot;dsdsd&amp;quot;,e)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-示例代码：&quot;&gt;&lt;a href=&quot;#4-示例代码：&quot; class=&quot;headerlink&quot; title=&quot;4.示例代码：&quot;&gt;&lt;/a&gt;4.示例代码：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;dic = [&amp;quot;swht&amp;quot;, &amp;apos;shen&amp;apos;]
try:
    dic[10]
except IndexError as e:
    print(&amp;quot;IndexError:&amp;quot;,e)

dic = {&amp;apos;k1&amp;apos;:&amp;apos;v1&amp;apos;}
try:
    dic[&amp;apos;k20&amp;apos;]
except KeyError as e:
    print(&amp;quot;keyError:&amp;quot;,e)

s1 = &amp;apos;hello&amp;apos;
try:
    int(s1)
except ValueError as e:
    print(&amp;quot;ValueError:&amp;quot;,e)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-特殊异常&quot;&gt;&lt;a href=&quot;#5-特殊异常&quot; class=&quot;headerlink&quot; title=&quot;5.特殊异常&quot;&gt;&lt;/a&gt;5.特殊异常&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;虽然python自带的一个处理万能异常类Exception，但是并不是有一些异常都能被捕获的。如果要想捕获这些特殊的异常，就需要进行自定义异常类
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-异常其他架构&quot;&gt;&lt;a href=&quot;#6-异常其他架构&quot; class=&quot;headerlink&quot; title=&quot;6.异常其他架构&quot;&gt;&lt;/a&gt;6.异常其他架构&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;try:
    # 主代码块
    pass
except KeyError as e:
    # 异常时，执行该块
    pass
else:
    # 主代码块执行完，执行该块
    pass
finally:
    # 无论异常与否，最终执行该块
    pass
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;7-主动触发异常&quot;&gt;&lt;a href=&quot;#7-主动触发异常&quot; class=&quot;headerlink&quot; title=&quot;7.主动触发异常&quot;&gt;&lt;/a&gt;7.主动触发异常&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;try:
    raise Exception(&amp;apos;错误了。。。&amp;apos;)
except Exception as e:
    print(&amp;quot;Error&amp;quot;,e)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;8-Asser断言：&quot;&gt;&lt;a href=&quot;#8-Asser断言：&quot; class=&quot;headerlink&quot; title=&quot;8.Asser断言：&quot;&gt;&lt;/a&gt;8.Asser断言：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;至关重要的判断，强制判断前面的业务结果是否符合要求，否则就抛出异常

    a = 1
    try:
        assert a == 2
        print(&amp;quot;True&amp;quot;)
    except Exception as e:
        print(&amp;quot;False&amp;quot;,e)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、进程与线程&quot;&gt;&lt;a href=&quot;#四、进程与线程&quot; class=&quot;headerlink&quot; title=&quot;四、进程与线程&quot;&gt;&lt;/a&gt;四、进程与线程&lt;/h2&gt;&lt;h3 id=&quot;1-概念-1&quot;&gt;&lt;a href=&quot;#1-概念-1&quot; class=&quot;headerlink&quot; title=&quot;1.概念&quot;&gt;&lt;/a&gt;1.概念&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.进程

        一个具有一定独立功能的程序关于某个数据集合的一次运行活动，是系统进行资源分配和调度运行的基本单位
2.线程

        线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务

3.进程与线程的区别

        1. 进程是一个动态的概念

        进程是程序的一次执行过程，是动态概念

        程序是一组有序的指令集和，是静态概念

        2. 不同的进程可以执行同一个程序

        区分进程的条件：所执行的程序和数据集合。

        两个进程即使执行在相同的程序上，只要他们运行在不同的数据集合上，他们也是两个进程。例如：多个用户同时调用同一个编译程序编译他们编写的C语言源程序，由于编译程序运行在不同的数据集合（不同的C语言源程序）上，于是产生了一个个不同的进程

        3. 每个进程都有自己的生命周期

        当操作系统要完成某个任务时，它会创建一个进程。当进程完成任务之后，系统就会撤销这个进程，收回它所占用的资源。从创建到撤销的时间段就是进程的生命期

        4. 进程之间存在并发性

        在一个系统中，同时会存在多个进程。他们轮流占用CPU和各种资源

        5. 进程间会相互制约

        进程是系统中资源分配和运行调度的单位，在对资源的共享和竞争中，必然相互制约，影响各自向前推进的速度

        6. 进程可以创建子进程，程序不能创建子程序

        7. 从结构上讲，每个进程都由程序、数据和一个进程控制块（Process Control Block, PCB）组成
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-进程锁&quot;&gt;&lt;a href=&quot;#2-进程锁&quot; class=&quot;headerlink&quot; title=&quot;2.进程锁&quot;&gt;&lt;/a&gt;2.进程锁&lt;/h3&gt;&lt;p&gt; Python threading模块&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.线程的两种调用方式
    1.    直接调用
    2.    继承式调用
2.join&amp;amp;&amp;amp;Demo
3.线程锁
    1.    互斥锁：同时仅且只有一个线程在运行
    2.    共享锁：同时可以有多个线程共同运行，可以实现一个线程池的效果
    2.    递归锁
    3.    Semaphore(信号量)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;示例代码：&quot;&gt;&lt;a href=&quot;#示例代码：&quot; class=&quot;headerlink&quot; title=&quot;示例代码：&quot;&gt;&lt;/a&gt;示例代码：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3

import threading,time

def addNum():
    global num #声明修改全局变量
    print(&amp;quot;--get num:&amp;quot;,num)
    time.sleep(1)
    lock.acquire()
    num -=1
    lock.release()

lock = threading.Lock()
num = 100
threading_list = []
for i in range(2040):
    t = threading.Thread(target=addNum)
    t.start()
    threading_list.append(t)
for t in threading_list: #等待所有线程执行完毕
    t.join()

print(&amp;quot;num:&amp;quot;,num)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;event&lt;/p&gt;
&lt;p&gt;多进程&lt;/p&gt;
&lt;p&gt;进程间通讯&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;队列
管道
manager
    Manager 所有的子进程和父进程之间都能进行数据的共享
    Manager 是一个安全的进程管理池，不需要加进程锁
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;进程同步&lt;/p&gt;
&lt;p&gt;进程池&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;开启一个进程的系统开销太大，设置进程池限制启动的进程数，以达到保护系统的目的。另外在线程池内的进程可以实现同步或异步调用。
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day07&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5213184.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day07</title>
    <link href="http://blog.songqingbo.cn/2016/02/27/s12-20160227-day07/"/>
    <id>http://blog.songqingbo.cn/2016/02/27/s12-20160227-day07/</id>
    <published>2016-02-27T07:30:00.000Z</published>
    <updated>2016-07-07T03:08:46.825Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day06&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5188179.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5188179.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day07&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5213184.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5213184.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、类的多态、继承&quot;&gt;&lt;a href=&quot;#一、类的多态、继承&quot; class=&quot;headerlink&quot; title=&quot;一、类的多态、继承&quot;&gt;&lt;/a&gt;一、类的多态、继承&lt;/h2&gt;&lt;h3 id=&quot;类的多态：统一接口调用&quot;&gt;&lt;a href=&quot;#类的多态：统一接口调用&quot; class=&quot;headerlink&quot; title=&quot;类的多态：统一接口调用&quot;&gt;&lt;/a&gt;类的多态：统一接口调用&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python
# -*- coding:utf-8 -*-
class Animal:
    def __init__(self, name):    # Constructor of the class
        self.name = name
    def talk(self):              # Abstract method, defined by convention only
        raise NotImplementedError(&amp;quot;Subclass must implement abstract method&amp;quot;)
    hobbie = &amp;apos;ddd&amp;apos;
class Cat(Animal):
    def talk(self):
        return &amp;apos;Meow!&amp;apos;
class Dog(Animal):
    def talk(self):
        return &amp;apos;Woof! Woof!&amp;apos;

animals = [Cat(&amp;apos;Missy&amp;apos;),
           Dog(&amp;apos;Lassie&amp;apos;)]

for animal in animals:
    print(animal.name + &amp;apos;: &amp;apos; + animal.talk())
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;类的方法：示例&quot;&gt;&lt;a href=&quot;#类的方法：示例&quot; class=&quot;headerlink&quot; title=&quot;类的方法：示例&quot;&gt;&lt;/a&gt;类的方法：示例&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
class Animal(object):
    &amp;apos;&amp;apos;&amp;apos;
    定义一个动物类
    &amp;apos;&amp;apos;&amp;apos;
    def __init__(self,name):
        self.name = name
        self.__num = None #定义成私有变量，只能在类中访问

    # def talk(self):
    #     print(&amp;quot;%s is talking!&amp;quot; % self.name)
    hobbie = &amp;quot;shen&amp;quot; #类变量，静态字段
    @classmethod  #类方法，不能访问实例变量
    def talk(self):
        print(&amp;quot;%s is talking!&amp;quot; % self.hobbie)
    # def work(self):
    #     print(&amp;quot;%s is working!&amp;quot; % self.name)

    @staticmethod #静态方法，不能访问类变量和实例变量
    def work():
        print(&amp;quot;It is working!&amp;quot;)

    # def walk(self):
    #     print(&amp;quot;%s is walking!&amp;quot; % self.name)
    @property #把方法编程静态属性
    def walk(self,num):
        return self.__num
    @walk.setter #传值
    def walk(self,num):
        self.__num = num
        print(self.__num)
    @walk.deleter  #删值
    def walk(self):
        print(&amp;quot;del num&amp;quot;)
c = Animal(&amp;quot;swht&amp;quot;)
# c.talk()
# c.work()
c.walk = 3
del c.walk
print(&amp;quot;OUT:&amp;quot;,c._Animal__num)  #特例情况下可以通过这种方式访问私有变量
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;经典类与新式类&quot;&gt;&lt;a href=&quot;#经典类与新式类&quot; class=&quot;headerlink&quot; title=&quot;经典类与新式类&quot;&gt;&lt;/a&gt;经典类与新式类&lt;/h3&gt;&lt;p&gt;经典类和新式类区别：&lt;/p&gt;
&lt;p&gt;经典类：使用深度优先进行继承&lt;br&gt;新式类：使用广度优先进行继承&lt;/p&gt;
&lt;p&gt;另外：经典类和新式类在python-3.X平台上会默认使用广度优先进行继承，而在python-2.X中则体现上述区别&lt;/p&gt;
&lt;h3 id=&quot;示例代码：&quot;&gt;&lt;a href=&quot;#示例代码：&quot; class=&quot;headerlink&quot; title=&quot;示例代码：&quot;&gt;&lt;/a&gt;示例代码：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

class A:
    print(&amp;quot;A&amp;quot;)
    def f2(self):
        print(&amp;quot;f2 from A&amp;quot;)
class B(A):
    print(&amp;quot;B&amp;quot;)
    def f1(self):
        print(&amp;quot;f1 from B&amp;quot;)
    def f2(self):
        print(&amp;quot;f2 from B&amp;quot;)
class C(A):
    print(&amp;quot;C&amp;quot;)
    def f2(self):
        print(&amp;quot;f2 from C&amp;quot;)

class D(B,C):
    pass

d = D()
d.f1()
d.f2()

&amp;apos;&amp;apos;&amp;apos;
广度优先算法继承。先将B类中的f2()注释掉，D自动继承C.f2()，如果再将C类中的f2()，D自动继承A.f2()
&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;类的特殊成员&quot;&gt;&lt;a href=&quot;#类的特殊成员&quot; class=&quot;headerlink&quot; title=&quot;类的特殊成员&quot;&gt;&lt;/a&gt;类的特殊成员&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;__doc__:查看类的注释
__init__:构造方法，通过类创建对象时，自动触发执行。
__module__:表示当前操作的对象在那个模块
__class__:表示当前操作的对象的类是什么
__del__:析构方法,解释器进行垃圾回收时自动触发
__call__:对象加()执行call方法
__new__：实例化时new方法执行了__init__
__metaclass__：通过改写metaclass方法达到构建自己需要的类的目的
__dict__:以字典的形式显示类对象中的成员。使用场景：查看类中有多少成员（只显示类变量，不显示实例变量）
__str__:如果一个类中定义了__str__方法，那么在打印 对象 时，默认输出该方法的返回值。
__iter__:用于迭代器，之所以列表、字典、元组可以进行for循环，是因为类型内部定义了 __iter__ 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;示例：&quot;&gt;&lt;a href=&quot;#示例：&quot; class=&quot;headerlink&quot; title=&quot;示例：&quot;&gt;&lt;/a&gt;示例：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

class People(object):
    &amp;apos;&amp;apos;&amp;apos;
    定义一个人类
    &amp;apos;&amp;apos;&amp;apos;
    def __init__(self,name,age):
        &amp;apos;&amp;apos;&amp;apos;
        定义属性
        :param name: 人类的名字
        :param age: 人类的年龄属性
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        self.name = name
        self.age = age

    def china_man(self):
        pass

chinese = People(&amp;quot;swht&amp;quot;,27)
#__doc__:查看类的注释
print(chinese.__doc__) #  定义一个人类
#__dict__:以字典的形式显示类对象中的成员。使用场景：查看类中有多少成员（只显示类变量，不显示实例变量）
print(chinese.__dict__) #{&amp;apos;age&amp;apos;: 27, &amp;apos;name&amp;apos;: &amp;apos;swht&amp;apos;}
#__module__:表示当前操作的对象在那个模块
print(chinese.__module__) #__main__
#__class__:表示当前操作的对象的类是什么
print(chinese.__class__) #&amp;lt;class &amp;apos;__main__.People&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;构造类的方法&quot;&gt;&lt;a href=&quot;#构造类的方法&quot; class=&quot;headerlink&quot; title=&quot;构造类的方法&quot;&gt;&lt;/a&gt;构造类的方法&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一句话构建一个类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Foo = type(&amp;apos;Foo&amp;apos;,(object,), {&amp;apos;func&amp;apos;: func}) 
    #type第一个参数：类名
    #type第二个参数：当前类的基类
    #type第三个参数：类的成员
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/dmSh15M.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;反射方法&quot;&gt;&lt;a href=&quot;#反射方法&quot; class=&quot;headerlink&quot; title=&quot;反射方法&quot;&gt;&lt;/a&gt;反射方法&lt;/h3&gt;&lt;p&gt;hasattr：判断实例中是否存在指定输入的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hasattr(server,sys.argv[1])  返回值是布尔型 True or False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;getattr:获取实例中的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;func = getattr(server,sys.argv[1])  获取对象方法的内存地址
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;setattr:将自定义的某个方法设定到特定实例中去使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setattr(server,&amp;apos;run&amp;apos;,test_run) 将特定方法test_run绑定给实例server，并重命名为run方法
server.run()  实例server可以指定调用方法run
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;delattr:删除实例的成员变量或者类的方法，不能删除实例的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#delattr可以删除类的方法、实例的成员变量
# delattr(server,&amp;apos;start&amp;apos;) #尝试删除实例的方法是错误的
# delattr(server,&amp;quot;host&amp;quot;) #删除实例的变量
# delattr(Webserver,&amp;apos;start&amp;apos;)
# server.start() #AttributeError: &amp;apos;Webserver&amp;apos; object has no attribute &amp;apos;start&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;完整示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

import sys
class Webserver(object):
    &amp;apos;&amp;apos;&amp;apos;
    定义一个web server启动、关闭类
    &amp;apos;&amp;apos;&amp;apos;
    def __init__(self,host,port):
        &amp;apos;&amp;apos;&amp;apos;
        初始化类
        :param host: 主机地址
        :param port: 主机端口号
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        self.host = host
        self.port = port
    def start(self):
        &amp;apos;&amp;apos;&amp;apos;
        服务启动方法
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        print(&amp;quot;service is starting...&amp;quot;)

    def stop(self):
        &amp;apos;&amp;apos;&amp;apos;
        服务停止方法
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        print(&amp;quot;service is stopping ...&amp;quot;)

    def restart(self):
        &amp;apos;&amp;apos;&amp;apos;
        服务重启方法
        :return:
        &amp;apos;&amp;apos;&amp;apos;
        self.stop()
        self.start()

#定义一个特殊运行的函数，绑定到实例server上去
def test_run():
    print(&amp;quot;测试运行...&amp;quot;)

server = Webserver(&amp;quot;localhost&amp;quot;,80)
if hasattr(server,sys.argv[1]):
    func = getattr(server,sys.argv[1])
    func()
#setattr主要作用是将一个单独定义的函数添加到实例中，对于类或者其他实例而言，该函数对其不生效
setattr(server,&amp;apos;run&amp;apos;,test_run)
server.run()

#delattr可以删除类的方法、实例的成员变量
# delattr(server,&amp;apos;start&amp;apos;) #尝试删除实例的方法是错误的
# delattr(server,&amp;quot;host&amp;quot;) #删除实例的变量
# delattr(Webserver,&amp;apos;start&amp;apos;)
# server.start() #AttributeError: &amp;apos;Webserver&amp;apos; object has no attribute &amp;apos;start&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、socket网络编程&quot;&gt;&lt;a href=&quot;#二、socket网络编程&quot; class=&quot;headerlink&quot; title=&quot;二、socket网络编程&quot;&gt;&lt;/a&gt;二、socket网络编程&lt;/h2&gt;&lt;h3 id=&quot;简单实现C-S交互实例：&quot;&gt;&lt;a href=&quot;#简单实现C-S交互实例：&quot; class=&quot;headerlink&quot; title=&quot;简单实现C/S交互实例：&quot;&gt;&lt;/a&gt;简单实现C/S交互实例：&lt;/h3&gt;&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;实现简单的client与server端数据交互（一句话）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;socket_server&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

import socket

ip_port = (&amp;quot;127.0.0.1&amp;quot;,5000)
sk = socket.socket()
sk.bind(ip_port)
sk.listen(5)

while True:
    print(&amp;quot;南非波波server is Listening....&amp;quot;)
    conn,addr = sk.accept()
    client_data = conn.recv(1024)
    print(str(client_data,&amp;quot;utf8&amp;quot;))
    conn.sendall(bytes(&amp;quot;落花不是无情物，化作春泥更护花！&amp;quot;,&amp;quot;utf8&amp;quot;))
    conn.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;socket_client&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

import socket
ip_port = (&amp;quot;127.0.0.1&amp;quot;,5000)

sk = socket.socket()
sk.connect(ip_port)

sk.sendall(bytes(&amp;quot;夕阳无限好，只是近黄昏&amp;quot;,&amp;quot;utf8&amp;quot;))

server_reply = sk.recv(1024)
print(str(server_reply,&amp;quot;utf8&amp;quot;))
sk.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;改善代码1：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;实现多个client与server进行串行交互
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;socket-server1 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

import socket

ip_port = (&amp;quot;127.0.0.1&amp;quot;,5000)
sk = socket.socket()
sk.bind(ip_port)
sk.listen(5)

while True:
    print(&amp;quot;南非波波server is Listening....&amp;quot;)
    conn,addr = sk.accept()
    client_data = conn.recv(1024)
    print(str(client_data,&amp;quot;utf8&amp;quot;))
    # conn.sendall(bytes(&amp;quot;落花不是无情物，化作春泥更护花！&amp;quot;,&amp;quot;utf8&amp;quot;))
    while True:
        try:
            client_data = conn.recv(1024)
            if not client_data:
                break
            print(&amp;quot;recv:&amp;quot;,str(client_data,&amp;quot;utf8&amp;quot;))
            conn.send(client_data)
        except Exception:
            print(&amp;quot;客户端断开!&amp;quot;)
            break
    conn.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;socket-client1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

import socket
ip_port = (&amp;quot;127.0.0.1&amp;quot;,5000)

sk = socket.socket()
sk.connect(ip_port)

# sk.sendall(bytes(&amp;quot;夕阳无限好，只是近黄昏&amp;quot;,&amp;quot;utf8&amp;quot;))

server_reply = sk.recv(1024)
print(str(server_reply,&amp;quot;utf8&amp;quot;))
while True:
    client_data = input(&amp;quot;&amp;gt;&amp;gt;:&amp;quot;).strip()
    if not client_data:
        continue
    if client_data == &amp;apos;q&amp;apos;:
        break
    sk.send(bytes(client_data,&amp;quot;utf8&amp;quot;))
    print(client_data)
sk.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;实现简单的ssh命令交互，获取Linux系统的相关信息
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;socket-server2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import socket
import subprocess

ip_port = (&amp;quot;127.0.0.1&amp;quot;,5000)  #定义服务监听的ip地址和端口
ssh = socket.socket()
ssh.bind(ip_port) #进行地址和端口绑定
ssh.listen(5) #设定做多5个并发连接

while True:
    print(&amp;quot;南非波波Server is waiting...&amp;quot;)
    conn,addr = ssh.accept()
    while True:
        client_data = conn.recv(1024)  #介绍client发过来的数据，最大接收字节1024
        if not client_data: #如果client_data为空，则跳出循环
            break
        cmd = str(client_data,&amp;quot;utf8&amp;quot;) #获取client_data数据并进行类型和编码转换
        print(&amp;quot;server recv:&amp;quot;,cmd)
        cmd_call = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE) #以原生shell命令的形式指定client的强求指定，并将结果输出到cmd_result
        cmd_result = cmd_call.stdout.read()
        if len(cmd_result) == 0: #如果命令没有结果返回，则需要给client返回一个提示，否则控制台会阻塞
            cmd_result = b&amp;quot;cmd execution has no output..&amp;quot;

        #client不能一次性接收过多的数据包，需要server端先告知client端需要传输的数据多少。然后由client端分开接收
        ack_msg = bytes(&amp;quot;CMD_RESULT_SIZE|%s&amp;quot; % len(cmd_result),&amp;quot;utf8&amp;quot;) #发送数据传输认证标志
        conn.send(ack_msg)
        client_ack = conn.recv(50)
        if client_ack.decode() == &amp;apos;CLIENT_READY_TO_RECV&amp;apos;:
            conn.send(cmd_result) #数据传输
    conn.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;socket-client2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import socket

ip_port = (&amp;quot;127.0.0.1&amp;quot;,5000)
ssh_client = socket.socket()
ssh_client.connect(ip_port)

while True:
    user_input = input(&amp;quot;ssh-client:&amp;quot;).strip()
    if len(user_input) == 0:
        continue
    if user_input == &amp;apos;q&amp;apos;:
        break
    ssh_client.send(bytes(user_input,&amp;apos;utf8&amp;apos;))
    #ack_msg = b&amp;quot;CMD_RESULT_SIZE|%s&amp;quot; % len(cmd_result)
    server_ack_msg = ssh_client.recv(100)
    cmd_res_msg = str(server_ack_msg.decode()).split(&amp;quot;|&amp;quot;)
    if cmd_res_msg[0] == &amp;quot;CMD_RESULT_SIZE&amp;quot;:
        cmd_res_size = int(cmd_res_msg[1])
        ssh_client.send(b&amp;quot;CLIENT_READY_TO_RECV&amp;quot;)
    res = &amp;apos;&amp;apos;
    received_size = 0
    while received_size &amp;lt; cmd_res_size:
        server_data = ssh_client.recv(500)
        received_size += len(server_data)
        res += str(server_data.decode())
    else:
        print(res)
        print(&amp;quot;-----------recv don----------&amp;quot;)
ssh_client.close()
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day06&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5188179.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day06</title>
    <link href="http://blog.songqingbo.cn/2016/02/20/s12-20160130-day06/"/>
    <id>http://blog.songqingbo.cn/2016/02/20/s12-20160130-day06/</id>
    <published>2016-02-20T07:30:00.000Z</published>
    <updated>2016-07-07T03:09:56.770Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day05&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5161349.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5161349.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day06&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5188179.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5188179.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、模块回顾&quot;&gt;&lt;a href=&quot;#一、模块回顾&quot; class=&quot;headerlink&quot; title=&quot;一、模块回顾&quot;&gt;&lt;/a&gt;一、模块回顾&lt;/h2&gt;&lt;h3 id=&quot;1-os模块&quot;&gt;&lt;a href=&quot;#1-os模块&quot; class=&quot;headerlink&quot; title=&quot;1. os模块&quot;&gt;&lt;/a&gt;1. os模块&lt;/h3&gt;&lt;h3 id=&quot;2-sys模块&quot;&gt;&lt;a href=&quot;#2-sys模块&quot; class=&quot;headerlink&quot; title=&quot;2. sys模块&quot;&gt;&lt;/a&gt;2. sys模块&lt;/h3&gt;&lt;h3 id=&quot;3-shutil模块&quot;&gt;&lt;a href=&quot;#3-shutil模块&quot; class=&quot;headerlink&quot; title=&quot;3. shutil模块&quot;&gt;&lt;/a&gt;3. shutil模块&lt;/h3&gt;&lt;p&gt;高级的 文件、文件夹、压缩包 处理模块&lt;/p&gt;
&lt;p&gt;shutil.copyfileobj(fsrc, fdst[, length])&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将文件内容拷贝到另一个文件中，可以部分内容
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copyfile(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：仅拷贝文件
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copymode(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：仅拷贝权限，内容、组、用户均不变
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copystat(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：拷贝状态的信息，包括：mode bits, atime, mtime, flags
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copy(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：拷贝文件和权限
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copy2(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：拷贝文件和状态信息

1. zipfile


2. tarfile
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;4-shelve模块&quot;&gt;&lt;a href=&quot;#4-shelve模块&quot; class=&quot;headerlink&quot; title=&quot;4. shelve模块&quot;&gt;&lt;/a&gt;4. shelve模块&lt;/h3&gt;&lt;p&gt;二次封装pickle模块功能，对比pickle而言，shelve实现了按照‘键’来取值&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import shelve

name = [&amp;apos;swht&amp;apos;,&amp;apos;shen&amp;apos;,&amp;apos;test&amp;apos;]
class Test(object):
    def __init__(self,n):
        self.n = n
t1 = Test(1234)
t2 = Test(123456)

#存数据
# shelve_file = shelve.open(&amp;apos;ret.txt&amp;apos;)
# shelve_file[&amp;apos;use&amp;apos;] = name
# shelve_file[&amp;apos;t1&amp;apos;] = t1
# shelve_file[&amp;apos;t2&amp;apos;] = t2
# shelve_file.close()

#取数据
shelve_load = shelve.open(&amp;apos;ret.txt&amp;apos;)
a = shelve_load.get(&amp;apos;use&amp;apos;)
print(a)
b = shelve_load.get(&amp;apos;t1&amp;apos;)
print(b.n)
c = shelve_load.get(&amp;apos;t2&amp;apos;)
print(c.n)
shelve_load.close()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;5-configparser模块&quot;&gt;&lt;a href=&quot;#5-configparser模块&quot; class=&quot;headerlink&quot; title=&quot;5.configparser模块&quot;&gt;&lt;/a&gt;5.configparser模块&lt;/h3&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import configparser

#生成文档
#[&amp;quot;DEFAULT&amp;quot;]是一个全局模块，对所有的模块生效
&amp;apos;&amp;apos;&amp;apos;
config = configparser.ConfigParser()
config[&amp;quot;DEFAULT&amp;quot;] = {&amp;apos;ServerAliveInterval&amp;apos;: &amp;apos;45&amp;apos;,
                      &amp;apos;Compression&amp;apos;: &amp;apos;yes&amp;apos;,
                     &amp;apos;CompressionLevel&amp;apos;: &amp;apos;9&amp;apos;}

config[&amp;apos;bitbucket.org&amp;apos;] = {}
config[&amp;apos;bitbucket.org&amp;apos;][&amp;apos;User&amp;apos;] = &amp;apos;hg&amp;apos;
config[&amp;apos;topsecret.server.com&amp;apos;] = {}
topsecret = config[&amp;apos;topsecret.server.com&amp;apos;]
topsecret[&amp;apos;Host Port&amp;apos;] = &amp;apos;50022&amp;apos;     # mutates the parser
topsecret[&amp;apos;ForwardX11&amp;apos;] = &amp;apos;no&amp;apos;  # same here
config[&amp;apos;DEFAULT&amp;apos;][&amp;apos;ForwardX11&amp;apos;] = &amp;apos;yes&amp;apos;
with open(&amp;apos;example.ini&amp;apos;, &amp;apos;w&amp;apos;) as configfile:
   config.write(configfile)
&amp;apos;&amp;apos;&amp;apos;

#查询
&amp;apos;&amp;apos;&amp;apos;
config = configparser.ConfigParser()
config.read(&amp;apos;example.ini&amp;apos;)
print(config.sections())  #[&amp;apos;bitbucket.org&amp;apos;, &amp;apos;topsecret.server.com&amp;apos;]
if &amp;apos;bitbucket.org&amp;apos; in config:
    print(&amp;apos;True&amp;apos;)
print(&amp;quot;[&amp;apos;bitbucket.org&amp;apos;][&amp;apos;User&amp;apos;]:&amp;quot;,config[&amp;apos;bitbucket.org&amp;apos;][&amp;apos;User&amp;apos;])
print(&amp;quot;[&amp;apos;bitbucket.org&amp;apos;][&amp;apos;Compression&amp;apos;]:&amp;quot;,config[&amp;apos;bitbucket.org&amp;apos;][&amp;apos;Compression&amp;apos;])
for key in config[&amp;apos;bitbucket.org&amp;apos;]:
    print(key)
&amp;apos;&amp;apos;&amp;apos;
#读
&amp;apos;&amp;apos;&amp;apos;
config = configparser.ConfigParser()
config.read(&amp;apos;example.ini&amp;apos;)
secs = config.sections()
print(secs) #[&amp;apos;bitbucket.org&amp;apos;, &amp;apos;topsecret.server.com&amp;apos;]

options = config.options(&amp;apos;topsecret.server.com&amp;apos;)
print(options) #[&amp;apos;host port&amp;apos;, &amp;apos;forwardx11&amp;apos;, &amp;apos;compression&amp;apos;, &amp;apos;serveraliveinterval&amp;apos;, &amp;apos;compressionlevel&amp;apos;]

item_list = config.items(&amp;apos;bitbucket.org&amp;apos;)
print(item_list) #[(&amp;apos;compression&amp;apos;, &amp;apos;yes&amp;apos;), (&amp;apos;serveraliveinterval&amp;apos;, &amp;apos;45&amp;apos;), (&amp;apos;compressionlevel&amp;apos;, &amp;apos;9&amp;apos;), (&amp;apos;forwardx11&amp;apos;, &amp;apos;yes&amp;apos;), (&amp;apos;user&amp;apos;, &amp;apos;hg&amp;apos;)]

val = config.get(&amp;apos;bitbucket.org&amp;apos;,&amp;apos;compression&amp;apos;)
print(val)
&amp;apos;&amp;apos;&amp;apos;

#改写
config = configparser.ConfigParser()
config.read(&amp;apos;example.ini&amp;apos;)

#实现从原来的文件中读取，删除[bitbucket.org]模块后将其他内容写到example_new.ini文件中
# sec = config.remove_section(&amp;apos;bitbucket.org&amp;apos;)
# config.write(open(&amp;apos;example_new.ini&amp;apos;, &amp;quot;w&amp;quot;))

#添加[swht]模块
# sec = config.has_section(&amp;apos;swht&amp;apos;)
# sec = config.add_section(&amp;apos;swht&amp;apos;)
# config.write(open(&amp;apos;example_new1.ini&amp;apos;, &amp;quot;w&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;6-hashlib模块&quot;&gt;&lt;a href=&quot;#6-hashlib模块&quot; class=&quot;headerlink&quot; title=&quot;6. hashlib模块&quot;&gt;&lt;/a&gt;6. hashlib模块&lt;/h3&gt;&lt;p&gt;该模块提供了多个算法对字符串进行加密操作。&lt;/p&gt;
&lt;p&gt;示例代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import hashlib

&amp;apos;&amp;apos;&amp;apos;
#md5加密
md5num = hashlib.md5()
md5num.update(b&amp;quot;shendiaoxia1278@sohu.com&amp;quot;)
print(md5num.hexdigest()) #7e023c9fafc96423da854e4923f466a1
&amp;apos;&amp;apos;&amp;apos;

&amp;apos;&amp;apos;&amp;apos;
#sha1加密
sha1num = hashlib.sha1()
sha1num.update(b&amp;quot;shendiaoxia1278@sohu.com&amp;quot;)
print(sha1num.hexdigest()) #dd8d5deaa16c2dde03785aac99943f8f75bfaba9
&amp;apos;&amp;apos;&amp;apos;

&amp;apos;&amp;apos;&amp;apos;
#sha256加密
hash = hashlib.sha256()
hash.update(b&amp;quot;shendiaoxia1278@sohu.com&amp;quot;)
print(hash.hexdigest()) #14b03e2271da2cc9b0cc3ff73727c6d3ba6ba17077470a92162f7b46c9d1d968
&amp;apos;&amp;apos;&amp;apos;

&amp;apos;&amp;apos;&amp;apos;
#sha384加密
hash = hashlib.sha384()
hash.update(b&amp;quot;shendiaoxia1278@sohu.com&amp;quot;)
print(hash.hexdigest()) #a27bbc0d66d6b8b00a7ebfcad662ebed385fe2098898dfe23b88ffa88e1b6565d82e7eee5c9950c90231d0c0aa286e00
&amp;apos;&amp;apos;&amp;apos;

&amp;apos;&amp;apos;&amp;apos;
#sha512加密
hash = hashlib.sha512()
hash.update(b&amp;quot;shendiaoxia1278@sohu.com&amp;quot;)
print(hash.hexdigest()) #42bb1886bba49373c8f8177fba32a58a1f31af7272219789db52776428789f4a39970da9a36fdef6ab76651ed9f07e0fa140e4fa7dd325cb52559389bb80ceab
&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;高级加密代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;apos;&amp;apos;&amp;apos;
# import hashlib

# ######## md5 #######
hash = hashlib.md5(b&amp;apos;898oaFs09f&amp;apos;)
hash.update(b&amp;quot;shendiaoxia1278@sohu.com&amp;quot;)
print(hash.hexdigest()) #2aa29d812ca08b39d96f9441775420ba
&amp;apos;&amp;apos;&amp;apos;

&amp;apos;&amp;apos;&amp;apos;
import hmac

#可以使用在用户登录的时候，使用用户输入的用户名和密码进行加密后作为用户的密码

hash = hmac.new(b&amp;quot;shendiaoxia1278@sohu.com&amp;quot;)
hash.update(b&amp;quot;swht&amp;quot;)
print(hash.hexdigest()) #c65d9bc3f37d6cfb9a9c959a18463bf4

&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;7-subprocess模块&quot;&gt;&lt;a href=&quot;#7-subprocess模块&quot; class=&quot;headerlink&quot; title=&quot;7. subprocess模块&quot;&gt;&lt;/a&gt;7. subprocess模块&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. python2.7

    import subprocess
    #默认状态shell = False，必须使用一个列表的方式将shell命令传递进去
    ret = subprocess.call([&amp;quot;ls&amp;quot;, &amp;quot;-l&amp;quot;], shell=False)
    #使用shell = True告诉subprocess模块对用户传入的shell命令不转义，即使用原生shell命令
    ret = subprocess.call(&amp;quot;ls -l&amp;quot;, shell=True)


2. python3.5
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;8-logging模块&quot;&gt;&lt;a href=&quot;#8-logging模块&quot; class=&quot;headerlink&quot; title=&quot;8. logging模块&quot;&gt;&lt;/a&gt;8. logging模块&lt;/h4&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import logging

# logging.warning(&amp;quot;user [swht] is start the systerm!&amp;quot;)
# logging.critical(&amp;quot;server is down!&amp;quot;)
#创建日志
logger = logging.getLogger(&amp;apos;[Test-Log]&amp;apos;)
logger.setLevel(logging.DEBUG) #全局级别优先级较高

#创建一个控制台的handler并设置日志级别
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

#创建一个文件的handler并设置日志级别
fh = logging.FileHandler(&amp;quot;access.log&amp;quot;)
fh.setLevel(logging.WARNING)
#创建日期格式

fomatter = logging.Formatter(&amp;apos;%(asctime)s %(name)s %(levelname)s %(message)s&amp;apos;,datefmt=&amp;apos;%Y-%m-%d %H:%M:%S&amp;apos;)

#add formatter to ch and fh
ch.setFormatter(fomatter)
fh.setFormatter(fomatter)

logger.addHandler(ch)
logger.addHandler(fh)

# &amp;apos;application&amp;apos; code
logger.debug(&amp;apos;debug message&amp;apos;)
logger.info(&amp;apos;info message&amp;apos;)
logger.warn(&amp;apos;warn message&amp;apos;)
logger.error(&amp;apos;error message&amp;apos;)
logger.critical(&amp;apos;critical message&amp;apos;)

#输出格式：
&amp;apos;&amp;apos;&amp;apos;
2016-02-20 16:53:27 [Test-Log] DEBUG debug message
2016-02-20 16:53:27 [Test-Log] INFO info message
2016-02-20 16:53:27 [Test-Log] WARNING warn message
2016-02-20 16:53:27 [Test-Log] ERROR error message
2016-02-20 16:53:27 [Test-Log] CRITICAL critical message
&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、面向对象编程&quot;&gt;&lt;a href=&quot;#二、面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;二、面向对象编程&quot;&gt;&lt;/a&gt;二、面向对象编程&lt;/h2&gt;&lt;h3 id=&quot;1-面向对象的介绍&quot;&gt;&lt;a href=&quot;#1-面向对象的介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 面向对象的介绍&quot;&gt;&lt;/a&gt;1. 面向对象的介绍&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.    不要写重复的代码
2.    代码易扩展，程序遵循易读、易改的原则
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-面向对象的特性&quot;&gt;&lt;a href=&quot;#2-面向对象的特性&quot; class=&quot;headerlink&quot; title=&quot;2. 面向对象的特性&quot;&gt;&lt;/a&gt;2. 面向对象的特性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1.    封装
2.    继承
    1.    基类或父类或超类
    2.    子类或派生类
    一般情况下，一个子类只能有一个基类，但在python中，一个子类是可以继承多个基类，实现多重继承，可以通过多级继承来实现；继承的过程就是从一般到特殊的过程
3.    多态
    实现接口的重用
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;3-类、方法&quot;&gt;&lt;a href=&quot;#3-类、方法&quot; class=&quot;headerlink&quot; title=&quot;3. 类、方法&quot;&gt;&lt;/a&gt;3. 类、方法&lt;/h3&gt;&lt;h4 id=&quot;类-class&quot;&gt;&lt;a href=&quot;#类-class&quot; class=&quot;headerlink&quot; title=&quot;类 class&quot;&gt;&lt;/a&gt;类 class&lt;/h4&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
class Role(object):
    def __init__(self,name,role,weapon,life_value):
        self.name = name
        self.role = role
        self.weapon = weapon
        self.life_value = life_value
    def buy_weapon(self,weapon):
        self.weapon = weapon
        print(&amp;quot;%s 成功购买[%s]&amp;quot; % (self.name,weapon))

#实例化
p1 = Role(&amp;apos;swht&amp;apos;,&amp;apos;p&amp;apos;,&amp;apos;A11&amp;apos;,100)
t1 = Role(&amp;apos;shen&amp;apos;,&amp;apos;t&amp;apos;,&amp;apos;A11&amp;apos;,100)

print(&amp;quot;p1[weapon]初始值:&amp;quot;,p1.weapon)
print(&amp;quot;t1[weapon]初始值:&amp;quot;,t1.weapon)

#买枪行为
p1.buy_weapon(&amp;quot;AK65&amp;quot;)
t1.buy_weapon(&amp;quot;AK60&amp;quot;)

print(&amp;quot;p1[weapon]当前值:&amp;quot;,p1.weapon)
print(&amp;quot;t1[weapon]当前值:&amp;quot;,t1.weapon)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;作业：&quot;&gt;&lt;a href=&quot;#作业：&quot; class=&quot;headerlink&quot; title=&quot;作业：&quot;&gt;&lt;/a&gt;作业：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;模拟人生游戏

    1.    至少有两个不同的角色
    2.    玩的过程中，必须有交互
    3.    根据不同的交互产生不同的行为
    4.    一定要用到面向对象编程的语法及思想
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day05&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5161349.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day05</title>
    <link href="http://blog.songqingbo.cn/2016/01/30/s12-20160130-day05/"/>
    <id>http://blog.songqingbo.cn/2016/01/30/s12-20160130-day05/</id>
    <published>2016-01-30T07:30:00.000Z</published>
    <updated>2016-07-07T03:13:02.040Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day04&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5143440.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5143440.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day05&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5161349.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5161349.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、正则深入&quot;&gt;&lt;a href=&quot;#一、正则深入&quot; class=&quot;headerlink&quot; title=&quot;一、正则深入&quot;&gt;&lt;/a&gt;一、正则深入&lt;/h2&gt;&lt;h3 id=&quot;re&quot;&gt;&lt;a href=&quot;#re&quot; class=&quot;headerlink&quot; title=&quot;re&quot;&gt;&lt;/a&gt;re&lt;/h3&gt;&lt;p&gt;匹配数字开头&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import re
#匹配以数字开头
p = re.compile(&amp;quot;^[0-9]&amp;quot;) #使用compile进行编译正则表达式，在大量匹配处理的时候非常有效
m = p.match(&amp;quot;14534Abc&amp;quot;)
print(m.group()) #输出结果：1
&amp;apos;&amp;apos;&amp;apos;
m = re.match(&amp;quot;^[0-9]&amp;quot;,&amp;quot;14534Abc&amp;quot;)
print(m.group()) #输出结果：1
&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匹配数字、字母等开头&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import re
#匹配以数字和字母开头
p = re.compile(&amp;quot;^[0-9A-Za-z]&amp;quot;)
m = p.match(&amp;quot;AK14534Abc&amp;quot;)
print(m.group()) #输出结果：A
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匹配IP地址：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#匹配IP地址
string = &amp;apos;180.115.183.45 - - [03/Feb/2016:10:35:50 +0800] &amp;quot;CONNECT imppl.tradedoubler.com:443 HTTP/1.0&amp;quot; 400 172 &amp;quot;-&amp;quot; &amp;quot;-&amp;quot;&amp;apos;
p = re.compile(&amp;quot;([0-9]{1,3}\.){3}\d{1,3}&amp;quot;)
ip = p.match(string).group()
# ip = re.match(&amp;quot;([0-9]{1,3}\.){3}\d{1,3}&amp;quot;,string).group()
print(ip)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;正则表达式常用5种操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;re.match(pattern,string) #从头匹配&lt;/p&gt;
&lt;p&gt;re.search(pattern,string) #匹配整个字符串，直到找到一个匹配&lt;/p&gt;
&lt;p&gt;re.split() #将匹配到的格式当做分隔点对字符串分成列表类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;示例：
import re
string = &amp;quot;2016 02 02  00:26:35 Statistic_Svncommit.py[line:50] INFO [&amp;apos;A6909850956019&amp;apos;, &amp;apos;A6997448878578&amp;apos;, &amp;apos;A6909712867884&amp;apos;, &amp;apos;A6996408725555&amp;apos;, &amp;apos;A6908651568946&amp;apos;, &amp;apos;A6996150172637&amp;apos;, &amp;apos;A6909747538711&amp;apos;, &amp;apos;A6994084740002&amp;apos;, &amp;apos;A6908427730549&amp;apos;, &amp;apos;A6982187752993&amp;apos;, &amp;apos;A6909861345295&amp;apos;, &amp;apos;A6909860252981&amp;apos;, &amp;apos;A6905214359647&amp;apos;, &amp;apos;A6995115894134&amp;apos;]&amp;quot;
strlist = re.search(&amp;quot;\[\&amp;apos;.*?\&amp;apos;\]&amp;quot;,string).group().lstrip(&amp;quot;[&amp;quot;).rstrip(&amp;quot;]&amp;quot;)
list1 = re.sub(&amp;quot;[\&amp;apos;&amp;apos; &amp;apos;]&amp;quot;,&amp;quot;&amp;quot;,strlist).split(&amp;quot;,&amp;quot;)
print(list1)

返回结果：[&amp;apos;A6909850956019&amp;apos;, &amp;apos;A6997448878578&amp;apos;, &amp;apos;A6909712867884&amp;apos;, &amp;apos;A6996408725555&amp;apos;, &amp;apos;A6908651568946&amp;apos;, &amp;apos;A6996150172637&amp;apos;, &amp;apos;A6909747538711&amp;apos;, &amp;apos;A6994084740002&amp;apos;, &amp;apos;A6908427730549&amp;apos;, &amp;apos;A6982187752993&amp;apos;, &amp;apos;A6909861345295&amp;apos;, &amp;apos;A6909860252981&amp;apos;, &amp;apos;A6905214359647&amp;apos;, &amp;apos;A6995115894134&amp;apos;]
列表类型

m = re.split(&amp;quot;[0-9]&amp;quot;, &amp;quot;swht1swht2jack3helenrachel8&amp;quot;)
print(m) #[&amp;apos;swht&amp;apos;, &amp;apos;swht&amp;apos;, &amp;apos;jack&amp;apos;, &amp;apos;helenrachel&amp;apos;, &amp;apos;&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;re.findall()　# 找到所有要匹配的字符并返回列表格式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;示例：
import re
string = &amp;quot;sdsdss(welcome)dff(china)&amp;quot;
m = re.findall(&amp;apos;\(.*?\)&amp;apos;,string) #匹配所有以（开头和以）结尾的字符串,返回类型为list
print(m) #[&amp;apos;(welcome)&amp;apos;, &amp;apos;(china)&amp;apos;]
print(type(m))  #&amp;lt;class &amp;apos;list&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;re.sub(pattern, repl, string, count,flag) # 替换匹配到的字符&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;示例：
import re
string = &amp;quot;sdsdss(welcome)dff(china)&amp;quot;
m = re.sub(&amp;quot;\(|\)&amp;quot;,&amp;quot;\&amp;quot;&amp;quot;,string) #匹配&amp;quot;(&amp;quot;或者&amp;quot;)&amp;quot;，然后将其替换成双引号
print(m) #sdsdss&amp;quot;welcome&amp;quot;dff&amp;quot;china&amp;quot;
print(type(m)) #&amp;lt;class &amp;apos;str&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;re.I #大小写不敏感&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import rz
string = &amp;quot;swht&amp;quot;
m = re.search(&amp;quot;[A-Z]&amp;quot;,string,flags = re.I)
print(m.group()) #s
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;匹配手机号：&quot;&gt;&lt;a href=&quot;#匹配手机号：&quot; class=&quot;headerlink&quot; title=&quot;匹配手机号：&quot;&gt;&lt;/a&gt;匹配手机号：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;import re
string = &amp;quot;sdssaawa15865921165sdsdscf&amp;quot;
m = re.search(&amp;quot;(1)([358]\d{9})&amp;quot;,string)
print(m.group())
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;匹配IP地址&quot;&gt;&lt;a href=&quot;#匹配IP地址&quot; class=&quot;headerlink&quot; title=&quot;匹配IP地址:&quot;&gt;&lt;/a&gt;匹配IP地址:&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;import re
ip_addr = &amp;quot;inet 192.168.60.223 netmask 0xffffff00 broadcast 192.168.60.255&amp;quot;
IP = re.search(&amp;quot;(([1-9]|[1-9][0-9]|[1][0-9][0-9]|[2][0-5][0-5])\.){3}[0-9]{1,3}&amp;quot;,ip_addr)
print(IP.group()) #192.168.60.223
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;匹配邮箱地址：&quot;&gt;&lt;a href=&quot;#匹配邮箱地址：&quot; class=&quot;headerlink&quot; title=&quot;匹配邮箱地址：&quot;&gt;&lt;/a&gt;匹配邮箱地址：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;import re
emailstr = &amp;quot;qingbo.song@gmail.com www.baidu.com&amp;quot;
email = re.search(&amp;quot;^[a-z]([0-9a-z]|\.){4,20}@[0-9a-z]{0,10}\.[0-9a-z]{0,8}&amp;quot;,emailstr)
print(email.group()) #qingbo.song@gmail.com

#只匹配gmail邮箱
import
emailstr = &amp;quot;qingbo.song@gmail.com www.baidu.com&amp;quot;
email = re.search(&amp;quot;^[a-z]([0-9a-z]|\.){4,20}@gmail\.com&amp;quot;,emailstr)
if email:
    print(email.group()) #qingbo.song@gmail.com
else:
    print(&amp;quot;系统只接受gamil邮箱注册,感谢你的支持!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、冒泡排序算法&quot;&gt;&lt;a href=&quot;#二、冒泡排序算法&quot; class=&quot;headerlink&quot; title=&quot;二、冒泡排序算法&quot;&gt;&lt;/a&gt;二、冒泡排序算法&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;示例代码：
#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

li = [11,78,45,12,90,34,56]

# for m in range(1,len(li)):
#     for i in range(len(li) - 1):
#         if li[i] &amp;gt; li[i+1]:
#             temp = li[i]
#             li[i] = li[i+1]
#             li[i+1] = temp
# print(li)

for m in range(len(li) - 1):
    for n in range(m+1,len(li)):
        if li[m] &amp;gt; li[n]:
            temp = li[m]
            li[m] = li[n]
            li[n] = temp
print(li) #[11, 12, 34, 45, 56, 78, 90]

#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

data = [11,78,45,12,90,34,56]
for i in range(1,len(data)):
    for j in range(len(data) - i):
        if data[j] &amp;gt; data[j+1]:
            tmp = data[j]
            data[j+1] = data[j]
            data[j] = tmp
print(data)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、模块&quot;&gt;&lt;a href=&quot;#三、模块&quot; class=&quot;headerlink&quot; title=&quot;三、模块&quot;&gt;&lt;/a&gt;三、模块&lt;/h2&gt;&lt;h3 id=&quot;模块介绍&quot;&gt;&lt;a href=&quot;#模块介绍&quot; class=&quot;headerlink&quot; title=&quot;模块介绍&quot;&gt;&lt;/a&gt;模块介绍&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;模块：用一坨代码实现了某个功能的代码集合。
类似于函数式编程和面向过程编程，函数式编程则完成一个功能，其他代码用来处理和代码间的耦合。可能需要多个.py的文件组成。

模块类型：
    1. 自定义模块
    2. 内置标准模块（标准库）
    3. 开源模块
        1. 下载：
            1. yum
            2. apt-get
            3. pip
            4. easy_install
            5. 源码编译安装 python stup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;导入模块&quot;&gt;&lt;a href=&quot;#导入模块&quot; class=&quot;headerlink&quot; title=&quot;导入模块&quot;&gt;&lt;/a&gt;导入模块&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import module
from module.xx.xx import xx
from module.xx.xx import xx as rename  
#不推荐下面的导入方式，如果被导入的模块中含有与当前文件中相同名称的函数，容易产生调用混乱。
from module.xx.xx import * 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、自定义模块&quot;&gt;&lt;a href=&quot;#四、自定义模块&quot; class=&quot;headerlink&quot; title=&quot;四、自定义模块&quot;&gt;&lt;/a&gt;四、自定义模块&lt;/h2&gt;&lt;h3 id=&quot;模块框架&quot;&gt;&lt;a href=&quot;#模块框架&quot; class=&quot;headerlink&quot; title=&quot;模块框架&quot;&gt;&lt;/a&gt;模块框架&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. backend
    1. logic
        handle.py
            #!/usr/local/env python3
            &amp;apos;&amp;apos;&amp;apos;
            Author:@南非波波
            Blog:http://www.cnblogs.com/songqingbo/
            E-mail:qingbo.song@gmail.com
            &amp;apos;&amp;apos;&amp;apos;
            from backend.database.sql_select import select
            def home():
                print(&amp;quot;welcome to home page!&amp;quot;)
                q_data = select(&amp;quot;user&amp;quot;,&amp;quot;test&amp;quot;)
                print(&amp;quot;query res:%s&amp;quot; % q_data)

            def tv():
                print(&amp;quot;welcome to tv page!&amp;quot;)

            def moive():
                print(&amp;quot;welcome to moive page!&amp;quot;)
    2. database
        1. sql_select.py
            #!/usr/local/env python3
            &amp;apos;&amp;apos;&amp;apos;
            Author:@南非波波
            Blog:http://www.cnblogs.com/songqingbo/
            E-mail:qingbo.song@gmail.com
            &amp;apos;&amp;apos;&amp;apos;
            &amp;apos;&amp;apos;&amp;apos;
            增加模块的路径。下面的语句增加的是dj路径
            该功能解决的是在子模块中的文件单独调试的时候无法获取父模块路径，导致在导入其他模块的时候报错
            &amp;apos;&amp;apos;&amp;apos;
            import sys,os
            #获取dj的绝对路径
            base_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
            #将获取的路径添加到系统环境变量中
            sys.path.append(base_dir)


            from config import settings
            from backend.database.user_auth import db_auth

            def select(table,column):
                if db_auth(settings):
                    if table == &amp;quot;user&amp;quot;:
                        user_info = {
                            &amp;quot;001&amp;quot;:[&amp;quot;swht&amp;quot;,24,&amp;quot;yunwei&amp;quot;],
                            &amp;quot;002&amp;quot;:[&amp;quot;shen&amp;quot;,26,&amp;quot;dba&amp;quot;],
                            &amp;quot;003&amp;quot;:[&amp;quot;test&amp;quot;,28,&amp;quot;student&amp;quot;],
                        }
                        return user_info
        2. user_auth.py
            #!/usr/local/env python3
            &amp;apos;&amp;apos;&amp;apos;
            Author:@南非波波
            Blog:http://www.cnblogs.com/songqingbo/
            E-mail:qingbo.song@gmail.com
            &amp;apos;&amp;apos;&amp;apos;
            def db_auth(configs):
                if configs.DATABASES[&amp;quot;user&amp;quot;] == &amp;quot;root&amp;quot; and configs.DATABASES[&amp;quot;password&amp;quot;] == 123:
                    print(&amp;quot;验证通过!&amp;quot;)
                    return True
                else:
                    print(&amp;quot;验证错误!&amp;quot;)

2. frontend
3. config
    settings
        #!/usr/local/env python3
        &amp;apos;&amp;apos;&amp;apos;
        Author:@南非波波
        Blog:http://www.cnblogs.com/songqingbo/
        E-mail:qingbo.song@gmail.com
        &amp;apos;&amp;apos;&amp;apos;

        DATABASES = {
            &amp;quot;engine&amp;quot;:&amp;quot;mysql&amp;quot;,
            &amp;quot;host&amp;quot;:&amp;quot;localhost&amp;quot;,
            &amp;quot;port&amp;quot;:3306,
            &amp;quot;user&amp;quot;:&amp;quot;root&amp;quot;,
            &amp;quot;password&amp;quot;:123,
        }
4. user_main.py
    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;

    from backend.logic import handle

    handle.home()
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;五、标准模块&quot;&gt;&lt;a href=&quot;#五、标准模块&quot; class=&quot;headerlink&quot; title=&quot;五、标准模块&quot;&gt;&lt;/a&gt;五、标准模块&lt;/h2&gt;&lt;p&gt;参考：&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/4963027.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/4963027.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;time-amp-datetime模块&quot;&gt;&lt;a href=&quot;#time-amp-datetime模块&quot; class=&quot;headerlink&quot; title=&quot;time &amp;amp; datetime模块&quot;&gt;&lt;/a&gt;time &amp;amp; datetime模块&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import time
import datetime

#作用：计算一个程序从执行到结束用的时间 
print(time.clock()) #返回处理器时间,3.3开始已废弃
print(time.process_time()) #返回处理器时间,3.3开始已废弃

#获取系统的当前时间，从1970年1月1日0：00到当前时间的秒数
print(time.time()) #返回当前系统时间戳

#格式化输出的时间
print(time.ctime()) #输出Tue Jan 26 18:23:48 2016 ,当前系统时间
print(time.ctime(time.time()-86640)) #将时间戳转为字符串格式，输出昨天的时间Tue Jan 25 18:23:48 2016

#time.struct_time(tm_year=2016, tm_mon=2,c=48, tm_wday=5, tm_yday=44, tm_isdst=0)
#gmtime是从零时区算起的格林时间
print(time.gmtime(time.time()-86640)) #将时间戳转换成struct_time格式
#当前时间，是按照系统当前时区算起的
print(time.localtime(time.time()-86640)) #将时间戳转换成struct_time格式,但返回 的本地时间
print(time.mktime(time.localtime())) #与time.localtime()功能相反,将struct_time格式转回成时间戳格式
#time.sleep(4) #sleep

#格式化输出时间
print(time.strftime(&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;,time.gmtime()) ) #将struct_time格式转成指定的字符串格式
#time.strftime(&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;,time.localtime())
#&amp;apos;2016-02-14 12:45:49&amp;apos;

print(time.strptime(&amp;quot;2016-01-28&amp;quot;,&amp;quot;%Y-%m-%d&amp;quot;) ) #将字符串格式转换成struct_time格式

#datetime module

#将时间戳转换成日期格式
print(datetime.date.today()) #输出格式python2 2016-01-26  python3：datetime.date(2016, 2, 14)
print(datetime.date.fromtimestamp(time.time()-864400) ) #2016-01-16 将时间戳转成日期格式
current_time = datetime.datetime.now() #
print(current_time) #输出2016-01-26 19:04:30.335935
print(current_time.timetuple()) #返回struct_time格式

#datetime.replace([year[, month[, day[, hour[, minute[, second[, microsecond[, tzinfo]]]]]]]])
#将当前的时间替换成输入的时间
print(current_time.replace(2014,9,12)) #输出2014-09-12 19:06:24.074900,返回当前时间,但指定的值将被替换

str_to_date = datetime.datetime.strptime(&amp;quot;21/11/06 16:30&amp;quot;, &amp;quot;%d/%m/%y %H:%M&amp;quot;) #将字符串转换成日期格式
new_date = datetime.datetime.now() + datetime.timedelta(days=10) #比现在加10天
new_date = datetime.datetime.now() + datetime.timedelta(days=-10) #比现在减10天
new_date = datetime.datetime.now() + datetime.timedelta(hours=-10) #比现在减10小时
new_date = datetime.datetime.now() + datetime.timedelta(seconds=120) #比现在+120s
print(new_date)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;random模块&quot;&gt;&lt;a href=&quot;#random模块&quot; class=&quot;headerlink&quot; title=&quot;random模块&quot;&gt;&lt;/a&gt;random模块&lt;/h3&gt;&lt;h4 id=&quot;产生随机数&quot;&gt;&lt;a href=&quot;#产生随机数&quot; class=&quot;headerlink&quot; title=&quot;产生随机数&quot;&gt;&lt;/a&gt;产生随机数&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import random

#产生随机小数
print(random.random())
&amp;apos;&amp;apos;&amp;apos;
0.8426794741026359
0.8703558703687821
&amp;apos;&amp;apos;&amp;apos;

#产生随机整数
print(random.randint(1,10))
print(random.randrange(1,10))
&amp;apos;&amp;apos;&amp;apos;
1
9
&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;生成随机验证码&quot;&gt;&lt;a href=&quot;#生成随机验证码&quot; class=&quot;headerlink&quot; title=&quot;生成随机验证码&quot;&gt;&lt;/a&gt;生成随机验证码&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
&amp;apos;&amp;apos;&amp;apos;
生成n位随机数，包含大写字母和数字
&amp;apos;&amp;apos;&amp;apos;
import random
def checkcode(n):
    checkcode = &amp;apos;&amp;apos;
    for i in range(n):
        current = random.randrange(0,4)
        if current != i:
            tmp = chr(random.randint(65,90))
        else:
            tmp = random.randint(0,9)
        checkcode += str(tmp)
    return checkcode

print(checkcode(6))
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;os模块&quot;&gt;&lt;a href=&quot;#os模块&quot; class=&quot;headerlink&quot; title=&quot;os模块&quot;&gt;&lt;/a&gt;os模块&lt;/h3&gt;&lt;p&gt;提供对操作系统进行调用的接口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径
os.chdir(&amp;quot;dirname&amp;quot;)  改变当前脚本工作目录；相当于shell下cd
os.curdir  返回当前目录: (&amp;apos;.&amp;apos;)
os.pardir  获取当前目录的父目录字符串名：(&amp;apos;..&amp;apos;)
os.makedirs(&amp;apos;dirname1/dirname2&amp;apos;)    可生成多层递归目录
os.removedirs(&amp;apos;dirname1&amp;apos;) 删除空的目录，或多级空目录
os.mkdir(&amp;apos;dirname&amp;apos;)    生成单级目录；相当于shell中mkdir dirname
os.rmdir(&amp;apos;dirname&amp;apos;)    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname
os.listdir(&amp;apos;dirname&amp;apos;)    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印
os.remove()  删除一个文件
os.rename(&amp;quot;oldname&amp;quot;,&amp;quot;newname&amp;quot;)  重命名文件/目录，或者移动，相当于shell命令mv
os.stat(&amp;apos;path/filename&amp;apos;)  获取文件/目录信息
os.sep    输出操作系统特定的路径分隔符，win下为&amp;quot;\\&amp;quot;,Linux下为&amp;quot;/&amp;quot;
os.linesep    输出当前平台使用的行终止符，win下为&amp;quot;\t\n&amp;quot;,Linux下为&amp;quot;\n&amp;quot;
os.pathsep    输出用于分割文件路径的字符串
os.name    输出字符串指示当前使用平台。win-&amp;gt;&amp;apos;nt&amp;apos;; Linux-&amp;gt;&amp;apos;posix&amp;apos;
os.system(&amp;quot;bash command&amp;quot;)  运行shell命令，直接显示，只是单个shell命令的执行
os.environ  获取系统环境变量
os.path.abspath(path)  返回path规范化的绝对路径
os.path.split(path)  将path分割成目录和文件名二元组返回
os.path.dirname(path)  返回path的目录。其实就是os.path.split(path)的第一个元素
os.path.basename(path)  返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素
os.path.exists(path)  如果path存在，返回True；如果path不存在，返回False
os.path.isabs(path)  如果path是绝对路径，返回True
os.path.isfile(path)  如果path是一个存在的文件，返回True。否则返回False
os.path.isdir(path)  如果path是一个存在的目录，则返回True。否则返回False
os.path.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略
os.path.getatime(path)  返回path所指向的文件或者目录的最后存取时间
os.path.getmtime(path)  返回path所指向的文件或者目录的最后修改时间
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;sys模块&quot;&gt;&lt;a href=&quot;#sys模块&quot; class=&quot;headerlink&quot; title=&quot;sys模块&quot;&gt;&lt;/a&gt;sys模块&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;sys.argv           命令行参数List，第一个元素是程序本身路径
sys.exit(n)        退出程序，正常退出时exit(0)
sys.version        获取Python解释程序的版本信息
sys.maxint         最大的Int值
sys.path           返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值
sys.platform       返回操作系统平台名称
sys.stdout.write(&amp;apos;please:&amp;apos;)
val = sys.stdin.readline()[:-1] #输入一行内容，减去后面的最后一个\n
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用sys和time模块生成进度条&quot;&gt;&lt;a href=&quot;#使用sys和time模块生成进度条&quot; class=&quot;headerlink&quot; title=&quot;使用sys和time模块生成进度条&quot;&gt;&lt;/a&gt;使用sys和time模块生成进度条&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
&amp;apos;&amp;apos;&amp;apos;
生成进度条。调用函数输入的参数为进度条长度
&amp;apos;&amp;apos;&amp;apos;
import sys,time
def processbar(rangenum):
    for i in range(rangenum):
        if i == 0:
            sys.stdout.write(&amp;quot;0%[#&amp;quot;)
        elif i == rangenum - 1:
            sys.stdout.write(&amp;quot;#]100%&amp;quot;)
        else:
            sys.stdout.write(&amp;quot;#&amp;quot;)
            #刷新缓存，使其实时显示出来
            sys.stdout.flush()
            time.sleep(0.5)

processbar(16)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;json-和-pickle&quot;&gt;&lt;a href=&quot;#json-和-pickle&quot; class=&quot;headerlink&quot; title=&quot;json 和 pickle&quot;&gt;&lt;/a&gt;json 和 pickle&lt;/h3&gt;&lt;h4 id=&quot;json和pickle是用于序列化的两个模块：&quot;&gt;&lt;a href=&quot;#json和pickle是用于序列化的两个模块：&quot; class=&quot;headerlink&quot; title=&quot;json和pickle是用于序列化的两个模块：&quot;&gt;&lt;/a&gt;json和pickle是用于序列化的两个模块：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;json：用于处理字符串和python数据类型间的转换
pickle：用于处理python特有类型和python数据类型间的转换
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;json&quot;&gt;&lt;a href=&quot;#json&quot; class=&quot;headerlink&quot; title=&quot;json&quot;&gt;&lt;/a&gt;json&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;json模块提供了四个功能：dumps、dump、loads、load
json在所有的语言中都通用，存取的直接字符
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;pickle&quot;&gt;&lt;a href=&quot;#pickle&quot; class=&quot;headerlink&quot; title=&quot;pickle&quot;&gt;&lt;/a&gt;pickle&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;pickle模块提供了四个功能：dumps、dump、loads、load
在python中独有一个模块，存取二进制字符
不仅仅可以序列化简单的字符、列表、字典，还能序列化函数、类以至于整个程序
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;关于dump和dumps的区别&quot;&gt;&lt;a href=&quot;#关于dump和dumps的区别&quot; class=&quot;headerlink&quot; title=&quot;关于dump和dumps的区别&quot;&gt;&lt;/a&gt;关于dump和dumps的区别&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;dump直接将序列化后的字符写到文件中，dumps是将序列化后的字符先赋给一个变量，然后再有write方法将其写入到文件中
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;关于load和loads的区别&quot;&gt;&lt;a href=&quot;#关于load和loads的区别&quot; class=&quot;headerlink&quot; title=&quot;关于load和loads的区别&quot;&gt;&lt;/a&gt;关于load和loads的区别&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;load直接从文件中读取内容，loads是从内存中获取文件的内容
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;shutil模块&quot;&gt;&lt;a href=&quot;#shutil模块&quot; class=&quot;headerlink&quot; title=&quot;shutil模块&quot;&gt;&lt;/a&gt;shutil模块&lt;/h3&gt;&lt;p&gt;高级的 文件、文件夹、压缩包 处理模块&lt;/p&gt;
&lt;p&gt;shutil.copyfileobj(fsrc, fdst[, length])&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将文件内容拷贝到另一个文件中，可以部分内容
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copyfile(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：仅拷贝文件
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copymode(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：仅拷贝权限，内容、组、用户均不变
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copystat(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：拷贝状态的信息，包括：mode bits, atime, mtime, flags
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copy(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：拷贝文件和权限
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;shutil.copy2(src, dst)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：拷贝文件和状态信息
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;作业需求：&quot;&gt;&lt;a href=&quot;#作业需求：&quot; class=&quot;headerlink&quot; title=&quot;作业需求：&quot;&gt;&lt;/a&gt;作业需求：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;模拟实现一个ATM + 购物商城程序

额度 15000或自定义
实现购物商城，买东西加入 购物车，调用信用卡接口结账
可以提现，手续费5%
每月22号出账单，每月10号为还款日，过期未还，按欠款总额 万分之5 每日计息
支持多账户登录
支持账户间转账
记录每月日常消费流水
提供还款接口
ATM记录操作日志
提供管理接口，包括添加账户、用户额度，冻结账户等。
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day04&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5143440.html&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day04</title>
    <link href="http://blog.songqingbo.cn/2016/01/23/s12-20160123-day04/"/>
    <id>http://blog.songqingbo.cn/2016/01/23/s12-20160123-day04/</id>
    <published>2016-01-23T07:30:00.000Z</published>
    <updated>2016-07-07T03:14:56.681Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day03&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5133343.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5133343.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day04&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/alex3714/articles/5143440.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/alex3714/articles/5143440.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、迭代器-amp-amp-生成器&quot;&gt;&lt;a href=&quot;#一、迭代器-amp-amp-生成器&quot; class=&quot;headerlink&quot; title=&quot;一、迭代器 &amp;amp;&amp;amp; 生成器&quot;&gt;&lt;/a&gt;一、迭代器 &amp;amp;&amp;amp; 生成器&lt;/h2&gt;&lt;h3 id=&quot;1-迭代器&quot;&gt;&lt;a href=&quot;#1-迭代器&quot; class=&quot;headerlink&quot; title=&quot;1.迭代器&quot;&gt;&lt;/a&gt;1.迭代器&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;迭代器是访问集合元素的一种方式。迭代器只能往前不能往后。迭代器对象从集合的第一个集合开始访问，直到所有的元素被访问完。
优点：不需要事先准备整个迭代过程中的所有元素
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;测试代码&quot;&gt;&lt;a href=&quot;#测试代码&quot; class=&quot;headerlink&quot; title=&quot;测试代码&quot;&gt;&lt;/a&gt;测试代码&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

names = iter([&amp;apos;swht&amp;apos;,&amp;apos;shen&amp;apos;,&amp;apos;jack&amp;apos;])
print(names)
print(names.__next__())
print(names.__next__())
print(names.__next__())

返回结果：
    &amp;lt;list_iterator object at 0x000000000114C7B8&amp;gt;
    swht
    shen
    jack
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-生成器&quot;&gt;&lt;a href=&quot;#2-生成器&quot; class=&quot;headerlink&quot; title=&quot;2.生成器&quot;&gt;&lt;/a&gt;2.生成器&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;定义：generator，一个函数调用时返回一个迭代器，那这个函数就叫做生成器。

作用：yield实现函数中断，并保存函数中断时的状态。中断后，程序可以继续执行下面的代码，而且可以随时可以回头再执行之前中断的函数。
    可以通过yield实现在单线程的情况下实现并发运算的效果
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;测试代码-1&quot;&gt;&lt;a href=&quot;#测试代码-1&quot; class=&quot;headerlink&quot; title=&quot;测试代码&quot;&gt;&lt;/a&gt;测试代码&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

def money(num):
    while num &amp;gt; 0:
        print(&amp;quot;取款100元!&amp;quot;)
        num -= 100
        yield 100
        print(&amp;quot;你当前还有%s元&amp;quot; % num)

ATM = money(500)
print(type(ATM))
print(ATM.__next__())
print(ATM.__next__())
print(&amp;quot;吃包子....&amp;quot;)
print(ATM.__next__())
print(ATM.__next__())

返回结果：
    &amp;lt;class &amp;apos;generator&amp;apos;&amp;gt;
    取款100元!
    100
    你当前还有400元
    取款100元!
    100
    吃包子....
    你当前还有300元
    取款100元!
    100
    你当前还有200元
    取款100元!
    100
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;实现异步：【生产者-消费者模型】&quot;&gt;&lt;a href=&quot;#实现异步：【生产者-消费者模型】&quot; class=&quot;headerlink&quot; title=&quot;实现异步：【生产者-消费者模型】&quot;&gt;&lt;/a&gt;实现异步：【生产者-消费者模型】&lt;/h3&gt;&lt;p&gt;yield参数可以实现返回参数和接收参数，使用send方法可以将值传递到生成器中去&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

import time
def consumer(name):
    print(&amp;quot;%s 开始准备吃包子!&amp;quot; % name)
    while True:
        baozi = yield #yield可以返回一个值，也可以接收一个值
        print(&amp;quot;第[%s]波包子来了,被[%s]吃了!&amp;quot; % (baozi,name))

def producer(name):
    c1 = consumer(&amp;apos;swht&amp;apos;)
    c2 = consumer(&amp;apos;shen&amp;apos;)
    c1.__next__()
    c2.__next__()
    print(&amp;quot;==%s开始准备做包子!==&amp;quot; % name)
    for i in range(10):
        time.sleep(1)
        print(&amp;quot;**%s做了两个包子!**&amp;quot; % name)
        c1.send(i) #使用send方法将值传递给yield
        c2.send(i)

producer(&amp;apos;alex&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;swht 开始准备吃包子!
shen 开始准备吃包子!
==alex开始准备做包子!==
**alex做了两个包子!**
第[0]波包子来了,被[swht]吃了!
第[0]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[1]波包子来了,被[swht]吃了!
第[1]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[2]波包子来了,被[swht]吃了!
第[2]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[3]波包子来了,被[swht]吃了!
第[3]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[4]波包子来了,被[swht]吃了!
第[4]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[5]波包子来了,被[swht]吃了!
第[5]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[6]波包子来了,被[swht]吃了!
第[6]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[7]波包子来了,被[swht]吃了!
第[7]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[8]波包子来了,被[swht]吃了!
第[8]波包子来了,被[shen]吃了!
**alex做了两个包子!**
第[9]波包子来了,被[swht]吃了!
第[9]波包子来了,被[shen]吃了!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、装饰器&quot;&gt;&lt;a href=&quot;#二、装饰器&quot; class=&quot;headerlink&quot; title=&quot;二、装饰器&quot;&gt;&lt;/a&gt;二、装饰器&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;装饰器又叫语法塘
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;装饰器调用原理&quot;&gt;&lt;a href=&quot;#装饰器调用原理&quot; class=&quot;headerlink&quot; title=&quot;装饰器调用原理&quot;&gt;&lt;/a&gt;装饰器调用原理&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
def login(func):
    print(&amp;quot;To passed!&amp;quot;)
    return func

def home(name):
    print(&amp;quot;Welcome [%s] to home page!&amp;quot; % name)

def tv(name):
    print(&amp;quot;Welcome [%s] to TV page!&amp;quot; % name)

def moive(name):
    print(&amp;quot;Welcome [%s] to Moive page!&amp;quot; % name)

tv = login(tv)  #将tv函数的内存地址传递到login()函数中，然后将tv的内存地址返回并赋给变量tv
tv(&amp;quot;swht&amp;quot;) #变量调用相当于函数的调用
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;装饰器实现&quot;&gt;&lt;a href=&quot;#装饰器实现&quot; class=&quot;headerlink&quot; title=&quot;装饰器实现&quot;&gt;&lt;/a&gt;装饰器实现&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
def login(func): #程序执行时返回inner函数的内存地址
    def inner(*arg,**kwargs):
        print(&amp;quot;To passed!&amp;quot;)
        return func(*arg,**kwargs)
    return inner

def home(name):
    print(&amp;quot;Welcome [%s] to home page!&amp;quot; % name)

@login
def tv(name):
    print(&amp;quot;Welcome [%s] to TV page!&amp;quot; % name)

def moive(name):
    print(&amp;quot;Welcome [%s] to Moive page!&amp;quot; % name)
tv(&amp;quot;swht&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;To passed!
Welcome [swht] to TV page!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;多参数装饰器&quot;&gt;&lt;a href=&quot;#多参数装饰器&quot; class=&quot;headerlink&quot; title=&quot;多参数装饰器&quot;&gt;&lt;/a&gt;多参数装饰器&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

def Before(request,kargs):
    print(&amp;apos;before&amp;apos;)

def After(request,kargs):
    print(&amp;apos;after&amp;apos;)


def Filter(before_func,after_func):
    def outer(main_func):
        def wrapper(request,kargs):

            before_result = before_func(request,kargs)
            if(before_result != None):
                return before_result

            main_result = main_func(request,kargs)
            if(main_result != None):
                return main_result

            after_result = after_func(request,kargs)
            if(after_result != None):
                return after_result

        return wrapper
    return outer

@Filter(Before, After)
def Index(request,kargs):
    print(&amp;apos;index&amp;apos;)

Index(&amp;quot;swht&amp;quot;,&amp;quot;123&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;实现流程&quot;&gt;&lt;a href=&quot;#实现流程&quot; class=&quot;headerlink&quot; title=&quot;实现流程&quot;&gt;&lt;/a&gt;实现流程&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;apos;&amp;apos;&amp;apos;
1.程序运行，读取顺序 @Filter --&amp;gt; Index()
2.@Filter运行机制：
    1）将Before, After传递给Filter()，执行outer()；
    2）将Index传递给outer()函数，执行wrapper()，返回outer；
    3）将Index()中的两个参数request,kargs传递给wrapper()函数，执行：
        1）执行before_func()即Before()并判断返回值，打印before
        2）执行main_func()即Index()并判断返回值，打印index
        3）执行after_func()即After()并判断返回值，打印after
3.程序结束
&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、递归&quot;&gt;&lt;a href=&quot;#三、递归&quot; class=&quot;headerlink&quot; title=&quot;三、递归&quot;&gt;&lt;/a&gt;三、递归&lt;/h2&gt;&lt;h3 id=&quot;演示递归进出过程：【栈的实现：后进先出】&quot;&gt;&lt;a href=&quot;#演示递归进出过程：【栈的实现：后进先出】&quot; class=&quot;headerlink&quot; title=&quot;演示递归进出过程：【栈的实现：后进先出】&quot;&gt;&lt;/a&gt;演示递归进出过程：【栈的实现：后进先出】&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

def calc(n):
    print(n)
    if n/2 &amp;gt; 1:
        res = calc(n/2)
        print(&amp;apos;res:&amp;apos;,res)
    print(&amp;apos;n:&amp;apos;,n)
    return n
calc(10)
&amp;apos;&amp;apos;&amp;apos;
递归进入多少层，最后函数结束退出的时候就是退出多少层
&amp;apos;&amp;apos;&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;10
5.0
2.5
1.25
n: 1.25
res: 1.25
n: 2.5
res: 2.5
n: 5.0
res: 5.0
n: 10
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;

def sum(arg1,arg2,stop):
    if arg1 == 0:
        print(arg1,arg2)
    arg3 = arg1 + arg2
    print(arg3)
    if arg3 &amp;lt; stop:
        sum(arg2,arg3,stop)

sum(0,1,500)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 1
1
2
3
5
8
13
21
34
55
89
144
233
377
610
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、二分查找&quot;&gt;&lt;a href=&quot;#四、二分查找&quot; class=&quot;headerlink&quot; title=&quot;四、二分查找&quot;&gt;&lt;/a&gt;四、二分查找&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
def binary_search(data_source,find_num):
    mid = int(len(data_source)/2)  #列表折中
    if len(data_source) &amp;gt;= 1: #如果列表的长度值大于1，则递归
        if data_source[mid] &amp;gt; find_num: #如果中间值大于查找值，这说明查找值在中间值的左侧
            print(&amp;quot;%s\tis\tthe\tleft\tof \t%s&amp;quot; % (find_num,data_source[mid]))
            binary_search(data_source[:mid],find_num)
        elif data_source[mid] &amp;lt; find_num: #如果中间值小于查找值，这说明查找值在中间值的右侧
            print(&amp;quot;%s\tis\tthe\tright\tof \t%s&amp;quot; % (find_num,data_source[mid]))
            binary_search(data_source[mid:],find_num)
        else:
            print(&amp;quot;已经查找到\t%s&amp;quot; % find_num)
    else: #否则返回值，查找不到
        print(&amp;quot;查不到该数值!&amp;quot;)

if __name__ == &amp;quot;__main__&amp;quot;:
    data = list(range(1,90000))
    binary_search(data,65535)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;五、二维数组&quot;&gt;&lt;a href=&quot;#五、二维数组&quot; class=&quot;headerlink&quot; title=&quot;五、二维数组&quot;&gt;&lt;/a&gt;五、二维数组&lt;/h2&gt;&lt;p&gt;二维数组的概念是在c、c++等语言中出现并定义，在python没有数组概念，对应的则是列表。所以我们这里称为二维数组则是对二维列表的称谓。&lt;/p&gt;
&lt;p&gt;需求：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;转换二维数组
初始列表：
    [0, 1, 2, 3]
    [0, 1, 2, 3]
    [0, 1, 2, 3]
    [0, 1, 2, 3]
    =================
转换后列表：
    [0, 0, 0, 0]
    [1, 1, 1, 1]
    [2, 2, 2, 2]
    [3, 3, 3, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;代码实现：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
data = [[col for col in range(4)] for row in range(4)]
# for i in a:
#     print(i)
for col in range(4):
    for row in range(col,4):
        data[col][row],data[row][col] = data[row][col],data[col][row]
for i in data:
    print(i)
print(a)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;改进型：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data = [[col for col in range(4)] for row in range(4)]
for col in range(len(data)):
    for row in data[col]:
        data[col][row],data[row][col] = data[row][col],data[col][row]
for i in data:
    print(i)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;六、正则表达式&quot;&gt;&lt;a href=&quot;#六、正则表达式&quot; class=&quot;headerlink&quot; title=&quot;六、正则表达式&quot;&gt;&lt;/a&gt;六、正则表达式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;熟悉Linux环境的朋友肯定熟悉，用来操作字符或者文本文件时操作的快速匹配语言。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如str自带的方法，但功能十分强大。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;语法：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一般字符&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;匹配自身
示例：
import re

str1 = &amp;apos;23434sjsjdd523^&amp;amp;(csd#@52&amp;apos;
print(re.match(&amp;apos;abc&amp;apos;,str1))
返回值为：None #说明此时没有匹配到。
print(re.match(&amp;apos;23&amp;apos;,str1))
返回值为：&amp;lt;_sre.SRE_Match object; span=(0, 2), match=&amp;apos;23&amp;apos;&amp;gt; #匹配到自身并返回类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;匹配任意除换行符&amp;apos;\n&amp;apos;外的字符，在DOALL模式中也能匹配换行符。
示例：
import re

str1 = &amp;apos;23434sjsjdd523^&amp;amp;(csd#@52&amp;apos;
print(re.match(&amp;apos;.&amp;apos;,str1))
返回结果：&amp;lt;_sre.SRE_Match object; span=(0, 1), match=&amp;apos;2&amp;apos;&amp;gt; #匹配到任意字符&amp;apos;2&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;\&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;转义字符，使后一个字符改变原来的意思。如果字符串中有字符*需要匹配，可以使用\*或者字符集[*]
示例：
a\\c  --&amp;gt;a\c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;[…]&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字符集(字符类).对应的位置可以是字符集中任意字符。字符集中的字符可以逐个列出，也可以给出范围，如[abc]或[a-c]。第一个字符如果是^则表示取反，如[^abc]表示不是abc的其他字符。
所有的特殊字符在字符集中都失去其原有的特殊含义。在字符集中如果要使用]、-或^，都可以在前面加上反斜杠，或把]、-放在第一个字符，把^放在非第一个字符。
示例：a[bcd]e --&amp;gt;abe ace ade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;预定义字符：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/6Kgqmam.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数量词：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/DDsI4dU.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;边界匹配：&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/Ga3Fdf1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;逻辑、分组&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/1qVGb25.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;正则表达式模块&lt;strong&gt;re&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Python通过re模块提供对正则表达式的支持。使用re的一般步骤是先将正则表达式的字符串形式编译为Pattern实例，然后使用Pattern实例处理文本并获得匹配结果（一个Match实例），最后使用Match实例获得信息，进行其他的操作。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import re

test1 = re.compile(r&amp;apos;hello&amp;apos;)  #使用re.compile编译成Pattern实例
test12 = test1.match(&amp;apos;hello world!&amp;apos;) #使用Pattern匹配文本，获得匹配结果，无法匹配时返回None

if test12:
    print(test12.group()) #使用test12获得分组信息
#输出  hello

#the same as top
m = re.match(r&amp;apos;hello&amp;apos;, &amp;apos;hello world!&amp;apos;)
print(m.group())
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;match&quot;&gt;&lt;a href=&quot;#match&quot; class=&quot;headerlink&quot; title=&quot;match&quot;&gt;&lt;/a&gt;match&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;match(string[,pos[endpos]])|re.match(patern,string[,flags]):
从string的pos下标处起尝试匹配pattern；如果pattern结束时仍可匹配，则返回一个Match对象；如果匹配过程中pattern无法匹配，或者匹配未结束就已到达endpos，则返回None。 
pos和endpos的默认值分别是0和len(sring);re.match()无法指定这两个参数，参数flags用于编译pattern时指定匹配模式。
（re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none.）
测试代码：
    m = re.match(&amp;apos;hello&amp;apos;, &amp;apos;hello world!&amp;apos;)
    print(m.group())
    返回值为：hello

    print(re.match(&amp;apos;www&amp;apos;,&amp;apos;www.apicloud.com&amp;apos;).span()) #在起始位置匹配
    print(re.match(&amp;apos;com&amp;apos;,&amp;apos;www.apicloud.com&amp;apos;)) #不在起始位置匹配

    返回结果：
    (0, 3)
    None

    import re

    line = &amp;quot;Cats are smarter than dogs&amp;quot;
    matchObj = re.match( r&amp;apos;(.*) are (.*?) .*&amp;apos;, line, re.M|re.I)
    #.* 匹配任意字符且匹配前一个字符0或无限次
    #.*? 匹配任意字符，且匹配前一个字符0或无限次，且匹配前一个字符0次或1次
    if matchObj:
       print(&amp;quot;matchObj.group() : &amp;quot;, matchObj.group())
       print(&amp;quot;matchObj.group(1) : &amp;quot;, matchObj.group(1))
       print(&amp;quot;matchObj.group(2) : &amp;quot;, matchObj.group(2))
    else:
       print(&amp;quot;No match!!&amp;quot;)

    返回结果：
    matchObj.group() :  Cats are smarter than dogs
    matchObj.group(1) :  Cats
    matchObj.group(2) :  smarter
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;search&quot;&gt;&lt;a href=&quot;#search&quot; class=&quot;headerlink&quot; title=&quot;search&quot;&gt;&lt;/a&gt;search&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;功能：re.search 扫描整个字符串并返回第一个成功的匹配
语法：re.search(pattern, string, flags=0)
参数：pattern 匹配的正则表达式
     string  要匹配的字符串
     flags   标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。

测试代码：
    import re
    print(re.search(&amp;apos;www&amp;apos;, &amp;apos;www.apicloud.com&amp;apos;).span())  # 在起始位置匹配
    print(re.search(&amp;apos;com&amp;apos;, &amp;apos;www.apicloud.com&amp;apos;).span())         # 不在起始位置匹配
    返回结果：
    (0, 3)
    (13, 16)

    import re
    line = &amp;quot;Cats are smarter than dogs&amp;quot;
    searchObj = re.search( r&amp;apos;(.*) are (.*?) .*&amp;apos;, line, re.M|re.I)
    if searchObj:
       print(&amp;quot;searchObj.group() : &amp;quot;, searchObj.group())
       print(&amp;quot;searchObj.group(1) : &amp;quot;, searchObj.group(1))
       print(&amp;quot;searchObj.group(2) : &amp;quot;, searchObj.group(2))
    else:
       print(&amp;quot;Nothing found!!&amp;quot;)

    #返回结果：
    # searchObj.group() :  Cats are smarter than dogs
    # searchObj.group(1) :  Cats
    # searchObj.group(2) :  smarter
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;对比match和search&quot;&gt;&lt;a href=&quot;#对比match和search&quot; class=&quot;headerlink&quot; title=&quot;对比match和search&quot;&gt;&lt;/a&gt;对比match和search&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。
示例代码：
    import re
    line = &amp;quot;Cats are smarter than dogs&amp;quot;
    matchObj = re.match( r&amp;apos;dogs&amp;apos;, line, re.M|re.I)
    if matchObj:
       print(&amp;quot;match --&amp;gt; matchObj.group() : &amp;quot;, matchObj.group())
    else:
       print(&amp;quot;match --&amp;gt; No match!!&amp;quot;)

    searchObj = re.search( r&amp;apos;dogs&amp;apos;, line, re.M|re.I)
    if searchObj:
       print(&amp;quot;search --&amp;gt; searchObj.group() : &amp;quot;, searchObj.group())
    else:
       print(&amp;quot;search --&amp;gt; No search!!&amp;quot;)

    #返回结果：
    # match --&amp;gt; No match!!
    # search --&amp;gt; searchObj.group() :  dogs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;sub&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：re.sub用户替换字符串中的匹配项
语法：re.sub(pattern, repl, string, max=0)
测试代码：
    import re
    phone = &amp;quot;2004-959-559 # This is Phone Number&amp;quot;
    # Delete Python-style comments
    num1 = re.sub(r&amp;apos; .*$&amp;apos;, &amp;quot;&amp;quot;, phone) #匹配&amp;apos; &amp;apos;空格到字符串默认的所有任意字符，删除
    print(&amp;quot;Phone Num : &amp;quot;, num1)  #Phone Num :  2004-959-559   最后一个字符后面没有空格
    num2 = re.sub(r&amp;apos;#.*$&amp;apos;, &amp;quot;&amp;quot;, phone) #匹配#到字符串默认的所有任意字符，删除
    print(&amp;quot;Phone Num : &amp;quot;, num2) #Phone Num :  2004-959-559  最后一个字符后面有一个空格

    # Remove anything other than digits
    num3 = re.sub(r&amp;apos;\D&amp;apos;, &amp;quot;&amp;quot;, phone) #匹配非数字字符，然后删除
    print(&amp;quot;Phone Num : &amp;quot;, num3) #Phone Num :  2004959559
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;作业：&quot;&gt;&lt;a href=&quot;#作业：&quot; class=&quot;headerlink&quot; title=&quot;作业：&quot;&gt;&lt;/a&gt;作业：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;计算器开发

1. 实现加减乘除及拓号优先级解析
2. 用户输入 1 - 2 * ( (60-30 +(-40/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )) - (-4*3)/ (16-3*2) )等类似公式后，必须自己解析里面的(),+,-,*,/符号和公式，运算后得出结果，结果必须与真实的计算器所得出的结果一致

博客地址：http://www.cnblogs.com/songqingbo/p/5168125.html
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day03&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5133343.html&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day03</title>
    <link href="http://blog.songqingbo.cn/2016/01/16/s12-20160116-day03/"/>
    <id>http://blog.songqingbo.cn/2016/01/16/s12-20160116-day03/</id>
    <published>2016-01-16T07:30:00.000Z</published>
    <updated>2016-07-07T03:17:58.812Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day2&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5115190.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5115190.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;day3&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5133343.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5133343.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、set集合&quot;&gt;&lt;a href=&quot;#一、set集合&quot; class=&quot;headerlink&quot; title=&quot;一、set集合&quot;&gt;&lt;/a&gt;一、set集合&lt;/h2&gt;&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5128066.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5128066.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;优点：访问速度快；
     自带一套解决元素重复的解决方案
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;测试程序&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;old_dict = {
    &amp;quot;#1&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
    &amp;quot;#2&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
    &amp;quot;#3&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
}
new_dict = {
    &amp;quot;#1&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 800 },
    &amp;quot;#3&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
    &amp;quot;#4&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c2&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
}

获取三个列表：
    1. 需要更新的列表 update_list
    2. 需要删除的列表 del_list
    3. 需要增加的列表 add_list

代码实现：
    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;

    old_dict = {
        &amp;quot;#1&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
        &amp;quot;#2&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
        &amp;quot;#3&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
    }
    new_dict = {
        &amp;quot;#1&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 800 },
        &amp;quot;#3&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c1&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
        &amp;quot;#4&amp;quot;:{ &amp;apos;hostname&amp;apos;:&amp;apos;c2&amp;apos;, &amp;apos;cpu_count&amp;apos;: 2, &amp;apos;mem_capicity&amp;apos;: 80 },
    }

    #设置set
    old_set = set(old_dict.keys())
    new_set = set(new_dict.keys())

    #更新的set
    update_set = new_set.intersection(old_dict)
    delate_set = old_set.difference(update_set)
    add_set = new_set.difference(update_set)

    update_list = []
    del_list = []
    add_list = []
    # print(update_set)
    # print(delate_set)
    # print(add_set)
    for i in update_set:
        update_list.append({i:new_dict[i]})
        print(&amp;apos;需要更新的列表:%s&amp;apos; % update_list)

    for i in delate_set:
        del_list.append({i:old_dict[i]})
        print(&amp;quot;需要删除的列表:%s&amp;quot; % del_list)

    for i in add_set:
        add_list.append({i:new_dict[i]})
        print(&amp;quot;需要增加的列表:%s&amp;quot; % add_list)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、collection系列&quot;&gt;&lt;a href=&quot;#二、collection系列&quot; class=&quot;headerlink&quot; title=&quot;二、collection系列&quot;&gt;&lt;/a&gt;二、collection系列&lt;/h2&gt;&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5137785.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5137785.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;不常用功能，需要进行模块功能导入:
    import collection
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Counter&quot;&gt;&lt;a href=&quot;#Counter&quot; class=&quot;headerlink&quot; title=&quot;Counter&quot;&gt;&lt;/a&gt;Counter&lt;/h3&gt;&lt;p&gt;常用方法测试：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import collections

obj = collections.Counter(&amp;apos;sjndsjkdsdmslaladsldsldms&amp;apos;)

print(&amp;quot;输出字符出现的次数字典:&amp;quot;)
for k,v in obj.items():
    print(&amp;quot;{%s:%s}&amp;quot; % (k,v))

print(&amp;quot;输出每一个字符:&amp;quot;) #遍历获取原始字符元素
for k in obj.elements():
    print(k)

print(&amp;quot;输出前四个出现次数最多的字符:&amp;quot;)
for k in obj.most_common(4):
    print(k)


输出结果：
    输出字符出现的次数字典:
    {s:7}
    {l:4}
    {m:2}
    {d:6}
    {k:1}
    {n:1}
    {j:2}
    {a:2}
    输出每一个字符:
    s
    s
    s
    s
    s
    s
    s
    l
    l
    l
    l
    m
    m
    d
    d
    d
    d
    d
    d
    k
    n
    j
    j
    a
    a
    输出前四个出现次数最多的字符:
    (&amp;apos;s&amp;apos;, 7)
    (&amp;apos;d&amp;apos;, 6)
    (&amp;apos;l&amp;apos;, 4)
    (&amp;apos;m&amp;apos;, 2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__missing__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：对于不存在的元素，返回计数器为0
import collections
c = collections.Counter(&amp;apos;adjsdkskdjksjaksklklakl&amp;apos;)
c.__missing__(5)
返回结果：0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;most_common&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取出现次数的前几个字母排名
import collections
c = collections.Counter(&amp;apos;adjsdkskdjksjaksklklakl&amp;apos;)
c.most_common(3)
[(&amp;apos;k&amp;apos;, 7), (&amp;apos;s&amp;apos;, 4), (&amp;apos;a&amp;apos;, 3)]
c.most_common(8)
[(&amp;apos;k&amp;apos;, 7), (&amp;apos;s&amp;apos;, 4), (&amp;apos;a&amp;apos;, 3), (&amp;apos;j&amp;apos;, 3), (&amp;apos;l&amp;apos;, 3), (&amp;apos;d&amp;apos;, 3)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：计数器中的所有元素，并且按照ascii码进行了排序
    返回一个迭代器。元素被重复了多少次，在该迭代器中就包含多少个该元素。所有元素按照字母序排序，个数小于1的元素不被包含。
import collections
c = collections.Counter(&amp;apos;adjsdkskdjksjaksklklakl&amp;apos;)
sorted(c.elements())
返回结果：[&amp;apos;a&amp;apos;, &amp;apos;a&amp;apos;, &amp;apos;a&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;j&amp;apos;, &amp;apos;j&amp;apos;, &amp;apos;j&amp;apos;, &amp;apos;k&amp;apos;, &amp;apos;k&amp;apos;, &amp;apos;k&amp;apos;, &amp;apos;k&amp;apos;, &amp;apos;k&amp;apos;, &amp;apos;k&amp;apos;, &amp;apos;k&amp;apos;,&amp;apos;l&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;l&amp;apos;, &amp;apos;s&amp;apos;, &amp;apos;s&amp;apos;, &amp;apos;s&amp;apos;, &amp;apos;s&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;计数值的访问与缺失的键&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：默认将计数器中所有的字符认为一个键，然后统计键出现的次数，即键值。如果键不存在则返回0.
import collections
c = collections.Counter(&amp;apos;adjsdkskdjksjaksklklakl&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; c[&amp;apos;a&amp;apos;]
3
&amp;gt;&amp;gt;&amp;gt; c[&amp;apos;b&amp;apos;]
0
&amp;gt;&amp;gt;&amp;gt; c[&amp;apos;l&amp;apos;]
3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;update &amp;amp;&amp;amp; subtract&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：都是更新计数器，update是增加，subtract是减少
import collections
&amp;gt;&amp;gt;&amp;gt; c = collections.Counter(&amp;apos;which&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; c[&amp;apos;h&amp;apos;]  #这里的h出现2次
2
&amp;gt;&amp;gt;&amp;gt; c.update(&amp;apos;with&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; c
Counter({&amp;apos;h&amp;apos;: 3, &amp;apos;i&amp;apos;: 2, &amp;apos;w&amp;apos;: 2, &amp;apos;t&amp;apos;: 1, &amp;apos;c&amp;apos;: 1})
&amp;gt;&amp;gt;&amp;gt; c[&amp;apos;h&amp;apos;] #这里则完成了update操作，h出现了3次
3

&amp;gt;&amp;gt;&amp;gt; c.subtract(&amp;apos;with&amp;apos;) 
&amp;gt;&amp;gt;&amp;gt; c
Counter({&amp;apos;h&amp;apos;: 2, &amp;apos;c&amp;apos;: 1, &amp;apos;i&amp;apos;: 1, &amp;apos;w&amp;apos;: 1, &amp;apos;t&amp;apos;: 0})
&amp;gt;&amp;gt;&amp;gt; c[&amp;apos;h&amp;apos;] #这里完成subtract操作之后，h出现的次数又恢复到2次
2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;del&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：删除键
import collections
&amp;gt;&amp;gt;&amp;gt; c = collections.Counter(&amp;apos;which&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; c[&amp;apos;h&amp;apos;]  #这里的h出现2次
2
&amp;gt;&amp;gt;&amp;gt; del c[&amp;apos;h&amp;apos;]
&amp;gt;&amp;gt;&amp;gt; c
Counter({&amp;apos;c&amp;apos;: 1, &amp;apos;i&amp;apos;: 1, &amp;apos;w&amp;apos;: 1, &amp;apos;t&amp;apos;: 0})
&amp;gt;&amp;gt;&amp;gt; c[&amp;apos;h&amp;apos;]  #del操作删除了键&amp;apos;h&amp;apos;
0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;copy&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：浅拷贝
import collections
&amp;gt;&amp;gt;&amp;gt; c = collections.Counter(&amp;apos;which&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; d = c.copy()
&amp;gt;&amp;gt;&amp;gt; d
Counter({&amp;apos;h&amp;apos;: 2, &amp;apos;c&amp;apos;: 1, &amp;apos;i&amp;apos;: 1, &amp;apos;w&amp;apos;: 1})
&amp;gt;&amp;gt;&amp;gt; id(c)
7150792
&amp;gt;&amp;gt;&amp;gt; id(d)
6511976
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;算术和集合操作&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：+、-、&amp;amp;、|操作也可以用于Counter。其中&amp;amp;和|操作分别返回两个Counter对象各元素的最小值和最大值。需要注意的是，得到的Counter对象将删除小于1的元素。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/dpBUpJJ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用操作&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;说明：Counter继承dict的所有方法，常用的操作列在下面，仅供参考
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/5EmjmX2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;有序字典orderedDict&quot;&gt;&lt;a href=&quot;#有序字典orderedDict&quot; class=&quot;headerlink&quot; title=&quot;有序字典orderedDict&quot;&gt;&lt;/a&gt;有序字典orderedDict&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;有序字典继承字典的一切属性，只是在顺序上是有序的。
d = collections.OrderedDict({&amp;apos;name&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:18})
print(d)
返回结果：OrderedDict([(&amp;apos;name&amp;apos;, &amp;apos;swht&amp;apos;), (&amp;apos;age&amp;apos;, 18)])
print(type(d))
返回结果：&amp;lt;class &amp;apos;collections.OrderedDict&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;move_to_end&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将指定的键值对从开头移动到末尾。
d = collections.OrderedDict({&amp;apos;name&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:18,&amp;apos;address&amp;apos;:&amp;apos;shandong&amp;apos;,})
d.move_to_end(&amp;apos;name&amp;apos;)
print(d)
返回结果：OrderedDict([(&amp;apos;age&amp;apos;, 18), (&amp;apos;address&amp;apos;, &amp;apos;shandong&amp;apos;), (&amp;apos;name&amp;apos;, &amp;apos;swht&amp;apos;)])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;pop&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：移除字典键值，并返回删除键值的values
d = collections.OrderedDict({&amp;apos;name&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:18,&amp;apos;address&amp;apos;:&amp;apos;shandong&amp;apos;,})
d.pop(&amp;apos;address&amp;apos;)
print(d)
返回结果：OrderedDict([(&amp;apos;age&amp;apos;, 18), (&amp;apos;name&amp;apos;, &amp;apos;swht&amp;apos;)])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;clear&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：清空有序字典的值
d = collections.OrderedDict({&amp;apos;name&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:18,&amp;apos;address&amp;apos;:&amp;apos;shandong&amp;apos;,})
d.clear()
print(d)
返回结果：OrderedDict()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;keys,values,items&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：继承字典的属性，获取字典的所有键和所有值
d = collections.OrderedDict({&amp;apos;name&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:18,&amp;apos;address&amp;apos;:&amp;apos;shandong&amp;apos;,})
l1 = d.keys()
l2 = d.values()
l3 = d.items()
print(l1,l2，l3)
返回结果：odict_keys([&amp;apos;address&amp;apos;, &amp;apos;age&amp;apos;, &amp;apos;name&amp;apos;]) odict_values([&amp;apos;shandong&amp;apos;, 18, &amp;apos;swht&amp;apos;]) odict_items([(&amp;apos;age&amp;apos;, 18), (&amp;apos;name&amp;apos;, &amp;apos;swht&amp;apos;), (&amp;apos;address&amp;apos;, &amp;apos;shandong&amp;apos;)])
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;默认字典defaultdict&quot;&gt;&lt;a href=&quot;#默认字典defaultdict&quot; class=&quot;headerlink&quot; title=&quot;默认字典defaultdict&quot;&gt;&lt;/a&gt;默认字典defaultdict&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;defaultdict是对字典的类型的补充，他默认给字典的值设置了一个类型。创建一个默认字典，value值类型为列表.
dic = collections.defaultdict(list)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;可命名元组nametuple&quot;&gt;&lt;a href=&quot;#可命名元组nametuple&quot; class=&quot;headerlink&quot; title=&quot;可命名元组nametuple&quot;&gt;&lt;/a&gt;可命名元组nametuple&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;没有现成的类，用户需要自行创建相应的类
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/env python3
&amp;apos;&amp;apos;&amp;apos;
Author:@南非波波
Blog:http://www.cnblogs.com/songqingbo/
E-mail:qingbo.song@gmail.com
&amp;apos;&amp;apos;&amp;apos;
import collections
MytupleClass = collections.namedtuple(&amp;quot;MytupleClass&amp;quot;,[&amp;apos;x&amp;apos;,&amp;apos;y&amp;apos;,&amp;apos;z&amp;apos;])
obj = MytupleClass(11,22,33)
print(obj.x,obj.y,obj.z)
返回结果：11 22 33
总结：相当于在元组的基础上增加一个key，使其成为一个类字典的样子
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DnEPoMR.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;双向队列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;下面两种方法都可以创建双向列表，虽然在最初的引用的类不同，但最后创建的类型 都是collections.deque
#创建双向队列
import collections
d = collections.deque()
返回结果：&amp;lt;class &amp;apos;collections.deque&amp;apos;&amp;gt;

#but这样创建双向队列呢
import queue
p = queue.deque()
print(type(p))
#&amp;lt;class &amp;apos;collections.deque&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;单向队列&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#创建单向队列
import queue
q = queue.Queue()
print(type(q))
#&amp;lt;class &amp;apos;queue.Queue&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、深浅拷贝&quot;&gt;&lt;a href=&quot;#三、深浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;三、深浅拷贝&quot;&gt;&lt;/a&gt;三、深浅拷贝&lt;/h2&gt;&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5139015.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5139015.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#对于 数字 和 字符串 而言，赋值、浅拷贝和深拷贝无意义，因为其永远指向同一个内存地址
    import copy
    a1 = 22255
    a2 = 22255
    print(id(a1),id(a2)) #3428240 3428240

#对于字典、元祖、列表 而言，进行赋值、浅拷贝和深拷贝时，其内存地址的变化是不同的。

    import copy
    #字典
    n1 = {&amp;quot;k1&amp;quot;: &amp;quot;wu&amp;quot;, &amp;quot;k2&amp;quot;: 123, &amp;quot;k3&amp;quot;: [&amp;quot;alex&amp;quot;, 456]}
    ##赋值
    n2 = n1
    print(n1,n2) #{&amp;apos;k1&amp;apos;: &amp;apos;wu&amp;apos;, &amp;apos;k2&amp;apos;: 123, &amp;apos;k3&amp;apos;: [&amp;apos;alex&amp;apos;, 456]} {&amp;apos;k1&amp;apos;: &amp;apos;wu&amp;apos;, &amp;apos;k2&amp;apos;: 123, &amp;apos;k3&amp;apos;: [&amp;apos;alex&amp;apos;, 456]}
    print(id(n1),id(n2))  #6674440 6674440 #内存地址一样
    ##浅拷贝
    n3 = copy.copy(n1)
    print(n1,n3) #{&amp;apos;k1&amp;apos;: &amp;apos;wu&amp;apos;, &amp;apos;k2&amp;apos;: 123, &amp;apos;k3&amp;apos;: [&amp;apos;alex&amp;apos;, 456]} {&amp;apos;k1&amp;apos;: &amp;apos;wu&amp;apos;, &amp;apos;k2&amp;apos;: 123, &amp;apos;k3&amp;apos;: [&amp;apos;alex&amp;apos;, 456]}
    print(id(n1),id(n3)) #6936584 12067848  #浅拷贝第一级，内存地址相同
    print(id(n1[&amp;apos;k3&amp;apos;]),id(n3[&amp;apos;k3&amp;apos;])) #18741768 18741768
    ##深拷贝
    n4 = copy.deepcopy(n1)
    print(n1,n4) #{&amp;apos;k3&amp;apos;: [&amp;apos;alex&amp;apos;, 456], &amp;apos;k2&amp;apos;: 123, &amp;apos;k1&amp;apos;: &amp;apos;wu&amp;apos;} {&amp;apos;k3&amp;apos;: [&amp;apos;alex&amp;apos;, 456], &amp;apos;k1&amp;apos;: &amp;apos;wu&amp;apos;, &amp;apos;k2&amp;apos;: 123}
    print(id(n1),id(n4)) #6805512 11736904
    print(id(n1[&amp;apos;k3&amp;apos;]),id(n4[&amp;apos;k3&amp;apos;])) #7601032 7599496 #深拷贝第二级，内存地址也不相同

    #列表
    n1 = [1,2,3,4,5,[6,7],]
    ##赋值
    n2 = n1
    print(n1,n2) #[1, 2, 3, 4, 5, [6, 7]] [1, 2, 3, 4, 5, [6, 7]]
    print(id(n1),id(n2)) #18609928 18609928
    print(id(n1[5]),id(n2[5])) #18609544 18609544
    ##浅拷贝
    n3 = copy.copy(n1)
    print(n1,n3) #[1, 2, 3, 4, 5, [6, 7]] [1, 2, 3, 4, 5, [6, 7]]
    print(id(n1),id(n3)) #18609928 18232904
    print(id(n1[5]),id(n3[5])) #18609544 18609544
    ##深拷贝
    n4 = copy.deepcopy(n1)
    print(n1,n4) #[1, 2, 3, 4, 5, [6, 7]] [1, 2, 3, 4, 5, [6, 7]]
    print(id(n1),id(n4)) #18609928 18611848
    print(id(n1[5]),id(n4[5])) #18609544 18611912


    #元组
    一个小插曲：
        import copy
        n1 = (1,2,3,4,5,(6,7,),)
        #赋值
        n2 = n1
        print(&amp;apos;n1:&amp;apos;,n1,&amp;apos;n2:&amp;apos;,n2) #n1: (1, 2, 3, 4, 5, (6, 7)) n2: (1, 2, 3, 4, 5, (6, 7))
        print(id(n1),id(n2)) #10416584 10416584
        print(id(n1[5]),id(n2[5])) #18415304 18415304
        print(type(n1),type(2)) #&amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; &amp;lt;class &amp;apos;int&amp;apos;&amp;gt;
        #浅拷贝
        n3 = copy.copy(n1)
        print(&amp;apos;n1:&amp;apos;,n1,&amp;apos;n3:&amp;apos;,n3) #n1: (1, 2, 3, 4, 5, (6, 7)) n2: (1, 2, 3, 4, 5, (6, 7))
        print(id(n1),id(n3)) #10416584 10416584
        print(id(n1[5]),id(n3[5])) #18415304 18415304
        print(type(n1),type(3)) #&amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; &amp;lt;class &amp;apos;int&amp;apos;&amp;gt;
        #深拷贝
        n4 = copy.deepcopy(n1)
        print(&amp;apos;n1:&amp;apos;,n1,&amp;apos;n4:&amp;apos;,n4) #n1: (1, 2, 3, 4, 5, (6, 7)) n2: (1, 2, 3, 4, 5, (6, 7))
        print(id(n1),id(n4)) #10416584 10416584
        print(id(n1[5]),id(n4[5])) #18415304 18415304
        print(type(n1),type(5)) #&amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; &amp;lt;class &amp;apos;int&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/SHmoN06.png&quot; alt=&quot;&quot;&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;再一个小插曲：
    import copy
    n1 = (1,2,3,4,5,[6,7,],)
    #赋值
    n2 = n1
    print(&amp;apos;n1:&amp;apos;,n1,&amp;apos;n2:&amp;apos;,n2) #(1, 2, 3, 4, 5, [6, 7]) n2: (1, 2, 3, 4, 5, [6, 7])
    print(id(n1),id(n2)) #11465160 11465160
    print(id(n1[5]),id(n2[5])) #18480456 18480456
    print(type(n1),type(2)) #&amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; &amp;lt;class &amp;apos;int&amp;apos;&amp;gt;
    #浅拷贝
    n3 = copy.copy(n1)
    print(&amp;apos;n1:&amp;apos;,n1,&amp;apos;n3:&amp;apos;,n3) #n1: (1, 2, 3, 4, 5, [6, 7]) n3: (1, 2, 3, 4, 5, [6, 7])
    print(id(n1),id(n3)) #11465160 11465160
    print(id(n1[5]),id(n3[5])) #18480456 18480456
    print(type(n1),type(3)) #&amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; &amp;lt;class &amp;apos;int&amp;apos;&amp;gt;
    #深拷贝
    n4 = copy.deepcopy(n1)
    print(&amp;apos;n1:&amp;apos;,n1,&amp;apos;n4:&amp;apos;,n4) #n1: (1, 2, 3, 4, 5, [6, 7]) n4: (1, 2, 3, 4, 5, [6, 7])
    print(id(n1),id(n4)) #11465160 18109736
    print(id(n1[5]),id(n4[5])) #18480456 18478920
    print(type(n1),type(5)) #&amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; &amp;lt;class &amp;apos;int&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DubYez7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;出现以上问题有可能跟下面的说法有关：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/XCsFOj6.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;案例代码

    import copy
    dic = {
        &amp;quot;cpu&amp;quot;:[80,],
        &amp;quot;mem&amp;quot;:[80,],
        &amp;quot;disk&amp;quot;:[80,],
    }

    print(&amp;quot;old:&amp;quot;,dic)
    new_dic1 = copy.copy(dic)
    new_dic1[&amp;quot;cpu&amp;quot;][0] = 50
    print(&amp;quot;old:&amp;quot;,dic)
    print(&amp;quot;浅拷贝:&amp;quot;,new_dic1)
    #返回结果：
    #old: {&amp;apos;disk&amp;apos;: [80], &amp;apos;cpu&amp;apos;: [80], &amp;apos;mem&amp;apos;: [80]}
    #浅拷贝: {&amp;apos;disk&amp;apos;: [80], &amp;apos;cpu&amp;apos;: [50], &amp;apos;mem&amp;apos;: [80]}

    new_dic2 = copy.deepcopy(dic)
    new_dic2[&amp;quot;cpu&amp;quot;][0] = 60
    print(&amp;quot;old:&amp;quot;,dic)
    print(&amp;quot;深拷贝:&amp;quot;,new_dic2)
    #返回结果
    # old: {&amp;apos;mem&amp;apos;: [80], &amp;apos;cpu&amp;apos;: [50], &amp;apos;disk&amp;apos;: [80]}
    # 深拷贝: {&amp;apos;mem&amp;apos;: [80], &amp;apos;cpu&amp;apos;: [60], &amp;apos;disk&amp;apos;: [80]}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、函数&quot;&gt;&lt;a href=&quot;#四、函数&quot; class=&quot;headerlink&quot; title=&quot;四、函数&quot;&gt;&lt;/a&gt;四、函数&lt;/h2&gt;&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5142957.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5142957.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;定义：

    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    Author:@南非波波
    Blog:http://www.cnblogs.com/songqingbo/
    E-mail:qingbo.song@gmail.com
    &amp;apos;&amp;apos;&amp;apos;
    #定义函数，作用打印一个值
    def num_print():
        n = 456
        n += 1
        print(n)
使用：

    #函数调用
    num_print()
    #将f变量指向函数num_print，然后调用f()相当于调用num_print()
    f = num_print
    f()
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;形参：函数中一个变量，在函数执行前无意义，在函数调用时必须指定实际参数。
实参：实际参数用户传递给所调用的函数的一个变量，其值赋值到函数中的形式参数，然后在函数中       作为变量参与函数执行
默认参数：必须放在最后
    def show(a1,a2,a3 = 5):
        print(a1,a2,a3)
    show(&amp;quot;wu&amp;quot;,&amp;quot;ha&amp;quot;)
    #返回结果：wu ha 5

指定参数：
    def show(a1,a2):
        print(a1,a2)
    show(a2=52,a1=8)
    #返回结果：8 52

动态参数：
    *arg --序列：自动转换成一个元组
        def show(*arg):
            print(arg,type(arg))
        show(23,45,67)
        #返回结果：(23, 45, 67) &amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt;
        #or
        l = [23,45,67]
        show(*l)
        #返回结果：(23, 45, 67) &amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt;

    **arg --字典：自动转换成一个字典
        #默认字典处理
        def show(**arg):
            print(arg,type(arg))
        show(name1=&amp;apos;swht&amp;apos;,name2=&amp;apos;shen&amp;apos;)
        #返回结果：{&amp;apos;name1&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;name2&amp;apos;: &amp;apos;shen&amp;apos;} &amp;lt;class &amp;apos;dict&amp;apos;&amp;gt;
        #or
        d = {&amp;quot;name1&amp;quot;=&amp;quot;swht&amp;quot;,&amp;quot;name2&amp;quot;=&amp;quot;shen&amp;quot;}
        show(**d)
        #返回结果：{&amp;apos;name1&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;name2&amp;apos;: &amp;apos;shen&amp;apos;} &amp;lt;class &amp;apos;dict&amp;apos;&amp;gt;

    *arg，**kwarges --序列和字典
        def show(*args,**kwargs):
            print(args,type(args),&amp;apos;\n&amp;apos;,kwargs,type(kwargs))
        show(23,45,67,82,name1=&amp;apos;swht&amp;apos;,name2=&amp;apos;shen&amp;apos;)
        #返回结果：(23, 45, 67, 82) &amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; 
                   {&amp;apos;name2&amp;apos;: &amp;apos;shen&amp;apos;, &amp;apos;name1&amp;apos;: &amp;apos;swht&amp;apos;} &amp;lt;class &amp;apos;dict&amp;apos;&amp;gt;        
        注意：使用*arg，**kwarges组合参数，必须是*arg在前，**kwarges在后，否则系统报错；另外实参在输入的时候也应该是按照上述顺序。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NR71YzT.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;拓展：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def show(*args,**kwargs):
    print(args,type(args),&amp;apos;\n&amp;apos;,kwargs,type(kwargs))
l = [23,45,67,82]
d = {&amp;apos;name1&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;name2&amp;apos;:&amp;apos;shen&amp;apos;}
show(l,d)
#返回结果：
([23, 45, 67, 82], {&amp;apos;name1&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;name2&amp;apos;: &amp;apos;shen&amp;apos;}) &amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; 
{} &amp;lt;class &amp;apos;dict&amp;apos;&amp;gt;

def show(*args,**kwargs):
    print(args,type(args),&amp;apos;\n&amp;apos;,kwargs,type(kwargs))
l = [23,45,67,82]
d = {&amp;apos;name1&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;name2&amp;apos;:&amp;apos;shen&amp;apos;}
show(*l,**d)
#返回结果：
(23, 45, 67, 82) &amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt; 
{&amp;apos;name2&amp;apos;: &amp;apos;shen&amp;apos;, &amp;apos;name1&amp;apos;: &amp;apos;swht&amp;apos;} &amp;lt;class &amp;apos;dict&amp;apos;&amp;gt;

总结：
    函数可以传递元组、列表、字典等类型的值，由于带&amp;apos;*&amp;apos;、&amp;apos;**&amp;apos;的参数允许传入多个参数，所以在调用函数的时候默认将传入的参数识别到第一个*args。为了指定将参数传给某个args，这里需要对实参进行加&amp;apos;*&amp;apos;进行标识。

#list
show = &amp;quot;Welcome to {0},there have too many {1}!&amp;quot;
# reault = show.format(&amp;quot;China&amp;quot;,&amp;quot;Foods&amp;quot;)
l = [&amp;quot;China&amp;quot;,&amp;quot;Foods&amp;quot;]
reault = show.format(*l)
print(reault)
#返回结果：Welcome to China,there have too many Foods!

#dict
show = &amp;quot;{name} is a {acter}!&amp;quot;
# reault = show.format(name=&amp;apos;swht&amp;apos;,acter=&amp;apos;teacher&amp;apos;)
d = {&amp;apos;name&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;acter&amp;apos;:&amp;apos;teacher&amp;apos;}
reault = show.format(**d)
print(reault)
#返回结果：swht is a teacher!
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;lambda表达式&quot;&gt;&lt;a href=&quot;#lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;lambda表达式&quot;&gt;&lt;/a&gt;lambda表达式&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/ICv89lK.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    功能：简单函数的表示方式
    func = lambda a:a+1
    函数名  关键字 形参：函数体
    创建形式参数a，函数内容为a+1,并将结果return
测试代码：
    f = lambda x:x + 1
    ret = f(4)
    print(ret)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;内置函数&quot;&gt;&lt;a href=&quot;#内置函数&quot; class=&quot;headerlink&quot; title=&quot;内置函数&quot;&gt;&lt;/a&gt;内置函数&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/5so1j4e.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;abs()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：取绝对值
&amp;gt;&amp;gt;&amp;gt; abs(5)
5
&amp;gt;&amp;gt;&amp;gt; abs(-85)
85
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;all(iterable)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：iterable所有的元素都为真,返回True，否则返回False
备注：为False的元素：0、&amp;apos;&amp;apos;、False或者空，其他的为True
参数：iterable为可迭代对象
all的功能可以使用下面的函数进行理解：
    def all(iterable):
    for element in iterable:
        if not element:
            return False
    return True
测试代码：
    all(&amp;apos;test,hh&amp;apos;)
    返回值为：True
    &amp;gt;&amp;gt;&amp;gt; all([&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;c&amp;apos;, &amp;apos;d&amp;apos;])  #列表list，元素都不为空或0
    True
    &amp;gt;&amp;gt;&amp;gt; all([&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;&amp;apos;, &amp;apos;d&amp;apos;])  #列表list，存在一个为空的元素
    False
    &amp;gt;&amp;gt;&amp;gt; all([0, 1，2, 3])  #列表list，存在一个为0的元素
    False              
    &amp;gt;&amp;gt;&amp;gt; all((&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;c&amp;apos;, &amp;apos;d&amp;apos;))  #元组tuple，元素都不为空或0
    True
    &amp;gt;&amp;gt;&amp;gt; all((&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;&amp;apos;, &amp;apos;d&amp;apos;))  #元组tuple，存在一个为空的元素
    False
    &amp;gt;&amp;gt;&amp;gt; all((0, 1，2, 3))  #元组tuple，存在一个为0的元素
    False
    &amp;gt;&amp;gt;&amp;gt; all([]) # 空列表
    True
    &amp;gt;&amp;gt;&amp;gt; all(()) # 空元组
    True    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;any(iterable)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：iterable中元素只要有一个元素为真，则返回True,否则返回False(即iterable中所有的元素为假才会返回False)
参数：iterable为可迭代对象
any的功能可以使用下面的函数进行理解：
def any(iterable):
   for element in iterable:
       if  element:
           return False
   return True
测试代码：
    &amp;gt;&amp;gt;&amp;gt; any([0,1,2,3]) #列表中仅有一个元素0为假，返回True
    True
    &amp;gt;&amp;gt;&amp;gt; any([&amp;apos; &amp;apos;, &amp;apos;  &amp;apos;, &amp;apos;&amp;apos;, 0])
    True
    &amp;gt;&amp;gt;&amp;gt; any([0]) #列表中元素只有一个元素0，返回False
    False
    &amp;gt;&amp;gt;&amp;gt; any([0,&amp;apos;&amp;apos;])
    False
    &amp;gt;&amp;gt;&amp;gt; any([0,&amp;apos;&amp;apos;,4])
    True    
    &amp;gt;&amp;gt;&amp;gt; any((&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;c&amp;apos;, &amp;apos;d&amp;apos;))  #元组tuple，元素都不为空或0
    True
    &amp;gt;&amp;gt;&amp;gt; any((&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;, &amp;apos;&amp;apos;, &amp;apos;d&amp;apos;))  #元组tuple，存在一个为空的元素
    True
    &amp;gt;&amp;gt;&amp;gt; any((0, &amp;apos;&amp;apos;, False))  #元组tuple，元素全为0,&amp;apos;&amp;apos;,false
    False
    &amp;gt;&amp;gt;&amp;gt; any([]) # 空列表
    False
    &amp;gt;&amp;gt;&amp;gt; any(()) # 空元组
    False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;map(iterable)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：对可迭代函数&amp;apos;iterable&amp;apos;中的每一个元素应用‘function’方法，将结果作为list返回
参考链接：http://segmentfault.com/a/1190000000322433
测试代码：
    def add_100(num):
        return num + 100
    li1 = [25,26,27]
    ret = list(map(add_100,li1))
    print(ret)
    返回结果：[125, 126, 127]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DVA1NXt.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/YqzknXX.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python2.7                                python3.5
两个版本的对比，真是让人感到诧异，python3上执行map明明已经获取了值，但非得加个list进行展示，超乎寻常。

def abc(a,b,c):
    return a*1000 + b*100 + c*10

list1 = [11,22,33]
list2 = [44,55,66]
list3 = [77,88,99]
ret = list(map(abc,list1,list2,list3))
print(ret) #返回结果 [16170, 28380, 40590]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ascii(object)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：该函数与python2中的repr()函数一样，返回一个可打印的对象字符串。当遇到非ascii码时，就会输出\x，\u或\U等字符来表示。例如：ascii(4) = int.__repr__(4) = repr(4)等号两边的方式是对等的。
测试代码：
    &amp;gt;&amp;gt;&amp;gt; ascii(54)
    &amp;apos;54&amp;apos;
    &amp;gt;&amp;gt;&amp;gt; ascii(&amp;apos;o&amp;apos;)
    &amp;quot;&amp;apos;o&amp;apos;&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; type(ascii(54))
    &amp;lt;class &amp;apos;str&amp;apos;&amp;gt;    
    &amp;gt;&amp;gt;&amp;gt; print(ascii(10), ascii(9000000), ascii(&amp;apos;b\31&amp;apos;), ascii(&amp;apos;0x\1000&amp;apos;))
        10 9000000 &amp;apos;b\x19&amp;apos; &amp;apos;0x@0&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;bin()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将整数转换为二进制字符串
&amp;gt;&amp;gt;&amp;gt; bin(56)
&amp;apos;0b111000&amp;apos;
&amp;gt;&amp;gt;&amp;gt; bin(100)
&amp;apos;0b1100100&amp;apos;
注意：如果bin()函数的实际参数不是一个整数,则该该实参(由类创建的对象)返回值必须是整数型
如：
&amp;gt;&amp;gt;&amp;gt; class myType:
...     def __index__(self):
...             return 56
...
&amp;gt;&amp;gt;&amp;gt; myvar = myType()
&amp;gt;&amp;gt;&amp;gt; bin(myvar)
&amp;apos;0b111000&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;bool()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取对象的bool值
bool(0) #False
bool(5) #True
bool(&amp;apos;&amp;apos;) #False
#为假的元素：0 none 空列表 空字典 空元组 空字符串
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;bytearray()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：转成字符字典。Bytearray类型是一个可变的序列，并且序列中的元素的取值范围为 [0 ,255]。
&amp;gt;&amp;gt;&amp;gt; a = bytearray([5,8])
&amp;gt;&amp;gt;&amp;gt; a[0]
5
&amp;gt;&amp;gt;&amp;gt; a[1]
8
&amp;gt;&amp;gt;&amp;gt; a
bytearray(b&amp;apos;\x05\x08&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;bytes()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    功能：返回一个新的数组对象，这个数组不能对数组元素进行修改，每个元素的取值范围为[0 ,255]
    测试代码：
    bytes(iterable_of_ints) 
        &amp;gt;&amp;gt;&amp;gt; b = bytes((5,8,6,8))
        &amp;gt;&amp;gt;&amp;gt; print(b)
        b&amp;apos;\x05\x08\x06\x08&amp;apos;
    bytes(string, encoding[, errors])     
        &amp;gt;&amp;gt;&amp;gt; bytes(&amp;apos;sdjsd&amp;apos;,encoding=&amp;apos;utf-8&amp;apos;)
        b&amp;apos;sdjsd&amp;apos;
    bytes(bytes_or_buffer)  ？
    bytes(int) 
        &amp;gt;&amp;gt;&amp;gt; bytes(5)
        b&amp;apos;\x00\x00\x00\x00\x00&amp;apos;
    bytes()  
        &amp;gt;&amp;gt;&amp;gt; bytes()
        b&amp;apos;&amp;apos;

总结：（参考：http://blog.csdn.net/caimouse/article/details/40860827）
    bytes函数与bytearray函数主要区别是bytes函数产生的对象的元素不能修改，而bytearray函数产生的对象的元素可以修改。因此，除了可修改的对象函数跟bytearray函数不一样之外，其它使用方法全部是相同的。最后它的参数定义方式也与bytearray函数是一样的。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;callable()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断函数或者对象是否可执行
&amp;gt;&amp;gt;&amp;gt; callable(5)
False
&amp;gt;&amp;gt;&amp;gt; callable(0)
False
&amp;gt;&amp;gt;&amp;gt; callable(&amp;apos;&amp;apos;)
False
&amp;gt;&amp;gt;&amp;gt; callable(int())
False
&amp;gt;&amp;gt;&amp;gt; callable(lambda x:x+1)
True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;chr()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：参数为一个整型数字，返回值对应ASCII码的字符
&amp;gt;&amp;gt;&amp;gt; chr(5)
&amp;apos;\x05&amp;apos;
&amp;gt;&amp;gt;&amp;gt; chr(115)
&amp;apos;s&amp;apos;
&amp;gt;&amp;gt;&amp;gt; chr(56)
&amp;apos;8&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ord()&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：返回一个字符的ASCII码值
&amp;gt;&amp;gt;&amp;gt; ord(&amp;apos;s&amp;apos;)
115
&amp;gt;&amp;gt;&amp;gt; ord(&amp;apos;5&amp;apos;)
53
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;classmethod()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：classmethod是用来指定一个类的方法为类方法，没有此参数指定的类的方法为实例方法
    &amp;gt;&amp;gt;&amp;gt; class C: #定义一个类
    ...     @classmethod  #声明为类方法，不经过实例化就可以直接调用
    ...     def f(self): #定义一个函数（类的方法）
    ...             print &amp;quot;This is a class method&amp;quot;
    ...
    &amp;gt;&amp;gt;&amp;gt; C.f()  #通过类调用函数
    This is a class method
    &amp;gt;&amp;gt;&amp;gt; c = C()
    &amp;gt;&amp;gt;&amp;gt; c.f()
    This is a class method
    &amp;gt;&amp;gt;&amp;gt; class D:
    ...     def f(self):
    ...             print &amp;quot; This is not a class method &amp;quot;
    ...
    &amp;gt;&amp;gt;&amp;gt; D.f()  #没有经过@classmethod 声明的类方法，必须经过实例化才能被调用
    Traceback (most recent call last):
      File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    TypeError: unbound method f() must be called with D instance as first argument (got nothing instead)
    &amp;gt;&amp;gt;&amp;gt; d = D()
    &amp;gt;&amp;gt;&amp;gt; d.f()
    This is not a class method
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;staticmethod()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    功能：类的静态方法，只能在类内部使用。经过静态类方法声明的类，在调用的时候不需要进行实例化

总结：对比classmethod()和staticmethod()

    静态方法：@staticmethod()
        class Foo(object):
            str = &amp;quot;I&amp;apos;m a static method.&amp;quot;
            def bar():
                print(Foo.str)
            bar = staticmethod(bar)

        Foo.bar()
    返回结果：I&amp;apos;m a static method. 

    类方法：@classmethod()
        class Foo(object):
            str = &amp;quot;I&amp;apos;m a static method.&amp;quot;
            def bar(cls):
                print(cls.str)
            bar = classmethod(bar)
        Foo.bar()
    返回结果：I&amp;apos;m a static method. 
较简单的操作代码：

    静态方法：@staticmethod()
        class Foo:
            str = &amp;quot;I&amp;apos;m a static method.&amp;quot;
            @staticmethod
            def bar():
                print(Foo.str)
        Foo.bar() 
    返回结果：I&amp;apos;m a static method. 

    类方法：@classmethod()
        class Foo:
            str = &amp;quot;I&amp;apos;m a static method.&amp;quot;
            @classmethod
            def bar(cls):
                print(cls.str )
        Foo.bar()
    返回结果：I&amp;apos;m a static method.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;compile()、eval()、exec()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：compile语句是从type类型中将str里面的语句创建成代码对象。
    compile语句的目的是提供一次性的字节码编译，就不用在以后的每次调用中重新进行编译了
语法：compile( str, file, type )
    eveal_code = compile(&amp;apos;1+2&amp;apos;,&amp;apos;&amp;apos;,&amp;apos;eval&amp;apos;)
    &amp;gt;&amp;gt;&amp;gt;eveal_code
    返回结果：&amp;lt;code object &amp;lt;module&amp;gt; at 0x01555D40, file &amp;quot;&amp;quot;, line 1&amp;gt;
    &amp;gt;&amp;gt;&amp;gt;eval(eveal_code)
    返回结果：3

    single_code = compile( &amp;apos;print(&amp;quot;apicloud.com&amp;quot;)&amp;apos;, &amp;apos;&amp;apos;, &amp;apos;single&amp;apos; )
    &amp;gt;&amp;gt;&amp;gt; single_code
    返回结果：&amp;lt;code object &amp;lt;module&amp;gt; at 0x01555B10, file &amp;quot;&amp;quot;, line 1&amp;gt;
    &amp;gt;&amp;gt;&amp;gt; exec(single_code)
    返回结果：apicloud.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;complex()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：创建一个值为real + imag * j的复数或者转化一个字符串或数为复数。如果第一个参数为字符串，则不需要指定第二个参数。
参数real: int, long, float或字符串；
参数imag: int, long, float
&amp;gt;&amp;gt;&amp;gt;complex()
0j
#数字
&amp;gt;&amp;gt;&amp;gt; complex(1,2)
(1+2j)
#当做字符串处理
&amp;gt;&amp;gt;&amp;gt; complex(&amp;apos;1&amp;apos;)
(1+0j)
#注意：这个地方在“+”号两边不能有空格，也就是不能写成&amp;quot;1 + 2j&amp;quot;，应该是&amp;quot;1+2j&amp;quot;，否则会报错
&amp;gt;&amp;gt;&amp;gt; complex(&amp;apos;1+2j&amp;apos;)
(1+2j)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;delattr()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;参考链接：http://www.cnblogs.com/zhangjing0502/archive/2012/05/16/2503702.html
功能：删除object对象名为name的属性
语法：delattr(object,name) 
参数object：对象。
参数name：属性名称字符串。

&amp;gt;&amp;gt;&amp;gt; class Person:
...     def __init__(self, name, age):
...             self.name = name
...             self.age = age
...
&amp;gt;&amp;gt;&amp;gt; tom = Person(&amp;quot;Tom&amp;quot;, 35)
&amp;gt;&amp;gt;&amp;gt; dir(tom)
[&amp;apos;__doc__&amp;apos;, &amp;apos;__init__&amp;apos;, &amp;apos;__module__&amp;apos;, &amp;apos;age&amp;apos;, &amp;apos;name&amp;apos;]
&amp;gt;&amp;gt;&amp;gt; delattr(tom, &amp;quot;age&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; dir(tom)
[&amp;apos;__doc__&amp;apos;, &amp;apos;__init__&amp;apos;, &amp;apos;__module__&amp;apos;, &amp;apos;name&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;getattr()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：用于返回一个对象属性，或者方法
class A:   
    def __init__(self):   
        self.name = &amp;apos;zhangjing&amp;apos;  
　　  #self.age=&amp;apos;24&amp;apos;
    def method(self):   
        print(&amp;quot;method print&amp;quot;)  

Instance = A()   
print(getattr(Instance , &amp;apos;name&amp;apos;, &amp;apos;not find&amp;apos;)) #如果Instance 对象中有属性name则打印self.name的值，否则打印&amp;apos;not find&amp;apos;
print(getattr(Instance , &amp;apos;age&amp;apos;, &amp;apos;not find&amp;apos;))  #如果Instance 对象中有属性age则打印self.age的值，否则打印&amp;apos;not find&amp;apos;
print(getattr(a, &amp;apos;method&amp;apos;, &amp;apos;default&amp;apos;))  
#如果有方法method，否则打印其地址，否则打印default   
print(getattr(a, &amp;apos;method&amp;apos;, &amp;apos;default&amp;apos;)()) 
#如果有方法method，运行函数并打印None否则打印default

li=[&amp;quot;swht&amp;quot;,&amp;quot;shen&amp;quot;]
getattr(li,&amp;quot;pop&amp;quot;)
返回结果：&amp;lt;built-in method pop of list object at 0x01AFDA80&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;setattr()&lt;/strong&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：参数是一个对象,一个字符串和一个任意值。字符串可能会列出一个现有的属性或一个新的属性。这个函数将值赋给属性的。该对象允许它提供。
语法：setattr(object, name, value)    
setattr(x,“foobar”,123)相当于x.foobar = 123
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;hasattr()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：用于确定一个对象是否具有某个属性
语法：hasattr(object, name) -&amp;gt; bool
    判断object中是否有name属性，返回一个布尔值
li=[&amp;quot;swht&amp;quot;,&amp;quot;shen&amp;quot;]
hasattr(li,&amp;apos;append&amp;apos;)
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;dict()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：字典定义函数，可以创建一个字典，也可以将其他类型（列表、元组、字符串）转换成字典类型
定义：
    dict1 = dict(one = 1, two = 2, a = 3)
    prin（dict1)
    {&amp;apos;one&amp;apos;: 1, &amp;apos;a&amp;apos;: 3, &amp;apos;two&amp;apos;: 2}
类型转换：
    list1 = [&amp;apos;name&amp;apos;,&amp;apos;age&amp;apos;,]
    list2 = [&amp;apos;swht&amp;apos;,18]
    dict(zip(list1,list2))
    返回结果：{&amp;apos;name&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;age&amp;apos;: 18}

    new_list= [[&amp;apos;key1&amp;apos;,&amp;apos;value1&amp;apos;],[&amp;apos;key2&amp;apos;,&amp;apos;value2&amp;apos;],[&amp;apos;key3&amp;apos;,&amp;apos;value3&amp;apos;]]
    dict(new_list)
    返回结果：{&amp;apos;key3&amp;apos;: &amp;apos;value3&amp;apos;, &amp;apos;key1&amp;apos;: &amp;apos;value1&amp;apos;, &amp;apos;key2&amp;apos;: &amp;apos;value2&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;dir()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：查看函数或模块内的操作方法都有什么，输出的是方法列表。
如dir(int)可以直接获取int的所有方法，返回的类型是一个列表
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;divmod()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：divmod(a,b)方法返回的是a//b（除法取整）以及a对b的余数
&amp;gt;&amp;gt;&amp;gt; divmod(2,5)
(0, 2)
&amp;gt;&amp;gt;&amp;gt; divmod(12,5)
(2, 2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;enumerate()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取字典的索引值并指定开始值
li = [&amp;apos;swht&amp;apos;,&amp;apos;shen&amp;apos;,&amp;apos;test&amp;apos;]
for i,k in enumerate(li,3): #遍历列表，索引值从3开始
    print(i,k)
#返回结果
3 swht
4 shen
5 test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;filter()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;参考链接：http://www.cnblogs.com/fangshenghui/p/3445469.html
功能：filter(function, sequence)对于队列中的item依次被function处理
def fun(item):
    if item != 4:
        return item
list1 = [5,4,8]
print(list(filter(fun,list1)))
返回结果：[4, 8]
总结：相当于一个过滤函数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;frozenset()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;参考：http://blog.csdn.net/caimouse/article/details/42042051
功能：本函数是返回一个冻结的集合
l = [1, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9]  
print(len(l), l)  
set = frozenset(l)  
print(len(set), set) 
返回结果：11 [1, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9]
         9 frozenset({1, 2, 3, 4, 5, 6, 7, 8, 9})
总结：所谓冻结就是这个集合不能再添加或删除任何集合里的元素。因此与集合set的区别，就是set是可以添加或删除元素，而frozenset不行。frozenset的主要作用就是速度快，它是使用hash算法实现。参数iterable是表示可迭代的对象，比如列表、字典、元组等等
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;locals()、globals()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：基于字典的访问局部和全局变量的方式
locals 是只读的，globals 不是
关于名字空间的相关说明请移步参考：http://blog.csdn.net/scelong/article/details/6977867
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;hash()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：输出对象的hash值
&amp;gt;&amp;gt;&amp;gt; hash(8)
8
&amp;gt;&amp;gt;&amp;gt; hash(&amp;apos;sd&amp;apos;)
-584109415
&amp;gt;&amp;gt;&amp;gt; hash(&amp;apos;99&amp;apos;)
-1356598271
&amp;gt;&amp;gt;&amp;gt; hash(&amp;apos;asds&amp;apos;)
-1179125483
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;help()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：查看函数或模块用途的详细说明
使用方法：help(object)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;类型转换&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int(x [,base ])         将x转换为一个整数    
long(x [,base ])        将x转换为一个长整数    
float(x )               将x转换到一个浮点数    
complex(real [,imag ])  创建一个复数    
str(x )                 将对象 x 转换为字符串    
repr(x )                将对象 x 转换为表达式字符串    
eval(str )              用来计算在字符串中的有效Python表达式,并返回一个对象    
tuple(s )               将序列 s 转换为一个元组    
list(s )                将序列 s 转换为一个列表    
chr(x )                 将一个整数转换为一个字符    
unichr(x )              将一个整数转换为Unicode字符    
ord(x )                 将一个字符转换为它的整数值    
hex(x )                 将一个整数转换为一个十六进制字符串    
oct(x )                 将一个整数转换为一个八进制字符串
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;id()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取对象的内存地址
id(object)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;input()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能:获取用户的输入信息
input(&amp;quot;请输入你的名字:&amp;quot;)
&amp;gt;&amp;gt;&amp;gt;请输入你的名字:swht
swht
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isinstance()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断对象类型
isinstance(5,int)
返回结果:True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;issubclass()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：本函数用来判断类参数class是否是类型参数classinfo的子类
class Line:  
    pass  
class RedLine(Line):  
    pass  

class Rect:  
    pass  

print(issubclass(RedLine, Line))  #返回True  Redline是Line的子类
print(issubclass(Rect, Line))  #返回False  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;iter()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：创建一个迭代器
for i in iter((1,2,4,5,6,7,)):
    print(i)
返回结果：1 2 4 5 6 7 #循环遍历元组
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;len()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取字符串的长度
len(str)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;max()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：返回所有整数中最大的一个数
max(5,6,8,7) 
返回结果：8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;memoryview()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：本函数是返回对象obj的内存查看对象
&amp;gt;&amp;gt;&amp;gt; v = memoryview(b&amp;apos;abc123&amp;apos;)
&amp;gt;&amp;gt;&amp;gt; print(v[1])
98
&amp;gt;&amp;gt;&amp;gt; print(v[0])
97
&amp;gt;&amp;gt;&amp;gt; print(v[2])
import struct  
buf = struct.pack(&amp;quot;i&amp;quot;*12, *list(range(12)))  
x = memoryview(buf)  
y = x.cast(&amp;apos;i&amp;apos;, shape=[2,2,3])  
print(y.tolist()) 
返回结果：[[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]

总结：所谓内存查看对象，就是对象符合缓冲区协议的对象，为了给别的代码使用缓冲区里的数据，而不必拷贝，就可以直接使用。参考链接：http://blog.csdn.net/caimouse/article/details/43083627
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;sorted()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：排序
sorted([5, 2, 3, 1, 4])
[1, 2, 3, 4, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;sum()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：返回整数数字的和
sum([1,5,8]) #参数是一个list
返回结果：14
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;super()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：用来解决多重继承问题
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;type()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取对象的类型
type(object)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;vars()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：本函数是实现返回对象object的属性和属性值的字典对象
&amp;gt;&amp;gt;&amp;gt; class Foo:
...     a = 1
...
&amp;gt;&amp;gt;&amp;gt; print(vars(Foo))
{&amp;apos;a&amp;apos;: 1, &amp;apos;__dict__&amp;apos;: &amp;lt;attribute &amp;apos;__dict__&amp;apos; of &amp;apos;Foo&amp;apos; objects&amp;gt;, &amp;apos;__doc__&amp;apos;: None, &amp;apos;__weakref__&amp;apos;: &amp;lt;attribute &amp;apos;__weakref__&amp;apos; of &amp;apos;Foo&amp;apos; objects&amp;gt;, &amp;apos;__module__&amp;apos;: &amp;apos;__main__&amp;apos;}

总结：如果默认不输入参数，就打印当前调用位置的属性和属性值，相当于locals()的功能。如果有参数输入，就只打印这个参数相应的属性和属性值。参考：http://blog.csdn.net/caimouse/article/details/46489079
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;zip()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：zip函数接受任意多个（包括0个和1个）序列作为参数，返回一个tuple列表
&amp;gt;&amp;gt;&amp;gt; x = [1,2,3,]
&amp;gt;&amp;gt;&amp;gt; y = [4,5,6,]
&amp;gt;&amp;gt;&amp;gt; z = [7,8,9,]
&amp;gt;&amp;gt;&amp;gt; xyz = zip(x,y,z)
&amp;gt;&amp;gt;&amp;gt; print(xyz)
&amp;lt;zip object at 0x00FBD968&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print(list(xyz))
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;random&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能:产生随机数
import random
random.randint(1,99) #从1-99中产生随机数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;import&lt;/strong&gt;()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：查看模块所在的位置
 __import__(&amp;apos;random&amp;apos;) #参数为一个字符串
&amp;lt;module &amp;apos;random&amp;apos; from &amp;apos;D:\\Program Files\\Python\\Python35\\python35.zip\\random.pyc&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;open-函数&quot;&gt;&lt;a href=&quot;#open-函数&quot; class=&quot;headerlink&quot; title=&quot;open()函数&quot;&gt;&lt;/a&gt;open()函数&lt;/h3&gt;&lt;p&gt;博客参考：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5102618.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5102618.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;read()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：读取文件中的所有内容，返回的类型是字节
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;readline()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：读取文件中的一行数据。返回的类型是字节
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;readlines()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：读取文件中的所有内容，返回的类型是list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;tell()&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：查看当前指针位置，返回值类型为整数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;seek()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：指定当前指针位置


files = open(&amp;apos;test.txt&amp;apos;,&amp;apos;r&amp;apos;,encoding=&amp;apos;utf-8&amp;apos;)
files.seek(5)
print(files.read()) #读取指为直接切割针5后面的所有字符
files.truncate() #获取指针5之前的所有字符然后写到原来的文件（或者可以理解）
files.close()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;扩展&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;读二进制文件：

    input = open(&amp;apos;data&amp;apos;,&amp;apos;rb&amp;apos;)

读取所有内容：

    f = open(&amp;apos;test.txt&amp;apos;,&amp;apos;r&amp;apos;)
    try:
        all_txt_view = f.read()
    finally:
        f.close()

读取固定字节：

    f = open(&amp;apos;test.txt&amp;apos;,&amp;apos;rb&amp;apos;)
    try:
        while True:
            chunk = f.read(100)
            if not chunk:
                break
            pass
    finally:
        f.close()

读每行：

    list_of_all_the_lines = f.readlines()

如果文件是文本文件，还可以直接遍历文件对象获取每行：

    for line in f:
        print(line)

写文件写文本文件

    output = open(&amp;apos;data&amp;apos;,&amp;apos;w&amp;apos;)

写入多行：

    f.writeline(list_of_text_string)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;作业：&quot;&gt;&lt;a href=&quot;#作业：&quot; class=&quot;headerlink&quot; title=&quot;作业：&quot;&gt;&lt;/a&gt;作业：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;作业连接：http://www.cnblogs.com/wupeiqi/articles/4950799.html
1. 用户输入一个字符串，将其转换成字典 使用json
2. 增加一条记录
3. （可选）删除一条
4. （可选）线上文件修改


global       
        log 127.0.0.1 local2
        daemon
        maxconn 256
        log 127.0.0.1 local2 info
defaults
        log global
        mode http
        timeout connect 5000ms
        timeout client 50000ms
        timeout server 50000ms
        option  dontlognull

listen stats :8888
        stats enable
        stats uri       /admin
        stats auth      admin:1234

frontend oldboy.org
        bind 0.0.0.0:80
        option httplog
        option httpclose
        option  forwardfor
        log global
        acl www hdr_reg(host) -i www.oldboy.org
        use_backend www.oldboy.org if www

backend test.oldboy.org
        server 100.1.7.9 100.1.7.9 weight 20 maxconn 3000
        #server 100.1.7.9 100.1.7.999 weight 20 maxconn 3000


backend buy.oldboy.org
        server 100.1.7.90 100.1.7.90 weight 20 maxconn 3000

字典：        
{&amp;quot;backend&amp;quot;: &amp;quot;test.oldboy.org&amp;quot;,
 &amp;quot;record&amp;quot;:{
        &amp;quot;server&amp;quot;: &amp;quot;100.1.7.999&amp;quot;,
        &amp;quot;weight&amp;quot;: 20,
        &amp;quot;maxconn&amp;quot;: 30
  }
}
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;课程大纲：&lt;/p&gt;
&lt;p&gt;day2&lt;br&gt;&lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5115190.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ht
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day02</title>
    <link href="http://blog.songqingbo.cn/2016/01/09/s12-20160109-day02/"/>
    <id>http://blog.songqingbo.cn/2016/01/09/s12-20160109-day02/</id>
    <published>2016-01-09T07:30:00.000Z</published>
    <updated>2016-07-07T03:19:20.417Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;作者注：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;经过第一天的学习以及后续的代码练习,给自己一个约定的代码风格、格式：
1. 模块名：
    模块应该使用尽可能短的、全小写命名，可以在模块命名时使用下划线以增强可读性。
    例如：
        login_shop.py
2. 类名定义：
    由于类名要求首字母必须大写，所以这样定义：
    class MyFristClass:  # 类名有三个单词组成，分别首字母大写
        def __init__(self,a):
            pass
3. 函数名定义：
    普通函数：
        选择使用字母小写，单词直接使用下划线_分割：
            shop_mag(users):
                pass
4. 变量名定义：
    全局变量名：
        字母全大写： SHOPLIST
    普通变量名：
        字母小写，单词分割选择使用首字母大写： shopUsers
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上规范并不是必须，但是作为个人的编程习惯而言，是一种很好的养成约束。&lt;/p&gt;
&lt;p&gt;课程大纲地址： &lt;a href=&quot;http://www.cnblogs.com/wupeiqi/articles/5115190.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/wupeiqi/articles/5115190.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;python知识拾忆：&quot;&gt;&lt;a href=&quot;#python知识拾忆：&quot; class=&quot;headerlink&quot; title=&quot;python知识拾忆：&quot;&gt;&lt;/a&gt;python知识拾忆：&lt;/h3&gt;&lt;p&gt;Python2.x与Python3.x关于dict.keys()返回值的类型对比：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/tieH6Vh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、python种类&quot;&gt;&lt;a href=&quot;#一、python种类&quot; class=&quot;headerlink&quot; title=&quot;一、python种类&quot;&gt;&lt;/a&gt;一、python种类&lt;/h2&gt;&lt;p&gt;关于Python的一些版本内部执行的一些原理。从原理上来看待执行快慢的类型，从而选择自己需要的去学习。目前而言，最火的就是cpython了，这也是官方版本的Python。后面出现的pypy渐渐崭露头角，用银角大王的话讲：这货日后指定会火…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. cpython  使用c解释器生产.pyc(字节码)，然后转换成机器码，最后到cpu
2. javapython java解释器--&amp;gt;字节码--&amp;gt;机器码--&amp;gt;cpu
3. IronPython C#解释器--&amp;gt;字节码 --&amp;gt; 机器码--&amp;gt; cpu
4. pypy  内部使用自己的解释器编译成字节码--&amp;gt;机器码.最后在外部执行的时候直接是机器码，速度要快
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;银角大王推荐阅读书：&lt;strong&gt;《python源码剖析》&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;二、字节码&quot;&gt;&lt;a href=&quot;#二、字节码&quot; class=&quot;headerlink&quot; title=&quot;二、字节码&quot;&gt;&lt;/a&gt;二、字节码&lt;/h2&gt;&lt;p&gt;在Python内部字节码直接的转换过程如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/U6KPbcR.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python中进行字节码之间的转换流程大概是这样的：字节码类型转换从utf-8转换成gbk类型，首先需要执行解码变成Unicode类型，然后再由Unicode类型编码成gbk类型。[图片来源：银角大王课堂笔记]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、字符串&quot;&gt;&lt;a href=&quot;#三、字符串&quot; class=&quot;headerlink&quot; title=&quot;三、字符串&quot;&gt;&lt;/a&gt;三、字符串&lt;/h2&gt;&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5126957.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5126957.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;字符串的常用操作包括但不限于以下操作：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字符串的替换、删除、截取、复制、连接、比较、查找、分割等
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里将对字符串的内置操作方法进行总结归纳，重点是以示例的方式进行展示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;使用type获取创建对象的类 type(name)
使用dir获取类的成员dir(name)
使用vars获取类的成员和各个成员的值
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;capitalize&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：字符串首字母大写
name = &amp;apos;swhthaitun&amp;apos;
name.capitalize()
返回结果：&amp;apos;Swht&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;casefold()首字母小写&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name = &amp;apos;HelloWord&amp;apos;
reault = name.casefold()
print(reault)
返回结果：helloword
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;casefold&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将字符串中所有的大写字母转换成小写字母
s1 = &amp;quot;[&amp;apos;bsondump&amp;apos;, &amp;apos;mongo&amp;apos;, &amp;apos;mongod&amp;apos;, &amp;apos;mongodump&amp;apos;, &amp;apos;mongoexport&amp;apos;, &amp;apos;mongofiles&amp;apos;, &amp;apos;mongoimport&amp;apos;, &amp;apos;mongooplog&amp;apos;, &amp;apos;mongoperf&amp;apos;, &amp;apos;mongoLLKJKKore&amp;apos;, &amp;apos;mongos&amp;apos;, &amp;apos;UUUngostat&amp;apos;, &amp;apos;monGGtop&amp;apos;]&amp;quot;
s1.casefold()
返回结果：&amp;quot;[&amp;apos;bsondump&amp;apos;, &amp;apos;mongo&amp;apos;, &amp;apos;mongod&amp;apos;, &amp;apos;mongodump&amp;apos;, &amp;apos;mongoexport&amp;apos;, &amp;apos;mongofiles&amp;apos;, &amp;apos;mongoimport&amp;apos;, &amp;apos;mongooplog&amp;apos;, &amp;apos;mongoperf&amp;apos;, &amp;apos;mongollkjkkore&amp;apos;, &amp;apos;mongos&amp;apos;, &amp;apos;uuungostat&amp;apos;, &amp;apos;monggtop&amp;apos;]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;center&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：字符串宽度填充，使用原有字符串+填充字符构成指定长度的新的字符串
name = &amp;apos;swhthaitun&amp;apos;
name.center(15)
返回结果：&amp;apos;   swhthaitun  &amp;apos; #默认以空格进行填充
name.center(16,&amp;apos;*&amp;apos;)
返回结果：&amp;apos;***swhthaitun***&amp;apos;

功能：字符串居中，以‘*’分割(20为新产生字符串的总的宽度)
name = &amp;apos;HelloWord&amp;apos;
reault = name.center(20,&amp;apos;*&amp;apos;)
print(reault)
返回结果：*****HelloWord******
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;count&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：统计某个字符在字符串中出现的次数，或在字符串指定区间内完成上述操作
name = &amp;apos;swhthaitun&amp;apos;
name.count(&amp;apos;h&amp;apos;)
返回结果：2
name.count(&amp;apos;h&amp;apos;,0,3)  #从索引值0-3范围的字符中统计&amp;apos;h&amp;apos;出现的次数
返回结果：1

功能：统计子序列出现的次数
name = &amp;apos;HelloWord&amp;apos;
reault = name.count(&amp;apos;W&amp;apos;) #如果换成&amp;apos;w&amp;apos;，返回结果为0，python对大小写敏感
print(reault)
返回结果：1

name = &amp;apos;HelloWord&amp;apos;
reault = name.count(&amp;apos;l&amp;apos;,0,3) #统计单个字符出现的次数,可以指定起始范围,另外在python中起始范围讲究顾头不顾尾的原则，即[0,3)
print(reault)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;encode&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：对字符串进行编码操作
name = &amp;apos;swhthaitun&amp;apos;
name.encode()
返回结果：b&amp;apos;swhthaitun&amp;apos;

功能：转变字符串的编码
name = &amp;apos;南非波波&amp;apos;
reault = name.encode(&amp;apos;gbk&amp;apos;)
print(reault)
返回结果：b&amp;apos;\xc4\xcf\xb7\xc7\xb2\xa8\xb2\xa8&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;endswith&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断字符串是否以某个字符串结尾的，返回值为bool型
name = &amp;apos;swhthaitun&amp;apos;
name.endswith(&amp;apos;s&amp;apos;)
返回结果：False
name.endswith(&amp;apos;n&amp;apos;)
返回结果：True
name.endswith(&amp;apos;tun&amp;apos;)
返回结果：True

name = &amp;apos;Iamalatterboy&amp;apos;
reault = name.endswith(&amp;apos;y&amp;apos;)
print(reault)
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;expandtabs&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将制表符&amp;apos;\t&amp;apos;转换成指定宽度的tab键分割，默认tabsize=8
li = &amp;apos;sw\tht&amp;apos;
li.expandtabs(4)
返回结果：&amp;apos;sw  ht&amp;apos;
li.expandtabs()
返回结果：&amp;apos;sw      ht&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;find&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：在字符串中查找指定字符串，找不到时返回-1
name = &amp;apos;swht&amp;apos;
name.find(&amp;apos;s&amp;apos;)
返回结果：0
name.find(&amp;apos;h&amp;apos;)
返回结果：2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;format&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：格式化输出字符串
li = &amp;apos;I\&amp;apos;m {},{}&amp;apos; #两个&amp;apos;{}&amp;apos;是占位符
li.format(&amp;apos;swht&amp;apos;,&amp;apos;欢迎来中国&amp;apos;)
返回结果：&amp;quot;I&amp;apos;m swht,欢迎来中国&amp;quot;
参考：http://blog.chinaunix.net/uid-23802873-id-4477364.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;__contains__ &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：包含 --&amp;gt;&amp;apos;eal&amp;apos; in name
name = &amp;apos;swhtkkskjj&amp;apos;
reault = name.__contains__(&amp;apos;swht&amp;apos;)
print(reault)
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;index&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：在字符串中查找指定的字符串,找不到时直接报错
name = &amp;apos;swhthaitun&amp;apos;
name.index(&amp;apos;w&amp;apos;)
返回结果：1    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;join()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：字符串连接
name = &amp;apos;swhthaitun&amp;apos;
&amp;apos;*&amp;apos;.join(name)
返回结果：&amp;apos;s*w*h*t*h*a*i*t*u*n&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isalnum&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：检查判断字符串是否包含字母数字字符（http://www.yiibai.com/python/string_isalnum.html）
name = &amp;apos;swhthaitun&amp;apos;
name.isalnum()
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isalpha&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：检测字符串是否只由字母组成（http://www.runoob.com/python/att-string-isalpha.html）
name = &amp;apos;swhthaitun&amp;apos;
name.isalpha()
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isdecimal&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：检查字符串是否只包含十进制字符。这种方法只存在于unicode对象。（参考：http://www.runoob.com/python/att-string-isdecimal.html）
name = &amp;apos;swhthaitun&amp;apos;
name.isdecimal()
返回结果：False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isdigit&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：检测字符串是否只由数字组成。(参考:http://www.runoob.com/python/att-string-isdigit.html)
name = &amp;apos;swhthaitun&amp;apos;
name.isdigit()
返回结果：False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isidentifier&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：检测字符串是否是字母开头
name = &amp;apos;swhthaitun&amp;apos;
name.isidentifier()
返回结果：True
name = &amp;apos;1swhthaitun&amp;apos;
name.isidentifier()
返回结果：False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isnumeric&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：检测字符串是否只由数字组成。这种方法是只针对unicode对象。
name = &amp;apos;swhthaitun&amp;apos;
name.isnumeric()
返回结果：False
Li = &amp;apos;5523&amp;apos;
Li.isnumeric()
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isprintable&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断字符串中所有字符是否都属于可见字符
a = &amp;quot;\tPuppy&amp;quot;
a.isprintable()
返回结果：False
name = &amp;apos;swhthaitun&amp;apos;
name.isprintable()
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isspace&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：检测字符串是否为空格
name = &amp;apos;swhthaitun&amp;apos;
name.isspace()
返回结果：False
Li = &amp;apos; &amp;apos;
Li.isspace()
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;istitle&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断字符串是否适合当作标题（其实就是每个单词首字母大写）
a = &amp;quot;a puppy&amp;quot;
b = &amp;quot;Puppy&amp;quot;
a.istitle()
返回结果：False
b.istitle()
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isupper&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断字符串中所有字母字符是否都是大写字母
a = &amp;quot;puppy&amp;quot;
b = &amp;quot;PUPPY&amp;quot;
a.isupper()
返回结果：False
b.isupper()
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;ljust&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。（参考：http://www.runoob.com/python/att-string-ljust.html）
语法：str.ljust(width[, fillchar])
     width -- 指定字符串长度。
     fillchar -- 填充字符，默认为空格。
name = &amp;apos;swhthaitun&amp;apos;
name.ljust(50,&amp;apos;*&amp;apos;)
返回结果：&amp;apos;swhthaitun****************************************&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;lower&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将所有的字母转换成小写字母
name = &amp;apos;SWHT&amp;apos;
name.lower()
返回结果：&amp;apos;swht&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;lstrip&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：去除字符串左边开头的空格
name = &amp;apos;  swht   &amp;apos;
name.lstrip()
返回结果：&amp;apos;swht   &amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;rstrip&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：去除字符串右边结尾的空格
name = &amp;apos;  swht   &amp;apos;
name.rstrip()
返回结果：&amp;apos;   swht&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;strip&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：去除字符串两边的空格
name = &amp;apos;  swht   &amp;apos;
name.rstrip()
返回结果：&amp;apos;swht&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;maketrans&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。
注：两个字符串的长度必须相同，为一一对应的关系。
语法：str.maketrans(intab, outtab)
参数：intab -- 字符串中要替代的字符组成的字符串。
      outtab -- 相应的映射字符的字符串。
intab = &amp;quot;swhtr&amp;quot;
outtab = &amp;quot;12345&amp;quot;
name = &amp;quot;hjjksknsnjmk&amp;quot;
name.maketrans(intab, outtab)
返回结果：{104: 51, 114: 53, 115: 49, 116: 52, 119: 50}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;partition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：根据指定的分隔符将字符串进行分割。
    如果字符串包含指定的分隔符，则返回一个3元的元组，第一个为分隔符左边的子串，第二个为分隔符本身，第三个为分隔符右边的子串。
name = &amp;apos;swht&amp;apos;
li = &amp;apos;hhsslswhtolljm&amp;apos;
li.partition(name)
返回结果：(&amp;apos;hhssl&amp;apos;, &amp;apos;swht&amp;apos;, &amp;apos;olljm&amp;apos;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;replace&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。
语法：str.replace(old, new[, max])
参数：old -- 将被替换的子字符串。
     new -- 新字符串，用于替换old子字符串。
     max -- 可选字符串, 替换不超过 max 次
str = &amp;quot;this is string example....wow!!! this is really string&amp;quot;
str.replace(&amp;quot;is&amp;quot;, &amp;quot;was&amp;quot;)
返回结果：&amp;apos;thwas was string example....wow!!! thwas was really string&amp;apos;
str.replace(&amp;quot;is&amp;quot;, &amp;quot;was&amp;quot;, 3)
返回结果：&amp;apos;thwas was string example....wow!!! thwas is really string&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;split&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：字符串分割，默认是空格
name.split()
返回结果：[&amp;apos;swht&amp;apos;]
name.split(&amp;apos;s&amp;apos;) #以&amp;apos;s&amp;apos;字符进行分割
返回结果：[&amp;apos;&amp;apos;, &amp;apos;wht&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__add__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：在字符串后面增加指定的字符或字符串
name = &amp;apos;swht&amp;apos;
name.__add__(&amp;apos;e&amp;apos;)
返回结果：&amp;apos;swhte&amp;apos;
li = &amp;apos;hjh&amp;apos;
name.__add__(li)
返回结果：&amp;apos;swhthjh&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__contains__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断指定字符串是否包含在字符串中,返回值为True和False
name = &amp;apos;swht&amp;apos;
name.__contains__(&amp;apos;s&amp;apos;)
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__eq__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断字符串是否相等，返回值为True和False
name = &amp;apos;swht&amp;apos;
li = &amp;apos;test&amp;apos;
name.__eq__(li)
返回结果：False        
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;splitlines&lt;/strong&gt;    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：按照行分隔，返回一个包含各行作为元素的列表，如果 num 指定则仅切片 num 个行.
语法：str.splitlines( num=string.count(&amp;apos;\n&amp;apos;))
参数：num -- 分割行的次数
Li = &amp;quot;Line1-a b c d e f\nLine2- a b c\n\nLine4- a b c d&amp;quot;
Li.splitlines(0)
返回结果：[&amp;apos;Line1-a b c d e f&amp;apos;, &amp;apos;Line2- a b c&amp;apos;, &amp;apos;&amp;apos;, &amp;apos;Line4- a b c d&amp;apos;]
Li.splitlines(1)
返回结果：[&amp;apos;Line1-a b c d e f\n&amp;apos;, &amp;apos;Line2- a b c\n&amp;apos;, &amp;apos;\n&amp;apos;, &amp;apos;Line4- a b c d&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;startswith&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断一个字符串是否以某个或几个字符开始，结果以True或者False返回。
name = &amp;quot;swhtlllds&amp;quot;
name.startswith(&amp;apos;s&amp;apos;)
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;endswith&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断一个字符串是否以某个或几个字符结束，结果以True或者False返回。
name = &amp;quot;swhtlllds&amp;quot;
name.endswith(&amp;apos;ds&amp;apos;)
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;swapcase&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：用于对字符串的大小写字母进行转换。
name = &amp;apos;swht&amp;apos;
name.swapcase()
返回结果：&amp;apos;SWHT&amp;apos;
name = &amp;apos;Swht&amp;apos;
name.swapcase()
返回结果：&amp;apos;sWHT&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;upper&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将字符串中的小写字母转为大写字母
name = &amp;apos;swht&amp;apos;
name.swapcase()
返回结果：&amp;apos;SWHT&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：进行标题转换,即单词首字母大写
name = &amp;apos;swht ni li&amp;apos;
name.title()
返回结果： &amp;apos;Swht Ni Li&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;translate&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：根据参数table给出的表(包含 256 个字符)转换字符串的字符, 要过滤掉的字符放到 del 参数中。
方法：str.translate(table[, deletechars]);
参数：table -- 翻译表，翻译表是通过maketrans方法转换而来。
     deletechars -- 字符串中要过滤的字符列表。
intab = &amp;quot;aeiou&amp;quot;
outtab = &amp;quot;12345&amp;quot;
trantab = maketrans(intab, outtab)

str = &amp;quot;this is string example....wow!!!&amp;quot;;
print str.translate(trantab);
返回结果：th3s 3s str3ng 2x1mpl2....w4w!!!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;zfill&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：垫零左侧的字符串，以填补宽度
语法：str.zfill(width)
参数：width：最后的字符串宽度
str = &amp;quot;this is string example....wow!!!&amp;quot;        
print str.zfill(40)
print str.zfill(50)
返回结果：00000000this is string example....wow!!!
         000000000000000000this is string example....wow!!!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、列表&quot;&gt;&lt;a href=&quot;#四、列表&quot; class=&quot;headerlink&quot; title=&quot;四、列表&quot;&gt;&lt;/a&gt;四、列表&lt;/h2&gt;&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5126943.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5126943.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;列表的基本操作示例展示：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;append&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：列表追加元素
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;]
name.append(&amp;apos;sdsd&amp;apos;)
返回结果：name
        [&amp;apos;sd&amp;apos;, &amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;, &amp;apos;sdsd&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;clear&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：情况列表元素
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;]
name.clear()
返回结果：name
         []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;copy&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：浅拷贝，即只拷贝第一层的元素
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;]
li = [&amp;apos;ssd&amp;apos;]
li = name.copy()
返回结果：li
         [&amp;apos;sd&amp;apos;, &amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;]

name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
li = [&amp;apos;ssd&amp;apos;]
li = name.copy()
返回结果：li
[&amp;apos;sd&amp;apos;, &amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;, [&amp;apos;sddss&amp;apos;, &amp;apos;sdsdsd&amp;apos;]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;count&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：统计列表指定元素个数
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
name.count(&amp;apos;sd&amp;apos;)
返回结果：1
li = [&amp;apos;sd&amp;apos;,&amp;apos;sdsds&amp;apos;,[&amp;apos;sd&amp;apos;,&amp;apos;dffdg&amp;apos;,],]
li.count(&amp;apos;sd&amp;apos;) #只统计第一层的元素个数
返回结果：1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;extend&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：追加字符元素或列表元素
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
li = [&amp;apos;sd&amp;apos;,&amp;apos;sdsds&amp;apos;,[&amp;apos;sd&amp;apos;,&amp;apos;dffdg&amp;apos;,],]
name.extend(&amp;apos;ss&amp;apos;)
返回结果：name
[&amp;apos;sd&amp;apos;, &amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;, [&amp;apos;sddss&amp;apos;, &amp;apos;sdsdsd&amp;apos;], &amp;apos;s&amp;apos;, &amp;apos;s&amp;apos;]
name.extend(&amp;apos;d&amp;apos;)
返回结果：name
[&amp;apos;sd&amp;apos;, &amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;, [&amp;apos;sddss&amp;apos;, &amp;apos;sdsdsd&amp;apos;], &amp;apos;s&amp;apos;, &amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;]
name.extend(li)
返回结果：name
[&amp;apos;sd&amp;apos;, &amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;, [&amp;apos;sddss&amp;apos;, &amp;apos;sdsdsd&amp;apos;], &amp;apos;s&amp;apos;, &amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;sd&amp;apos;, &amp;apos;sdsds&amp;apos;, [&amp;apos;sd&amp;apos;, &amp;apos;dffdg&amp;apos;]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;index&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：定位列表中某元素
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
name.index(&amp;apos;sd&amp;apos;)
返回结果：0
name.index(&amp;apos;drer&amp;apos;)
返回结果：2
返回结果：name.index(&amp;apos;dr&amp;apos;)  #当出现某元素不在列表中的时候会直接报错
        Traceback (most recent call last):
          File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
        ValueError: &amp;apos;dr&amp;apos; is not in list
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;insert&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：在指定索引位置的元素前面插入新的元素
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
name.insert(3,&amp;apos;sd&amp;apos;)
返回结果：name
[&amp;apos;sd&amp;apos;, &amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;, &amp;apos;sd&amp;apos;, [&amp;apos;sddss&amp;apos;, &amp;apos;sdsdsd&amp;apos;]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;pop&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：删除指定索引值的元素,返回值为当前删除的元素的值。不指定索引值，默认删除最后一个元素
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
name.pop(3)
返回结果：&amp;apos;sd&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;remove&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：删除列表中指定的元素
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
name.remove(&amp;apos;sd&amp;apos;)
name
返回结果：[&amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;, [&amp;apos;sddss&amp;apos;, &amp;apos;sdsdsd&amp;apos;]]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;reverse&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：用于反向列表中元素。
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
name.reverse()
name
返回结果：[[&amp;apos;sddss&amp;apos;, &amp;apos;sdsdsd&amp;apos;], &amp;apos;drer&amp;apos;, &amp;apos;dfdf&amp;apos;, &amp;apos;sd&amp;apos;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;sort&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：对单层列表进行元素的排序
name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,]
name.sort()
name
返回结果：[&amp;apos;dfdf&amp;apos;, &amp;apos;drer&amp;apos;, &amp;apos;sd&amp;apos;]

name = [&amp;apos;sd&amp;apos;,&amp;apos;dfdf&amp;apos;,&amp;apos;drer&amp;apos;,[&amp;apos;sddss&amp;apos;,&amp;apos;sdsdsd&amp;apos;]]
name.sort() #报错的
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;五、元组&quot;&gt;&lt;a href=&quot;#五、元组&quot; class=&quot;headerlink&quot; title=&quot;五、元组&quot;&gt;&lt;/a&gt;五、元组&lt;/h2&gt;&lt;p&gt;关于元组的常用操作，请参考：&lt;a href=&quot;http://www.runoob.com/python/python-tuples.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.runoob.com/python/python-tuples.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5126947.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5126947.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;元组的元素不可修改    ，元组的元素的元素可修改&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;count(self,value)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：统计当前元组中某元素的个数
tup = (55,77,85,55,96,99,22,55,)
tup.count(55)
返回结果：3 
备注：元素‘55’在元组tup中出现了3次
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;index(self, value, start=None, stop=None)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取元素在元组中的索引值,对于重复的元素,默认获取从左起第一个元素的索引值
tup = (55,77,85,55,96,99,22,55,)
tup.index(55)
返回结果：0
tup.index(85)
返回结果：2
tup.index(55,2,7)
返回结果：3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__add__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将另一个元组追加到当前元组后面.__add__()只接收元组类型的序列
tup1 = (12,33,566,78,)
tup2 = (55,66,77,)
tup1.__add__(tup2)
返回结果：(12,33,566,78,55,66,77,)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__contains__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：包含，判断某元素是否包含在元组中
tup = (55,77,85,55,96,99,22,55,)
tup.__contains__(55)
返回结果：True  
备注：返回值类型是bool型，该方法判断在对成员元素是否存在元组中，程序根据返回不同的bool值进行相应的值返回或者操作
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__eq__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断两个元组是否相等，返回值类型为bool型
tup = (55,77,85,55,96,99,22,55,)
tup1 = (55,77,85,55,96,99,22,551,)
tup.__eq__(tup1)
返回结果：False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__getattribute__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__getitem__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取指定索引值的元素值
tup = (55,77,85,55,96,99,22,55,)
tup.__getitem__(5)
返回结果：99
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__getnewargs__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：只是获取原来的元组？？无卵用
tup = (55,77,85,55,96,99,22,55,)
tup.__getnewargs__()
返回结果：((55, 77, 85, 55, 96, 99, 22, 55),)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__ge__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断当前元组是否大于等于某个元组
tup = (55,77,85,55,96,99,22,55,)
tup1 = (55,77,85,55,96,99,22,551,)
tup.__ge__(tup1)
返回结果：False #bool类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__gt__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断当前元组是否大于某个元组
tup = (55,77,85,55,96,99,22,55,)
tup1 = (55,77,85,55,96,99,22,551,)
tup.__ge__(tup1)
返回结果：False #bool类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__hash__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：计算元组的hash值
tup = (55,77,85,55,96,99,22,55,)
tup1 = (55,77,85,55,96,99,22,551,)
tup.__hash__()
返回结果：-2123087613
tup1.__hash__()
返回结果：1338854611
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__init__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：初始化作用，无返回值
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__iter__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取元组的内存地址
tup = (55,77,85,55,96,99,22,55,)
tup1 = (55,77,85,55,96,99,22,551,)
tup.__iter__()
返回结果：&amp;lt;tuple_iterator object at 0x01C21F70&amp;gt;
tup1.__iter__()
返回结果：&amp;lt;tuple_iterator object at 0x01C21F50&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__len__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取元组的长度
tup.__len__()  #该方法已经被放到python的内置函数中，可以使用len(tup)获取长度
返回结果：8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__le__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断当前元组是否小于等于某个元组
tup = (55,77,85,55,96,99,22,55,)
tup1 = (55,77,85,55,96,99,22,551,)
tup.__le__(tup1)
返回结果：True #bool类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__lt__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断当前元组是否小于某个元组
tup = (55,77,85,55,96,99,22,55,)
tup1 = (55,77,85,55,96,99,22,551,)
tup.__lt__(tup1)
返回结果：True #bool类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__mul__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：把当前元组按照某个值的倍数进行元组的扩展，产生新的元组
tup = (55,77,85,55,96,99,22,55,)
tup.__mul__(2)
返回结果：(55, 77, 85, 55, 96, 99, 22, 55, 55, 77, 85, 55, 96, 99, 22, 55)
tup.__iter__()
返回结果：&amp;lt;tuple_iterator object at 0x01C21F70&amp;gt;
tup.__mul__(2).__iter__()
返回结果：&amp;lt;tuple_iterator object at 0x01C2F050&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__new__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pass
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__ne__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断当前元组不等于某个元组
tup = (55,77,85,55,96,99,22,55,)
tup1 = (55,77,85,55,96,99,22,551,)
tup.__ne__(tup1)
返回结果：True #bool类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__repr__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：将元组转换成一个字符串
tup = (55,77,85,55,96,99,22,55,)
tup.__repr__()
返回结果：&amp;apos;(55, 77, 85, 55, 96, 99, 22, 55)&amp;apos;
 type(tup.__repr__())
返回结果：&amp;lt;class &amp;apos;str&amp;apos;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;__rmul__&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：？？怎么感觉跟__mul__一个德行？？
tup = (55,77,85,55,96,99,22,55,)
tup.__rmul__(2)
返回结果：(55, 77, 85, 55, 96, 99, 22, 55, 55, 77, 85, 55, 96, 99, 22, 55)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;六、字典&quot;&gt;&lt;a href=&quot;#六、字典&quot; class=&quot;headerlink&quot; title=&quot;六、字典&quot;&gt;&lt;/a&gt;六、字典&lt;/h2&gt;&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5127044.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5127044.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;字典的常用操作：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;clear&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：清空字典
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_li.clear()
返回结果：dict_li
        {}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;copy&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：浅拷贝
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_li.copy()
返回结果：{&amp;apos;age&amp;apos;: &amp;apos;18&amp;apos;, &amp;apos;users&amp;apos;: &amp;apos;swht&amp;apos;}
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,&amp;apos;address&amp;apos;:{&amp;apos;sd&amp;apos;:&amp;apos;dz&amp;apos;}}
dict_li.copy()
返回结果：{&amp;apos;age&amp;apos;: &amp;apos;18&amp;apos;, &amp;apos;users&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;address&amp;apos;: {&amp;apos;sd&amp;apos;: &amp;apos;dz&amp;apos;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;fromkeys()&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：用于创建一个新字典，以序列seq中元素做字典的键，value为字典所有键对应的初始值。
语法：dict.fromkeys(seq[, value]))
参数：seq -- 字典键值列表。
     value -- 可选参数, 设置键序列（seq）的值。
li = [&amp;apos;users&amp;apos;,&amp;apos;age&amp;apos;]
dict_li = dict.fromkeys(li,&amp;apos;swht&amp;apos;)
返回结果：dict_li
        {&amp;apos;age&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;users&amp;apos;: &amp;apos;swht&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;get&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取字典的value值
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_li.get(&amp;apos;users&amp;apos;)
返回结果：&amp;apos;swht&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;items&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：返回可遍历的(键, 值) 元组数组
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_li.items()
返回结果：dict_items([(&amp;apos;age&amp;apos;, &amp;apos;18&amp;apos;), (&amp;apos;users&amp;apos;, &amp;apos;swht&amp;apos;)])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;keys&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取字典可遍历的键
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_li.keys()
返回结果：dict_keys([&amp;apos;age&amp;apos;, &amp;apos;users&amp;apos;])
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;pop&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：删除字典中指定的键值
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_li.pop(&amp;apos;age&amp;apos;)
返回结果：&amp;apos;18&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;popitem&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：随机返回并删除字典中的一对键和值
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_li.popitem()
返回结果：(&amp;apos;age&amp;apos;, &amp;apos;18&amp;apos;)
dict_li
{&amp;apos;users&amp;apos;: &amp;apos;swht&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;setdefault&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：查找键值，如果键不已经存在于字典中，将会添加键并将值设为默认值。
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_li.setdefault(&amp;apos;ID&amp;apos;,5)
返回结果：5
dict_li
返回结果：{&amp;apos;age&amp;apos;: &amp;apos;18&amp;apos;, &amp;apos;users&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;ID&amp;apos;: 5}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：把指定字典的键值更新到当前字典中
dict_li = {&amp;apos;users&amp;apos;:&amp;apos;swht&amp;apos;,&amp;apos;age&amp;apos;:&amp;apos;18&amp;apos;,}
dict_ai = {&amp;apos;address&amp;apos;:&amp;apos;山东&amp;apos;}
dict_li.update(dict_ai)
dict_li
返回结果：{&amp;apos;age&amp;apos;: &amp;apos;18&amp;apos;, &amp;apos;users&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;address&amp;apos;: &amp;apos;山东&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;values&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：获取字典的所有值
dict_li = {&amp;apos;age&amp;apos;: &amp;apos;18&amp;apos;, &amp;apos;users&amp;apos;: &amp;apos;swht&amp;apos;, &amp;apos;address&amp;apos;: &amp;apos;山东&amp;apos;}
dict_li.values()
返回结果：dict_values([&amp;apos;18&amp;apos;, &amp;apos;swht&amp;apos;, &amp;apos;山东&amp;apos;])
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;七、set集合&quot;&gt;&lt;a href=&quot;#七、set集合&quot; class=&quot;headerlink&quot; title=&quot;七、set集合&quot;&gt;&lt;/a&gt;七、set集合&lt;/h2&gt;&lt;p&gt;博客链接：&lt;a href=&quot;http://www.cnblogs.com/songqingbo/p/5128066.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/songqingbo/p/5128066.html&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set集合是一个无序且不重复的集合。
创建一个set集合：
    name = set(&amp;apos;sdd&amp;apos;)
    name
    返回结果：{&amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;add&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：增加集合元素
name = {&amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.add(&amp;apos;d&amp;apos;)
name
返回结果：{&amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.add(&amp;apos;sd&amp;apos;)
name
返回结果：{&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;clear&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：清空集合元素
name = {&amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.clear()
name
返回结果：{}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;copy&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：浅拷贝
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
li = name.copy()
返回结果：li
        {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;difference&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：取差集
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
li = set()
name.difference(li)
返回结果：name.difference()
{&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;difference_update&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：删除当前set中的所有包含在 new set 里的元素
li = (&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;)
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.difference_update(li)
name
返回结果：{&amp;apos;sd&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;discard&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：移除元素
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.discard(&amp;apos;s&amp;apos;)
返回结果：name 
        {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;intersection&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：取交集,建立新的set集合
li = (&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;)
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.intersection(li)
返回结果：{&amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;intersection_update&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：取交集,更新原来的set集合
li = (&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;)
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.intersection_update(li)
返回结果：{&amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;isdisjoint&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断没有交集，返回True,否则,返回False
li = {&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;}
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.isdisjoint(li)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;issubset&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断是否是子集
li = {&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;}
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.issubset(li)  #判断name是不是li的子集
返回结果：False
li.issubset(name)  #判断li是不是name的子集
返回结果：True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;issuperset&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：判断是否是父集
li = {&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;}
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.issuperset(li)  #判断name是不是li的父集
返回结果：True
li.issuperset(name)  #判断li是不是name的父集
返回结果：False
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;pop&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：移除集合元素
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.pop()
返回结果：&amp;apos;sd&amp;apos; #随机删除集合元素
se1 = {&amp;apos;a&amp;apos;,&amp;apos;s&amp;apos;,&amp;apos;sb&amp;apos;}
se1.pop()
返回结果：&amp;apos;sb&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;remove&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：移除指定集合元素
name = {&amp;apos;sd&amp;apos;,&amp;apos;d&amp;apos;,&amp;apos;s&amp;apos;}
name.remove(&amp;apos;s&amp;apos;)
返回结果：name
{&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;symmetric_difference&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：去两个集合的差集，建立新的set集合对象
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
li = {&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;}
name.symmetric_difference(li)
返回结果：{&amp;apos;sd&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;symmetric_difference_update&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：去两个集合的差集，更新原来的集合对象
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
li = {&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;}
name.symmetric_difference_update(li)
返回结果：{&amp;apos;sd&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;union&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：并集，创建新的对象
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
li = {&amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;,&amp;apos;h&amp;apos;}
name.union(li)
返回结果：{&amp;apos;h&amp;apos;, &amp;apos;s&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;sd&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;功能：更新已有集合
name = {&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;s&amp;apos;}
name.update(&amp;apos;df&amp;apos;)
name
返回结果：{&amp;apos;sd&amp;apos;, &amp;apos;d&amp;apos;, &amp;apos;f&amp;apos;, &amp;apos;s&amp;apos;}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;八、类与对象&quot;&gt;&lt;a href=&quot;#八、类与对象&quot; class=&quot;headerlink&quot; title=&quot;八、类与对象&quot;&gt;&lt;/a&gt;八、类与对象&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/O2wZsUd.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python中一切事物皆对象,对象是一开始就有的,只是我们无法访问它。访问对象需要以变量的形式去访问（即创建变量指向到对象的，变量即对对象的引用）
在python中，一个对象的特征也称为属性（attribute）。它所具有的行为也称为方法（method）
结论：对象=属性+方法
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在python中，把具有相同属性和方法的对象归为一个类（class）
比如人类，动物，植物等等，这些都是类的概念。 
类是对象的模板或蓝图，类是对象的抽象化，对象是类的实例化。类不代表具体的事物，而对象表示具体的事物。
类包含描述对象的方法。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;int&quot;&gt;&lt;a href=&quot;#int&quot; class=&quot;headerlink&quot; title=&quot;int&quot;&gt;&lt;/a&gt;int&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;取绝对值：
    age = -19
    age.__abs__() #int类函数调用
    abs(-19) #内置函数方式操作
取商和余数：
    age = 95
    age.__divmod__(10) #95/10 --&amp;gt;(9,5)
相加：
    a = 5，b=6
    a.__add__(b) #调用int的类函数add，相当于a + b  --&amp;gt;11
    a + b #内置函数方式操作
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;作业：&quot;&gt;&lt;a href=&quot;#作业：&quot; class=&quot;headerlink&quot; title=&quot;作业：&quot;&gt;&lt;/a&gt;作业：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;1. 博客整理
2. 购物商城实现
    1. 商品展示，价格
    2. 购物车添加商品（进行差异商品，同一种商品应该只存在一条数据）
    3. 付款（根据钱进行判断是否可以满足付款）
3. 预习
    http://www.cnblogs.com/wupeiqi/articles/5115190.html  后面的部分
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;作者注：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;经过第一天的学习以及后续的代码练习,给自己一个约定的代码风格、格式：
1. 模块名：
    模块应该使用尽可能短的、全小写命名，可以在模块命名时使用下划线以增强可读性。
    例如：
   
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>python自动化开发 day01</title>
    <link href="http://blog.songqingbo.cn/2015/12/16/s12-20151226-day01/"/>
    <id>http://blog.songqingbo.cn/2015/12/16/s12-20151226-day01/</id>
    <published>2015-12-16T07:30:00.000Z</published>
    <updated>2016-07-07T03:20:19.721Z</updated>
    
    <content type="html">&lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;作者注：&lt;/p&gt;
&lt;p&gt;　　python学习旅程正式开启，这一天将是一个新的开始。希望我们在python开发的道路上多多积累、多分享！&lt;/p&gt;
&lt;h2 id=&quot;一、python简介&quot;&gt;&lt;a href=&quot;#一、python简介&quot; class=&quot;headerlink&quot; title=&quot;一、python简介&quot;&gt;&lt;/a&gt;一、python简介&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;python应用 
    Disgus Voitze Yelip Mozilla Quora  Redit
    豆瓣、知乎、sohu、腾讯、网易、金山、雅虎、Facebook、 Instagram（图片分享）
python2与python3比较
    经过多年的发展，python3已经得到更多的第三方优秀函数库兼容，对比python2来说，python3表现出来的精简高效特性让开发者们跃跃欲试。
    另外，python2.7.11作为python2版本的最后一个版本，不再有新版本推出，这样官方更多的引导开发者快速的向python3版本上进行转移。
    在本次学习的过程中，我们会穿插在python2和python3两个版本之间进行学习，后续的测试代码在开头会明确标记python的使用版本。相关注释都会对python2和python3的差异进行描述。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;二、python安装&quot;&gt;&lt;a href=&quot;#二、python安装&quot; class=&quot;headerlink&quot; title=&quot;二、python安装&quot;&gt;&lt;/a&gt;二、python安装&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1.windows端安装
    安装包下载地址：
        python2.7版本：
            https://www.python.org/ftp/python/2.7.11/python-2.7.11.amd64.msi
        python3.5版本：
            https://www.python.org/ftp/python/3.5.1/python-3.5.1-amd64.exe  #安装版
            https://www.python.org/ftp/python/3.5.1/python-3.5.1-embed-win32.zip #免安装版
    安装步骤：
        使用可执行程序进行安装，按照流程进行安装即可，注意在安装的时候选择“安装路径”和一些必要的插件，比如pip、easy_install等
        使用免安装的文件（可嵌入的）进行环境配置：
        ![](http://i.imgur.com/U827QAb.jpg)
2.linux端安装
    centos6等常用系统自带的python版本为2.6，有特殊需求的朋友可能需要升级到python2.7或者python3版本。下面链接以python2.7.8为例进行编译安装。
        http://swht1278.blog.51cto.com/7138082/1728427
    提供一下python版本的下载地址：
        python2.7.11版本：
            https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
        python3.5版本：
            https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz
3.Ubuntu端安装
    最新版本的Ubuntu系统（15.04等）已经自带了python2.7.9和python3.4.5两个版本的python环境，我们只需要在shell终端输入python2或python3进行调用即可。老版本的系统升级python环境需要以下操作：
        # 增加python源
        sudo add-apt-repository ppa:fkrull/deadsnakes
        # update 软件列表
        sudo apt-get update
        # 安装python3
        sudo apt-get install python3.5
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;三、基础概念&quot;&gt;&lt;a href=&quot;#三、基础概念&quot; class=&quot;headerlink&quot; title=&quot;三、基础概念&quot;&gt;&lt;/a&gt;三、基础概念&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;变量：Python 是动态类型语言， 也就是说不需要预先声明变量的类型。变量是对象的引用，变量只是将指针指向了对象所在的内存地址。变量的类型和值在赋值那一刻被初始化。
变量起名：
    1.显式--&amp;gt;通俗易懂
    2.nums_of_alex_gf = 19 
    3.NumsOfAlexGf = 20  驼峰写法
    4.中横线不能作为变量的命名字符
    5.数字不能作为开头，但可以在中间或者结尾
    6.特殊字符不能作为变量名的组成部分
    7.不能使用空格
    8.关键字不能声明为变量
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;四、运算符&quot;&gt;&lt;a href=&quot;#四、运算符&quot; class=&quot;headerlink&quot; title=&quot;四、运算符&quot;&gt;&lt;/a&gt;四、运算符&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;算术运算符
    +  -  *  /   //  %  **
    /:传统除法，将执行地板除法，
    //:浮点除法，即去尾法除法，保留位数与除数和被除数的小数位数有关 （取整除，返回商的部分）
    **：平方运算
比较运算符
    &amp;lt;  &amp;lt;=  &amp;gt;  &amp;gt;=  ==  !=   &amp;lt;&amp;gt;
    不等于：!=   &amp;lt;&amp;gt;
    返回值是：True 和 False
赋值运算符
    &amp;gt;&amp;gt;&amp;gt; counter = 0 
    &amp;gt;&amp;gt;&amp;gt; miles = 1000.0 
    &amp;gt;&amp;gt;&amp;gt; name = &amp;apos;Bob&amp;apos; 
    &amp;gt;&amp;gt;&amp;gt; counter = counter + 1 
    &amp;gt;&amp;gt;&amp;gt; kilometers = 1.609 * miles 
    &amp;gt;&amp;gt;&amp;gt; print &amp;apos;%f miles is the same as %f km&amp;apos; % (miles, kilometers)
    1000.000000 miles is the same as 1609.000000 km
    支持简写：n=n*3 -&amp;gt; n*=3  但不支持自增自减，因为“-” 和”+”是单目字符，--n -&amp;gt; -(-n)n
位运算符
    &amp;amp;      按位与      （a&amp;amp;b）
    |      按位或    （a|b）
    ^    按位异或    （a^b）
    ~    按位取反    （~a）
    &amp;lt;&amp;lt;    左移动     a&amp;lt;&amp;lt;1 整体向左移动，结果是原来数值的2倍
    &amp;gt;&amp;gt;  右移动    a&amp;gt;&amp;gt;1 整体向右移动，结果是原来数值的1/2
逻辑运算符
    and 布尔“与”     同真为True
    or  布尔“或”     同假为False
    not    布尔“非”     非True即False
成员运算符
    in     如果在指定序列中找到指定的值，返回True
    not in 如果在指定序列中没找到指定的值，返回False
身份运算符
    is  判断两个标识符是不是引用自同一个对象
        type(names) is list 判断某个变量值的类型（list、int、dic）
    is not 判断两个标识符是不是引用自不同对象
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;五、字符编码&quot;&gt;&lt;a href=&quot;#五、字符编码&quot; class=&quot;headerlink&quot; title=&quot;五、字符编码&quot;&gt;&lt;/a&gt;五、字符编码&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;python2 中在输入中文字符的时候会报字符编码的错误，在python3中已经引入了Unicode（万国码、统一码、），它为每种语言中的每个字符设定了统一并且唯一的二进制编码，规定所有的字符和符号最少由16位二进制来表示（2个字节），即2 ** 16 = 65536
UTF-8，是对Unicode编码的压缩和优化，它不再使用最少2个字节，而是将所有的字符和符号进行分类：ascii码中的内容用1个字节保存，欧洲的字符用2个字节保存，东亚的字符用3个字节保存

示例
python2
    #!/usr/local/env python2
    # -*- coding: utf-8 -*-  # 声明使用的字符类型，否则会报错
    &amp;apos;&amp;apos;&amp;apos;
    @swht
    &amp;apos;&amp;apos;&amp;apos;
    print &amp;quot;你好！&amp;quot;

python3
    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    @swht
    &amp;apos;&amp;apos;&amp;apos;
    print (&amp;quot;你好！&amp;quot;)

总结：在python3中完全不用考虑字符编码的问题，python解释器会自行处理字符类型的问题
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;六、python流程控制&quot;&gt;&lt;a href=&quot;#六、python流程控制&quot; class=&quot;headerlink&quot; title=&quot;六、python流程控制&quot;&gt;&lt;/a&gt;六、python流程控制&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;流程控制分为两大类：条件判断和循环
其中循环又分为两类：for循环和while循环
条件判断和循环可以单独存在，也可以嵌套使用，以处理更为复杂的逻辑问题。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;下面会从&lt;em&gt;if条件判断&lt;/em&gt;、&lt;em&gt;for循环&lt;/em&gt;和&lt;em&gt;while循环&lt;/em&gt;进行代码示例：&lt;/p&gt;
&lt;h4 id=&quot;if-ex-py&quot;&gt;&lt;a href=&quot;#if-ex-py&quot; class=&quot;headerlink&quot; title=&quot;if_ex.py&quot;&gt;&lt;/a&gt;if_ex.py&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
&amp;apos;&amp;apos;&amp;apos;
@swht
&amp;apos;&amp;apos;&amp;apos;
LuckyNum = 9
# 让用户输入一个数值与指定的值进行比较，当然这里没有处理用户输入为空的情况
# strip() 可以截取用户输入字符串首尾的空格
UserInputNum = int(input(&amp;quot;请从1-100之间选择一个数字输入:&amp;quot;).strip())
if UserInputNum &amp;gt; LuckyNum:
    print(&amp;quot;你输入的数字比我的LuckNum要大哦!&amp;quot;)
elif UserInputNum &amp;lt; LuckyNum:
    print(&amp;quot;你输入的数字比我的LuckNum要小哦!&amp;quot;)
else:
    print(&amp;quot;恭喜你猜中了我的LuckNum,原来你就是我的幸运天使!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;while-ex-py&quot;&gt;&lt;a href=&quot;#while-ex-py&quot; class=&quot;headerlink&quot; title=&quot;while_ex.py&quot;&gt;&lt;/a&gt;while_ex.py&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
&amp;apos;&amp;apos;&amp;apos;
@swht
&amp;apos;&amp;apos;&amp;apos;
LuckyNum = 9
# 设置一个标志位，用于程序判断退出循环，
flag = True
while flage:
UserInputNum = int(input(&amp;quot;请从1-100之间选择一个数字输入:&amp;quot;).strip())
if UserInputNum &amp;gt; LuckyNum:
    print(&amp;quot;你输入的数字比我的LuckyNum要大哦!&amp;quot;)
elif UserInputNum &amp;lt; LuckyNum:
    print(&amp;quot;你输入的数字比我的LuckyNum要小哦!&amp;quot;)
else:
    print(&amp;quot;恭喜你猜中了我的LuckyNum,原来你就是我的幸运天使!&amp;quot;)
    flag = False 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;for-ex-py&quot;&gt;&lt;a href=&quot;#for-ex-py&quot; class=&quot;headerlink&quot; title=&quot;for_ex.py&quot;&gt;&lt;/a&gt;for_ex.py&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3
&amp;apos;&amp;apos;&amp;apos;
@swht
&amp;apos;&amp;apos;&amp;apos;
LuckyNum = 9
for count in range(3):
    UserInputNum = int(input(&amp;quot;请从1-100之间选择一个数字输入:&amp;quot;).strip())
    if UserInputNum &amp;gt; LuckyNum:
        print(&amp;quot;你输入的数字比我的LuckyNum要大哦!&amp;quot;)
    elif UserInputNum &amp;lt; LuckyNum:
        print(&amp;quot;你输入的数字比我的LuckyNum要小哦!&amp;quot;)
    else:
        print(&amp;quot;恭喜你猜中了我的LuckyNum,原来你就是我的幸运天使!&amp;quot;)
        break
else:
    print(&amp;quot;你输入的次数已达到3次,程序即将退出!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;对比break和countnue&quot;&gt;&lt;a href=&quot;#对比break和countnue&quot; class=&quot;headerlink&quot; title=&quot;对比break和countnue&quot;&gt;&lt;/a&gt;对比break和countnue&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;break是结束整个循环体，continue是结束单次循环

示例
    #!/usr/local/env python3
    &amp;apos;&amp;apos;&amp;apos;
    @swht
    &amp;apos;&amp;apos;&amp;apos;
    x = 0
    while x &amp;lt; 10:
        if x ==3:
            break
        x += 1
        print(&amp;quot;x=%s&amp;quot; % x)
    输出结果：    x=1
                x=2
                x=3
    直接退出了整个while循环
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;七、格式化输出&quot;&gt;&lt;a href=&quot;#七、格式化输出&quot; class=&quot;headerlink&quot; title=&quot;七、格式化输出&quot;&gt;&lt;/a&gt;七、格式化输出&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;使用&amp;apos;&amp;apos;&amp;apos;string&amp;apos;&amp;apos;&amp;apos;可以很方便的将多行内容进行注释，另外这个符号还有一个功能，那就是文档描述的功能。一般而言，在程序的前面后有一个文档说明，包括作者信息，版本信息，功能等

#!/usr/bin/env python
&amp;apos;&amp;apos;&amp;apos;
@swht
&amp;apos;&amp;apos;&amp;apos;

name = input(&amp;quot;name:&amp;quot;)
age = input(&amp;quot;age:&amp;quot;)
job = input(&amp;quot;job:&amp;quot;)

print(&amp;quot;Information of:&amp;quot; + name + &amp;quot;\nname:&amp;quot; + name + &amp;quot;\nage:&amp;quot; + age + &amp;quot;\njob:&amp;quot; + job)
print(&amp;quot;Information of %s\nname:%s\nage:%s\njob:%s&amp;quot; %(name,name,age,job))
print(&amp;apos;&amp;apos;&amp;apos;
    Infomation of %s
             name:%s
              age:%s
              job:%s
    &amp;apos;&amp;apos;&amp;apos; % (name,name,age,job))
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;八、数据类型：&quot;&gt;&lt;a href=&quot;#八、数据类型：&quot; class=&quot;headerlink&quot; title=&quot;八、数据类型：&quot;&gt;&lt;/a&gt;八、数据类型：&lt;/h2&gt;&lt;p&gt;&lt;em&gt;列表转换成元组：tuple(name_list)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;元组转换成列表：list(元组_name)&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.数字
    int     整型
    long     长整型
    float     浮点型
2.布尔
    1    真
    0    假
3.字符串
        stinglist = “Hello World”
    字符串操作：
        (参考：http://www.cnblogs.com/zhxiang/p/3385242.html
        http://www.jb51.net/article/47956.htm)
        移除空白：stinglist.strip()
        移除特殊字符：stinglist.lstrip().rstrip(&amp;apos;,&amp;apos;)
        分割：&amp;gt;&amp;gt;&amp;gt; stringlist[2]
                 &amp;apos;l&amp;apos;
        长度：&amp;gt;&amp;gt;&amp;gt; len(stringlist)
                 11
        索引：&amp;gt;&amp;gt;&amp;gt; stringlist.index(&amp;apos;W&amp;apos;) #字母‘W’所在的索引值
                 6
        切片：&amp;gt;&amp;gt;&amp;gt; stringlist[0:3] #顾前不顾尾
                 &amp;apos;Hel&amp;apos;
        字符串在输出时的对齐：
            &amp;gt;&amp;gt;&amp;gt; stringlist[0:3]
            &amp;apos;Hel&amp;apos;
            &amp;gt;&amp;gt;&amp;gt; stringlist[0:3].ljust(5) #ljust(width,[fillchar]) fillchar为填充字符，默认为空格
            &amp;apos;Hel  &amp;apos;
        字符串拼接：
            &amp;gt;&amp;gt;&amp;gt; stringlist += s
            &amp;gt;&amp;gt;&amp;gt; stringlist
            &amp;apos;Hello Worldab,cde,fgh,ijk&amp;apos;
        大小写转换：
            &amp;gt;&amp;gt;&amp;gt;stringlist.lower() #小写
               &amp;apos;hello world&amp;apos;
            &amp;gt;&amp;gt;&amp;gt; stringlist.upper() #大写
                &amp;apos;HELLO WORLD&amp;apos;
            &amp;gt;&amp;gt;&amp;gt; stringlist.swapcase() #大小写互换
                &amp;apos;hELLO wORLD&amp;apos;
            &amp;gt;&amp;gt;&amp;gt; stringlist.capitalize() #首字母大写
                &amp;apos;Hello world&amp;apos; 
            &amp;gt;&amp;gt;&amp;gt; string.capwords(stringlist) #以空格分割，每个单词首字母大写
                &amp;apos;Hello World&amp;apos;
        字符串翻转：
            &amp;gt;&amp;gt;&amp;gt; s
            &amp;apos;sdsds sdsdsff&amp;apos;
            &amp;gt;&amp;gt;&amp;gt; s = s[::-1]
            &amp;gt;&amp;gt;&amp;gt; s
            &amp;apos;ffsdsds sdsds&amp;apos;
        字符串查找：
            &amp;gt;&amp;gt;&amp;gt; stringlist.find(&amp;apos;World&amp;apos;)
                6
        判断是否为整型：
            &amp;gt;&amp;gt;&amp;gt; stringlist.isdigit()
                False
        判断字符串是否为空格：
            &amp;gt;&amp;gt;&amp;gt; stringlist.isspace()
                False
        转换成列表：
            &amp;gt;&amp;gt;&amp;gt; stringlist.split() #默认以空格为分割
                [&amp;apos;Hello&amp;apos;, &amp;apos;World&amp;apos;]

4.列表（dir(name_list)获取列表操作帮助）
    参考：http://www.jb51.net/article/46768.htm
    name_list = [&amp;apos;alex&amp;apos;, &amp;apos;sddkd&amp;apos;, &amp;apos;shdjsjd&amp;apos;, &amp;apos;shen&amp;apos;, &amp;apos;swht&amp;apos;, &amp;apos;test&amp;apos;]
    移除空白：name_list.strip()
    获取元素：name_list[index_num]
    索引：name_list.index(&amp;quot;swht&amp;quot;)  获取指定元素的索引值
    追加：name_list.append(&amp;quot;test&amp;quot;) 在列表后面追加一个元素
    插入：name_list.insert(3,&amp;quot;ssdd&amp;quot;) 在索引值3后面插入新的元素
    删除：name_list.pop() 删除最后一个元素
         name_list.remove(&amp;quot;test&amp;quot;) 删除指定的元素
    排序：name_list.sort()  对元素按照ASCII码进行排序
        python3 里面不能同时sort int 和 str类型
    反转顺序：name_list.reverse()  对列表中的元素进行反转操作
    切片：name_list[0:3]  切取索引值从0-2的值（切片顾头不顾尾）
    扩展：name_list.extend(name_list2) 在一个列表后面追加另一个列表的元素，或者追加一个变量中的单个字符
5.元组
    &amp;gt;&amp;gt;&amp;gt; namelist = (&amp;quot;swht&amp;quot;,&amp;quot;test&amp;quot;)
    &amp;gt;&amp;gt;&amp;gt; type(namelist)
        &amp;lt;class &amp;apos;tuple&amp;apos;&amp;gt;
    索引：&amp;gt;&amp;gt;&amp;gt; namelist.index(&amp;apos;swht&amp;apos;) #查找某个字符串的索引值
             0
    统计：&amp;gt;&amp;gt;&amp;gt; namelist.count(&amp;apos;swht&amp;apos;) #统计某个字符串出现的次数
             1
6.字典（无序）
    参考：http://www.jb51.net/article/47990.htm

    不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住
    键必须不可变，所以可以用数，字符串或元组充当，所以用列表就不行

    dict = {&amp;quot;swht&amp;quot;:&amp;quot;test123&amp;quot;,&amp;quot;shen&amp;quot;:&amp;quot;test124&amp;quot;,&amp;quot;test&amp;quot;:&amp;quot;test125&amp;quot;}
    访问字典里的值：
        &amp;gt;&amp;gt;&amp;gt; dict[&amp;quot;swht&amp;quot;]
            &amp;apos;test123&amp;apos;
    增加字典里的值：
        &amp;gt;&amp;gt;&amp;gt; dict[&amp;quot;alex&amp;quot;] = &amp;quot;test126&amp;quot;
        &amp;gt;&amp;gt;&amp;gt; dict
        {&amp;apos;test&amp;apos;: &amp;apos;test125&amp;apos;, &amp;apos;shen&amp;apos;: &amp;apos;test124&amp;apos;, &amp;apos;swht&amp;apos;: &amp;apos;test123&amp;apos;, &amp;apos;alex&amp;apos;: &amp;apos;test126&amp;apos;}

    删除字典当中的元素：
        &amp;gt;&amp;gt;&amp;gt; del dict[&amp;quot;test&amp;quot;]
        &amp;gt;&amp;gt;&amp;gt; dict
        {&amp;apos;shen&amp;apos;: &amp;apos;test124&amp;apos;, &amp;apos;swht&amp;apos;: &amp;apos;test123&amp;apos;, &amp;apos;alex&amp;apos;: &amp;apos;test126&amp;apos;}
        &amp;gt;&amp;gt;&amp;gt;                
    清空字典里的所有条目：
        &amp;gt;&amp;gt;&amp;gt; dict.clear()
        &amp;gt;&amp;gt;&amp;gt; dict
        {}
    删除字典：del dict
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;九、文件操作&quot;&gt;&lt;a href=&quot;#九、文件操作&quot; class=&quot;headerlink&quot; title=&quot;九、文件操作&quot;&gt;&lt;/a&gt;九、文件操作&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;简单操作：
    filename = open(&amp;quot;文件路径&amp;quot;,&amp;quot;模式&amp;quot;)    #打开文件
    filename.write(&amp;apos;内容&amp;apos;)    #往文件中写入内容
    filename.read()        #一次性加载文件中的内容到内存
    filename.readlines()    #一次性加载所有的内容到内存，并根据行分割成字符串
    filename.close()    #关闭文件句柄
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;十、作业&quot;&gt;&lt;a href=&quot;#十、作业&quot; class=&quot;headerlink&quot; title=&quot;十、作业&quot;&gt;&lt;/a&gt;十、作业&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;作业一：编写登录接口
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;作业二：多级菜单    
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;Author:@南非波波&lt;/p&gt;
&lt;p&gt;作者注：&lt;/p&gt;
&lt;p&gt;　　python学习旅程正式开启，这一天将是一个新的开始。希望我们在python开发的道路上多多积累、多分享！&lt;/p&gt;
&lt;h2 id=&quot;一、python简介&quot;&gt;&lt;a href=&quot;#一、python简介&quot; cla
    
    </summary>
    
    
      <category term="Python开发之路" scheme="http://blog.songqingbo.cn/tags/Python%E5%BC%80%E5%8F%91%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
</feed>
